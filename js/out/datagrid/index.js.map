{
  "version": 3,
  "sources": ["../../src/datagrid/styles.scss", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/preact/src/util.js", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/preact/src/options.js", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/preact/src/create-element.js", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/preact/src/component.js", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/preact/src/create-context.js", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/preact/src/constants.js", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/preact/src/diff/children.js", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/preact/src/diff/props.js", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/preact/src/diff/index.js", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/preact/src/render.js", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/preact/src/clone-element.js", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/preact/src/diff/catch-error.js", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/preact/hooks/src/index.js", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/preact/compat/src/util.js", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/preact/compat/src/PureComponent.js", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/preact/compat/src/memo.js", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/preact/compat/src/forwardRef.js", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/preact/compat/src/Children.js", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/preact/compat/src/suspense.js", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/preact/compat/src/suspense-list.js", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/preact/compat/src/portals.js", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/preact/compat/src/render.js", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/preact/compat/src/index.js", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/@tanstack/table-core/src/utils.ts", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/@tanstack/table-core/src/core/column.ts", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/@tanstack/table-core/src/core/headers.ts", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/@tanstack/table-core/src/features/ColumnSizing.ts", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/@tanstack/table-core/src/features/Expanding.ts", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/@tanstack/table-core/src/filterFns.ts", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/@tanstack/table-core/src/features/Filters.ts", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/@tanstack/table-core/src/aggregationFns.ts", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/@tanstack/table-core/src/features/Grouping.ts", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/@tanstack/table-core/src/features/Ordering.ts", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/@tanstack/table-core/src/features/Pagination.ts", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/@tanstack/table-core/src/features/Pinning.ts", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/@tanstack/table-core/src/features/RowSelection.ts", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/@tanstack/table-core/src/sortingFns.ts", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/@tanstack/table-core/src/features/Sorting.ts", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/@tanstack/table-core/src/features/Visibility.ts", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/@tanstack/table-core/src/core/table.ts", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/@tanstack/table-core/src/core/cell.ts", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/@tanstack/table-core/src/core/row.ts", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/@tanstack/table-core/src/columnHelper.ts", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/@tanstack/table-core/src/utils/getCoreRowModel.ts", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/@tanstack/table-core/src/utils/filterRowsUtils.ts", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/@tanstack/table-core/src/utils/getFilteredRowModel.ts", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/@tanstack/table-core/src/utils/getFacetedRowModel.ts", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/@tanstack/table-core/src/utils/getFacetedUniqueValues.ts", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/@tanstack/table-core/src/utils/getFacetedMinMaxValues.ts", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/@tanstack/table-core/src/utils/getSortedRowModel.ts", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/@tanstack/table-core/src/utils/getGroupedRowModel.ts", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/@tanstack/table-core/src/utils/getExpandedRowModel.ts", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/@tanstack/table-core/src/utils/getPaginationRowModel.ts", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/@tanstack/react-table/src/index.tsx", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/@tanstack/react-virtual/build/lib/_virtual/_rollupPluginBabelHelpers.mjs", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/@tanstack/virtual-core/build/lib/_virtual/_rollupPluginBabelHelpers.mjs", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/@tanstack/virtual-core/src/utils.ts", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/@tanstack/virtual-core/src/index.ts", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/@tanstack/react-virtual/src/index.tsx", "../../../../../../nobackup/dropbox-nosync/shinycomponent/js/node_modules/preact/compat/client.mjs", "../../src/datagrid/selection.tsx", "../../src/datagrid/sort-arrows.tsx", "../../src/datagrid/table-summary.tsx", "../../src/datagrid/index.tsx"],
  "sourcesContent": ["export default `\n:root,\n:host {\n  --shiny-datagrid-font-size: 0.9em;\n  --shiny-datagrid-padding: 0.3em 0.5em;\n  --shiny-datagrid-grid-header-bgcolor: #eee;\n  --shiny-datagrid-grid-header-gridlines-color: #ccc;\n  --shiny-datagrid-grid-header-gridlines-style: solid;\n  --shiny-datagrid-grid-gridlines-color: #ccc;\n  --shiny-datagrid-grid-gridlines-style: solid;\n  --shiny-datagrid-table-header-bottom-border: 1px solid black;\n  --shiny-datagrid-grid-body-hover-bgcolor: var(\n    --shiny-datagrid-grid-header-bgcolor\n  );\n  --shiny-datagrid-grid-body-selected-bgcolor: var(--bs-primary);\n  --shiny-datagrid-grid-body-selected-color: var(--bs-light);\n}\n\n.shiny-data-grid svg.sort-arrow {\n  display: inline-block;\n  width: 0.85em;\n  height: 0.85em;\n  margin-bottom: 0.15em;\n}\n\n.shiny-data-grid > table {\n  border-collapse: separate;\n  border-spacing: 0;\n}\n.shiny-data-grid > table > thead {\n  position: sticky;\n  top: 0;\n}\n.shiny-data-grid > table > thead > th {\n  white-space: nowrap;\n}\n\n.shiny-data-grid.shiny-data-grid-table > table > thead > tr:last-child > th {\n  border-bottom: var(--shiny-datagrid-table-header-bottom-border);\n}\n\n/*\n *\n * # GRID STYLES\n *\n */\n.shiny-data-grid.shiny-data-grid-grid > table {\n  font-size: var(--shiny-datagrid-font-size);\n}\n.shiny-data-grid.shiny-data-grid-grid > table > thead > tr > th {\n  background-color: var(--shiny-datagrid-grid-header-bgcolor);\n  padding: var(--shiny-datagrid-padding);\n}\n.shiny-data-grid.shiny-data-grid-grid > table > tbody > tr:hover {\n  --shiny-datagrid-grid-gridlines-color: inherit;\n  background-color: var(--shiny-datagrid-grid-body-hover-bgcolor);\n}\n.shiny-data-grid.shiny-data-grid-grid > table > tbody > tr.selected {\n  --shiny-datagrid-grid-gridlines-color: var(\n    --shiny-datagrid-grid-body-selected-bgcolor\n  );\n  background-color: var(--shiny-datagrid-grid-body-selected-bgcolor);\n  color: var(--shiny-datagrid-grid-body-selected-color);\n}\n.shiny-data-grid.shiny-data-grid-grid > table > tbody > tr > td {\n  padding: var(--shiny-datagrid-padding);\n}\n\n/* ## Grid borders */\n.shiny-data-grid.shiny-data-grid-grid > table {\n  border-collapse: separate;\n}\n.shiny-data-grid.shiny-data-grid-grid > table > thead > tr:first-child > th {\n  border-top-style: var(--shiny-datagrid-grid-gridlines-style);\n}\n.shiny-data-grid.shiny-data-grid-grid > table > thead > tr > th {\n  border: 1px var(--shiny-datagrid-grid-gridlines-style) var(--shiny-datagrid-grid-header-gridlines-color);\n  border-top-style: none;\n  border-left-style: none;\n}\n.shiny-data-grid.shiny-data-grid-grid > table > thead > tr > th:first-child {\n  border-left-style: var(--shiny-datagrid-grid-gridlines-style);\n}\n.shiny-data-grid.shiny-data-grid-grid > table > tbody > tr > td {\n  border: 1px var(--shiny-datagrid-grid-gridlines-style) var(--shiny-datagrid-grid-gridlines-color);\n  border-top-style: none;\n  border-left-style: none;\n}\n.shiny-data-grid.shiny-data-grid-grid > table > tbody > tr > td:first-child {\n  border-left-style: var(--shiny-datagrid-grid-gridlines-style);\n}\n.shiny-data-grid.shiny-data-grid-grid.scrolling {\n  border: var(--shiny-datagrid-grid-gridlines-style) var(--shiny-datagrid-grid-header-gridlines-color);\n}\n.shiny-data-grid.shiny-data-grid-grid.scrolling > table > thead > tr:first-child > th {\n  border-top-style: none;\n}\n.shiny-data-grid.shiny-data-grid-grid.scrolling > table > tbody > tr:last-child > td {\n  border-bottom-style: none;\n}\n.shiny-data-grid.shiny-data-grid-grid.scrolling > table > thead > tr > th:first-child,\n.shiny-data-grid.shiny-data-grid-grid.scrolling > table > tbody > tr > td:first-child {\n  border-left-style: none;\n}\n.shiny-data-grid.shiny-data-grid-grid.scrolling > table > thead > tr > th:last-child,\n.shiny-data-grid.shiny-data-grid-grid.scrolling > table > tbody > tr > td:last-child {\n  border-right-style: none;\n}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VSb290IjoiL1VzZXJzL3dpbnN0b24vRHJvcGJveC9Qcm9qZWN0cy9zaGlueWNvbXBvbmVudC9qcy9zcmMvZGF0YWdyaWQiLCJzb3VyY2VzIjpbInN0eWxlcy5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7RUFFRTtFQUNBO0VBRUE7RUFDQTtFQUNBO0VBRUE7RUFDQTtFQUVBO0VBRUE7QUFBQTtBQUFBO0VBR0E7RUFDQTs7O0FBR0Y7RUFDRTtFQUNBO0VBQ0E7RUFDQTs7O0FBSUE7RUFDRTtFQUNBOztBQUVBO0VBQ0U7RUFDQTs7QUFDQTtFQUNFOzs7QUFRSjtFQUNFOzs7QUFLTjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBT0U7RUFDRTs7QUFFQTtFQUNFO0VBQ0E7O0FBSUE7RUFDRTtFQUNBOztBQUdGO0VBQ0U7QUFBQTtBQUFBO0VBR0E7RUFDQTs7QUFHRjtFQUNFOzs7QUFNUjtBQUdFO0VBQ0U7O0FBSUk7RUFDRTs7QUFHRjtFQUNFO0VBRUE7RUFDQTs7QUFFQTtFQUNFOztBQU1SO0VBQ0U7RUFFQTtFQUNBOztBQUVBO0VBQ0U7O0FBS047RUFDRTs7QUFHQTtFQUNFOztBQUVGO0VBQ0U7O0FBRUY7QUFBQTtFQUVFOztBQUVGO0FBQUE7RUFFRSIsInNvdXJjZXNDb250ZW50IjpbIjpyb290LFxuOmhvc3Qge1xuICAtLXNoaW55LWRhdGFncmlkLWZvbnQtc2l6ZTogMC45ZW07XG4gIC0tc2hpbnktZGF0YWdyaWQtcGFkZGluZzogMC4zZW0gMC41ZW07XG5cbiAgLS1zaGlueS1kYXRhZ3JpZC1ncmlkLWhlYWRlci1iZ2NvbG9yOiAjZWVlO1xuICAtLXNoaW55LWRhdGFncmlkLWdyaWQtaGVhZGVyLWdyaWRsaW5lcy1jb2xvcjogI2NjYztcbiAgLS1zaGlueS1kYXRhZ3JpZC1ncmlkLWhlYWRlci1ncmlkbGluZXMtc3R5bGU6IHNvbGlkO1xuXG4gIC0tc2hpbnktZGF0YWdyaWQtZ3JpZC1ncmlkbGluZXMtY29sb3I6ICNjY2M7XG4gIC0tc2hpbnktZGF0YWdyaWQtZ3JpZC1ncmlkbGluZXMtc3R5bGU6IHNvbGlkO1xuXG4gIC0tc2hpbnktZGF0YWdyaWQtdGFibGUtaGVhZGVyLWJvdHRvbS1ib3JkZXI6IDFweCBzb2xpZCBibGFjaztcblxuICAtLXNoaW55LWRhdGFncmlkLWdyaWQtYm9keS1ob3Zlci1iZ2NvbG9yOiB2YXIoXG4gICAgLS1zaGlueS1kYXRhZ3JpZC1ncmlkLWhlYWRlci1iZ2NvbG9yXG4gICk7XG4gIC0tc2hpbnktZGF0YWdyaWQtZ3JpZC1ib2R5LXNlbGVjdGVkLWJnY29sb3I6IHZhcigtLWJzLXByaW1hcnkpO1xuICAtLXNoaW55LWRhdGFncmlkLWdyaWQtYm9keS1zZWxlY3RlZC1jb2xvcjogdmFyKC0tYnMtbGlnaHQpO1xufVxuXG4uc2hpbnktZGF0YS1ncmlkIHN2Zy5zb3J0LWFycm93IHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICB3aWR0aDogMC44NWVtO1xuICBoZWlnaHQ6IDAuODVlbTtcbiAgbWFyZ2luLWJvdHRvbTogMC4xNWVtO1xufVxuXG4uc2hpbnktZGF0YS1ncmlkIHtcbiAgPiB0YWJsZSB7XG4gICAgYm9yZGVyLWNvbGxhcHNlOiBzZXBhcmF0ZTtcbiAgICBib3JkZXItc3BhY2luZzogMDtcblxuICAgID4gdGhlYWQge1xuICAgICAgcG9zaXRpb246IHN0aWNreTtcbiAgICAgIHRvcDogMDtcbiAgICAgID4gdGgge1xuICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4uc2hpbnktZGF0YS1ncmlkLnNoaW55LWRhdGEtZ3JpZC10YWJsZSB7XG4gID4gdGFibGUge1xuICAgID4gdGhlYWQgPiB0cjpsYXN0LWNoaWxkID4gdGgge1xuICAgICAgYm9yZGVyLWJvdHRvbTogdmFyKC0tc2hpbnktZGF0YWdyaWQtdGFibGUtaGVhZGVyLWJvdHRvbS1ib3JkZXIpO1xuICAgIH1cbiAgfVxufVxuXG4vKlxuICpcbiAqICMgR1JJRCBTVFlMRVNcbiAqXG4gKi9cblxuLnNoaW55LWRhdGEtZ3JpZC5zaGlueS1kYXRhLWdyaWQtZ3JpZCB7XG4gID4gdGFibGUge1xuICAgIGZvbnQtc2l6ZTogdmFyKC0tc2hpbnktZGF0YWdyaWQtZm9udC1zaXplKTtcblxuICAgID4gdGhlYWQgPiB0ciA+IHRoIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXNoaW55LWRhdGFncmlkLWdyaWQtaGVhZGVyLWJnY29sb3IpO1xuICAgICAgcGFkZGluZzogdmFyKC0tc2hpbnktZGF0YWdyaWQtcGFkZGluZyk7XG4gICAgfVxuXG4gICAgPiB0Ym9keSA+IHRyIHtcbiAgICAgICY6aG92ZXIge1xuICAgICAgICAtLXNoaW55LWRhdGFncmlkLWdyaWQtZ3JpZGxpbmVzLWNvbG9yOiBpbmhlcml0O1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1zaGlueS1kYXRhZ3JpZC1ncmlkLWJvZHktaG92ZXItYmdjb2xvcik7XG4gICAgICB9XG5cbiAgICAgICYuc2VsZWN0ZWQge1xuICAgICAgICAtLXNoaW55LWRhdGFncmlkLWdyaWQtZ3JpZGxpbmVzLWNvbG9yOiB2YXIoXG4gICAgICAgICAgLS1zaGlueS1kYXRhZ3JpZC1ncmlkLWJvZHktc2VsZWN0ZWQtYmdjb2xvclxuICAgICAgICApO1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1zaGlueS1kYXRhZ3JpZC1ncmlkLWJvZHktc2VsZWN0ZWQtYmdjb2xvcik7XG4gICAgICAgIGNvbG9yOiB2YXIoLS1zaGlueS1kYXRhZ3JpZC1ncmlkLWJvZHktc2VsZWN0ZWQtY29sb3IpO1xuICAgICAgfVxuXG4gICAgICA+IHRkIHtcbiAgICAgICAgcGFkZGluZzogdmFyKC0tc2hpbnktZGF0YWdyaWQtcGFkZGluZyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qICMjIEdyaWQgYm9yZGVycyAqL1xuXG4uc2hpbnktZGF0YS1ncmlkLnNoaW55LWRhdGEtZ3JpZC1ncmlkIHtcbiAgPiB0YWJsZSB7XG4gICAgYm9yZGVyLWNvbGxhcHNlOiBzZXBhcmF0ZTtcblxuICAgID4gdGhlYWQge1xuICAgICAgPiB0ciB7XG4gICAgICAgICY6Zmlyc3QtY2hpbGQgPiB0aCB7XG4gICAgICAgICAgYm9yZGVyLXRvcC1zdHlsZTogdmFyKC0tc2hpbnktZGF0YWdyaWQtZ3JpZC1ncmlkbGluZXMtc3R5bGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgPiB0aCB7XG4gICAgICAgICAgYm9yZGVyOiAxcHggdmFyKC0tc2hpbnktZGF0YWdyaWQtZ3JpZC1ncmlkbGluZXMtc3R5bGUpXG4gICAgICAgICAgICB2YXIoLS1zaGlueS1kYXRhZ3JpZC1ncmlkLWhlYWRlci1ncmlkbGluZXMtY29sb3IpO1xuICAgICAgICAgIGJvcmRlci10b3Atc3R5bGU6IG5vbmU7XG4gICAgICAgICAgYm9yZGVyLWxlZnQtc3R5bGU6IG5vbmU7XG5cbiAgICAgICAgICAmOmZpcnN0LWNoaWxkIHtcbiAgICAgICAgICAgIGJvcmRlci1sZWZ0LXN0eWxlOiB2YXIoLS1zaGlueS1kYXRhZ3JpZC1ncmlkLWdyaWRsaW5lcy1zdHlsZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgPiB0Ym9keSA+IHRyID4gdGQge1xuICAgICAgYm9yZGVyOiAxcHggdmFyKC0tc2hpbnktZGF0YWdyaWQtZ3JpZC1ncmlkbGluZXMtc3R5bGUpXG4gICAgICAgIHZhcigtLXNoaW55LWRhdGFncmlkLWdyaWQtZ3JpZGxpbmVzLWNvbG9yKTtcbiAgICAgIGJvcmRlci10b3Atc3R5bGU6IG5vbmU7XG4gICAgICBib3JkZXItbGVmdC1zdHlsZTogbm9uZTtcblxuICAgICAgJjpmaXJzdC1jaGlsZCB7XG4gICAgICAgIGJvcmRlci1sZWZ0LXN0eWxlOiB2YXIoLS1zaGlueS1kYXRhZ3JpZC1ncmlkLWdyaWRsaW5lcy1zdHlsZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgJi5zY3JvbGxpbmcge1xuICAgIGJvcmRlcjogdmFyKC0tc2hpbnktZGF0YWdyaWQtZ3JpZC1ncmlkbGluZXMtc3R5bGUpXG4gICAgICB2YXIoLS1zaGlueS1kYXRhZ3JpZC1ncmlkLWhlYWRlci1ncmlkbGluZXMtY29sb3IpO1xuXG4gICAgPiB0YWJsZSA+IHRoZWFkID4gdHI6Zmlyc3QtY2hpbGQgPiB0aCB7XG4gICAgICBib3JkZXItdG9wLXN0eWxlOiBub25lO1xuICAgIH1cbiAgICA+IHRhYmxlID4gdGJvZHkgPiB0cjpsYXN0LWNoaWxkID4gdGQge1xuICAgICAgYm9yZGVyLWJvdHRvbS1zdHlsZTogbm9uZTtcbiAgICB9XG4gICAgPiB0YWJsZSA+IHRoZWFkID4gdHIgPiB0aDpmaXJzdC1jaGlsZCxcbiAgICA+IHRhYmxlID4gdGJvZHkgPiB0ciA+IHRkOmZpcnN0LWNoaWxkIHtcbiAgICAgIGJvcmRlci1sZWZ0LXN0eWxlOiBub25lO1xuICAgIH1cbiAgICA+IHRhYmxlID4gdGhlYWQgPiB0ciA+IHRoOmxhc3QtY2hpbGQsXG4gICAgPiB0YWJsZSA+IHRib2R5ID4gdHIgPiB0ZDpsYXN0LWNoaWxkIHtcbiAgICAgIGJvcmRlci1yaWdodC1zdHlsZTogbm9uZTtcbiAgICB9XG4gIH1cbn1cbiJdfQ== */`;\n", "import { EMPTY_ARR } from './constants';\n\nexport const isArray = Array.isArray;\n\n/**\n * Assign properties from `props` to `obj`\n * @template O, P The obj and props types\n * @param {O} obj The object to copy properties to\n * @param {P} props The object to copy properties from\n * @returns {O & P}\n */\nexport function assign(obj, props) {\n\t// @ts-ignore We change the type of `obj` to be `O & P`\n\tfor (let i in props) obj[i] = props[i];\n\treturn /** @type {O & P} */ (obj);\n}\n\n/**\n * Remove a child node from its parent if attached. This is a workaround for\n * IE11 which doesn't support `Element.prototype.remove()`. Using this function\n * is smaller than including a dedicated polyfill.\n * @param {Node} node The node to remove\n */\nexport function removeNode(node) {\n\tlet parentNode = node.parentNode;\n\tif (parentNode) parentNode.removeChild(node);\n}\n\nexport const slice = EMPTY_ARR.slice;\n", "import { _catchError } from './diff/catch-error';\n\n/**\n * The `option` object can potentially contain callback functions\n * that are called during various stages of our renderer. This is the\n * foundation on which all our addons like `preact/debug`, `preact/compat`,\n * and `preact/hooks` are based on. See the `Options` type in `internal.d.ts`\n * for a full list of available option hooks (most editors/IDEs allow you to\n * ctrl+click or cmd+click on mac the type definition below).\n * @type {import('./internal').Options}\n */\nconst options = {\n\t_catchError\n};\n\nexport default options;\n", "import { slice } from './util';\nimport options from './options';\n\nlet vnodeId = 0;\n\n/**\n * Create an virtual node (used for JSX)\n * @param {import('./internal').VNode[\"type\"]} type The node name or Component\n * constructor for this virtual node\n * @param {object | null | undefined} [props] The properties of the virtual node\n * @param {Array<import('.').ComponentChildren>} [children] The children of the virtual node\n * @returns {import('./internal').VNode}\n */\nexport function createElement(type, props, children) {\n\tlet normalizedProps = {},\n\t\tkey,\n\t\tref,\n\t\ti;\n\tfor (i in props) {\n\t\tif (i == 'key') key = props[i];\n\t\telse if (i == 'ref') ref = props[i];\n\t\telse normalizedProps[i] = props[i];\n\t}\n\n\tif (arguments.length > 2) {\n\t\tnormalizedProps.children =\n\t\t\targuments.length > 3 ? slice.call(arguments, 2) : children;\n\t}\n\n\t// If a Component VNode, check for and apply defaultProps\n\t// Note: type may be undefined in development, must never error here.\n\tif (typeof type == 'function' && type.defaultProps != null) {\n\t\tfor (i in type.defaultProps) {\n\t\t\tif (normalizedProps[i] === undefined) {\n\t\t\t\tnormalizedProps[i] = type.defaultProps[i];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn createVNode(type, normalizedProps, key, ref, null);\n}\n\n/**\n * Create a VNode (used internally by Preact)\n * @param {import('./internal').VNode[\"type\"]} type The node name or Component\n * Constructor for this virtual node\n * @param {object | string | number | null} props The properties of this virtual node.\n * If this virtual node represents a text node, this is the text of the node (string or number).\n * @param {string | number | null} key The key for this virtual node, used when\n * diffing it against its children\n * @param {import('./internal').VNode[\"ref\"]} ref The ref property that will\n * receive a reference to its created child\n * @returns {import('./internal').VNode}\n */\nexport function createVNode(type, props, key, ref, original) {\n\t// V8 seems to be better at detecting type shapes if the object is allocated from the same call site\n\t// Do not inline into createElement and coerceToVNode!\n\tconst vnode = {\n\t\ttype,\n\t\tprops,\n\t\tkey,\n\t\tref,\n\t\t_children: null,\n\t\t_parent: null,\n\t\t_depth: 0,\n\t\t_dom: null,\n\t\t// _nextDom must be initialized to undefined b/c it will eventually\n\t\t// be set to dom.nextSibling which can return `null` and it is important\n\t\t// to be able to distinguish between an uninitialized _nextDom and\n\t\t// a _nextDom that has been set to `null`\n\t\t_nextDom: undefined,\n\t\t_component: null,\n\t\t_hydrating: null,\n\t\tconstructor: undefined,\n\t\t_original: original == null ? ++vnodeId : original\n\t};\n\n\t// Only invoke the vnode hook if this was *not* a direct copy:\n\tif (original == null && options.vnode != null) options.vnode(vnode);\n\n\treturn vnode;\n}\n\nexport function createRef() {\n\treturn { current: null };\n}\n\nexport function Fragment(props) {\n\treturn props.children;\n}\n\n/**\n * Check if a the argument is a valid Preact VNode.\n * @param {*} vnode\n * @returns {vnode is import('./internal').VNode}\n */\nexport const isValidElement = vnode =>\n\tvnode != null && vnode.constructor === undefined;\n", "import { assign } from './util';\nimport { diff, commitRoot } from './diff/index';\nimport options from './options';\nimport { Fragment } from './create-element';\n\n/**\n * Base Component class. Provides `setState()` and `forceUpdate()`, which\n * trigger rendering\n * @param {object} props The initial component props\n * @param {object} context The initial context from parent components'\n * getChildContext\n */\nexport function Component(props, context) {\n\tthis.props = props;\n\tthis.context = context;\n}\n\n/**\n * Update component state and schedule a re-render.\n * @this {import('./internal').Component}\n * @param {object | ((s: object, p: object) => object)} update A hash of state\n * properties to update with new values or a function that given the current\n * state and props returns a new partial state\n * @param {() => void} [callback] A function to be called once component state is\n * updated\n */\nComponent.prototype.setState = function (update, callback) {\n\t// only clone state when copying to nextState the first time.\n\tlet s;\n\tif (this._nextState != null && this._nextState !== this.state) {\n\t\ts = this._nextState;\n\t} else {\n\t\ts = this._nextState = assign({}, this.state);\n\t}\n\n\tif (typeof update == 'function') {\n\t\t// Some libraries like `immer` mark the current state as readonly,\n\t\t// preventing us from mutating it, so we need to clone it. See #2716\n\t\tupdate = update(assign({}, s), this.props);\n\t}\n\n\tif (update) {\n\t\tassign(s, update);\n\t}\n\n\t// Skip update if updater function returned null\n\tif (update == null) return;\n\n\tif (this._vnode) {\n\t\tif (callback) {\n\t\t\tthis._stateCallbacks.push(callback);\n\t\t}\n\t\tenqueueRender(this);\n\t}\n};\n\n/**\n * Immediately perform a synchronous re-render of the component\n * @this {import('./internal').Component}\n * @param {() => void} [callback] A function to be called after component is\n * re-rendered\n */\nComponent.prototype.forceUpdate = function (callback) {\n\tif (this._vnode) {\n\t\t// Set render mode so that we can differentiate where the render request\n\t\t// is coming from. We need this because forceUpdate should never call\n\t\t// shouldComponentUpdate\n\t\tthis._force = true;\n\t\tif (callback) this._renderCallbacks.push(callback);\n\t\tenqueueRender(this);\n\t}\n};\n\n/**\n * Accepts `props` and `state`, and returns a new Virtual DOM tree to build.\n * Virtual DOM is generally constructed via [JSX](http://jasonformat.com/wtf-is-jsx).\n * @param {object} props Props (eg: JSX attributes) received from parent\n * element/component\n * @param {object} state The component's current state\n * @param {object} context Context object, as returned by the nearest\n * ancestor's `getChildContext()`\n * @returns {import('./index').ComponentChildren | void}\n */\nComponent.prototype.render = Fragment;\n\n/**\n * @param {import('./internal').VNode} vnode\n * @param {number | null} [childIndex]\n */\nexport function getDomSibling(vnode, childIndex) {\n\tif (childIndex == null) {\n\t\t// Use childIndex==null as a signal to resume the search from the vnode's sibling\n\t\treturn vnode._parent\n\t\t\t? getDomSibling(vnode._parent, vnode._parent._children.indexOf(vnode) + 1)\n\t\t\t: null;\n\t}\n\n\tlet sibling;\n\tfor (; childIndex < vnode._children.length; childIndex++) {\n\t\tsibling = vnode._children[childIndex];\n\n\t\tif (sibling != null && sibling._dom != null) {\n\t\t\t// Since updateParentDomPointers keeps _dom pointer correct,\n\t\t\t// we can rely on _dom to tell us if this subtree contains a\n\t\t\t// rendered DOM node, and what the first rendered DOM node is\n\t\t\treturn sibling._dom;\n\t\t}\n\t}\n\n\t// If we get here, we have not found a DOM node in this vnode's children.\n\t// We must resume from this vnode's sibling (in it's parent _children array)\n\t// Only climb up and search the parent if we aren't searching through a DOM\n\t// VNode (meaning we reached the DOM parent of the original vnode that began\n\t// the search)\n\treturn typeof vnode.type == 'function' ? getDomSibling(vnode) : null;\n}\n\n/**\n * Trigger in-place re-rendering of a component.\n * @param {import('./internal').Component} component The component to rerender\n */\nfunction renderComponent(component) {\n\tlet vnode = component._vnode,\n\t\toldDom = vnode._dom,\n\t\tparentDom = component._parentDom;\n\n\tif (parentDom) {\n\t\tlet commitQueue = [];\n\t\tconst oldVNode = assign({}, vnode);\n\t\toldVNode._original = vnode._original + 1;\n\n\t\tdiff(\n\t\t\tparentDom,\n\t\t\tvnode,\n\t\t\toldVNode,\n\t\t\tcomponent._globalContext,\n\t\t\tparentDom.ownerSVGElement !== undefined,\n\t\t\tvnode._hydrating != null ? [oldDom] : null,\n\t\t\tcommitQueue,\n\t\t\toldDom == null ? getDomSibling(vnode) : oldDom,\n\t\t\tvnode._hydrating\n\t\t);\n\t\tcommitRoot(commitQueue, vnode);\n\n\t\tif (vnode._dom != oldDom) {\n\t\t\tupdateParentDomPointers(vnode);\n\t\t}\n\t}\n}\n\n/**\n * @param {import('./internal').VNode} vnode\n */\nfunction updateParentDomPointers(vnode) {\n\tif ((vnode = vnode._parent) != null && vnode._component != null) {\n\t\tvnode._dom = vnode._component.base = null;\n\t\tfor (let i = 0; i < vnode._children.length; i++) {\n\t\t\tlet child = vnode._children[i];\n\t\t\tif (child != null && child._dom != null) {\n\t\t\t\tvnode._dom = vnode._component.base = child._dom;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn updateParentDomPointers(vnode);\n\t}\n}\n\n/**\n * The render queue\n * @type {Array<import('./internal').Component>}\n */\nlet rerenderQueue = [];\n\n/*\n * The value of `Component.debounce` must asynchronously invoke the passed in callback. It is\n * important that contributors to Preact can consistently reason about what calls to `setState`, etc.\n * do, and when their effects will be applied. See the links below for some further reading on designing\n * asynchronous APIs.\n * * [Designing APIs for Asynchrony](https://blog.izs.me/2013/08/designing-apis-for-asynchrony)\n * * [Callbacks synchronous and asynchronous](https://blog.ometer.com/2011/07/24/callbacks-synchronous-and-asynchronous/)\n */\n\nlet prevDebounce;\n\nconst defer =\n\ttypeof Promise == 'function'\n\t\t? Promise.prototype.then.bind(Promise.resolve())\n\t\t: setTimeout;\n\n/**\n * Enqueue a rerender of a component\n * @param {import('./internal').Component} c The component to rerender\n */\nexport function enqueueRender(c) {\n\tif (\n\t\t(!c._dirty &&\n\t\t\t(c._dirty = true) &&\n\t\t\trerenderQueue.push(c) &&\n\t\t\t!process._rerenderCount++) ||\n\t\tprevDebounce !== options.debounceRendering\n\t) {\n\t\tprevDebounce = options.debounceRendering;\n\t\t(prevDebounce || defer)(process);\n\t}\n}\n\n/**\n * @param {import('./internal').Component} a\n * @param {import('./internal').Component} b\n */\nconst depthSort = (a, b) => a._vnode._depth - b._vnode._depth;\n\n/** Flush the render queue by rerendering all queued components */\nfunction process() {\n\tlet c;\n\trerenderQueue.sort(depthSort);\n\t// Don't update `renderCount` yet. Keep its value non-zero to prevent unnecessary\n\t// process() calls from getting scheduled while `queue` is still being consumed.\n\twhile ((c = rerenderQueue.shift())) {\n\t\tif (c._dirty) {\n\t\t\tlet renderQueueLength = rerenderQueue.length;\n\t\t\trenderComponent(c);\n\t\t\tif (rerenderQueue.length > renderQueueLength) {\n\t\t\t\t// When i.e. rerendering a provider additional new items can be injected, we want to\n\t\t\t\t// keep the order from top to bottom with those new items so we can handle them in a\n\t\t\t\t// single pass\n\t\t\t\trerenderQueue.sort(depthSort);\n\t\t\t}\n\t\t}\n\t}\n\tprocess._rerenderCount = 0;\n}\n\nprocess._rerenderCount = 0;\n", "import { enqueueRender } from './component';\n\nexport let i = 0;\n\nexport function createContext(defaultValue, contextId) {\n\tcontextId = '__cC' + i++;\n\n\tconst context = {\n\t\t_id: contextId,\n\t\t_defaultValue: defaultValue,\n\t\t/** @type {import('./internal').FunctionComponent} */\n\t\tConsumer(props, contextValue) {\n\t\t\t// return props.children(\n\t\t\t// \tcontext[contextId] ? context[contextId].props.value : defaultValue\n\t\t\t// );\n\t\t\treturn props.children(contextValue);\n\t\t},\n\t\t/** @type {import('./internal').FunctionComponent} */\n\t\tProvider(props) {\n\t\t\tif (!this.getChildContext) {\n\t\t\t\t/** @type {import('./internal').Component[]} */\n\t\t\t\tlet subs = [];\n\t\t\t\tlet ctx = {};\n\t\t\t\tctx[contextId] = this;\n\n\t\t\t\tthis.getChildContext = () => ctx;\n\n\t\t\t\tthis.shouldComponentUpdate = function (_props) {\n\t\t\t\t\tif (this.props.value !== _props.value) {\n\t\t\t\t\t\t// I think the forced value propagation here was only needed when `options.debounceRendering` was being bypassed:\n\t\t\t\t\t\t// https://github.com/preactjs/preact/commit/4d339fb803bea09e9f198abf38ca1bf8ea4b7771#diff-54682ce380935a717e41b8bfc54737f6R358\n\t\t\t\t\t\t// In those cases though, even with the value corrected, we're double-rendering all nodes.\n\t\t\t\t\t\t// It might be better to just tell folks not to use force-sync mode.\n\t\t\t\t\t\t// Currently, using `useContext()` in a class component will overwrite its `this.context` value.\n\t\t\t\t\t\t// subs.some(c => {\n\t\t\t\t\t\t// \tc.context = _props.value;\n\t\t\t\t\t\t// \tenqueueRender(c);\n\t\t\t\t\t\t// });\n\n\t\t\t\t\t\t// subs.some(c => {\n\t\t\t\t\t\t// \tc.context[contextId] = _props.value;\n\t\t\t\t\t\t// \tenqueueRender(c);\n\t\t\t\t\t\t// });\n\t\t\t\t\t\tsubs.some(c => {\n\t\t\t\t\t\t\tc._force = true;\n\t\t\t\t\t\t\tenqueueRender(c);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tthis.sub = c => {\n\t\t\t\t\tsubs.push(c);\n\t\t\t\t\tlet old = c.componentWillUnmount;\n\t\t\t\t\tc.componentWillUnmount = () => {\n\t\t\t\t\t\tsubs.splice(subs.indexOf(c), 1);\n\t\t\t\t\t\tif (old) old.call(c);\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn props.children;\n\t\t}\n\t};\n\n\t// Devtools needs access to the context object when it\n\t// encounters a Provider. This is necessary to support\n\t// setting `displayName` on the context object instead\n\t// of on the component itself. See:\n\t// https://reactjs.org/docs/context.html#contextdisplayname\n\n\treturn (context.Provider._contextRef = context.Consumer.contextType =\n\t\tcontext);\n}\n", "export const EMPTY_OBJ = {};\nexport const EMPTY_ARR = [];\nexport const IS_NON_DIMENSIONAL =\n\t/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;\n", "import { diff, unmount, applyRef } from './index';\nimport { createVNode, Fragment } from '../create-element';\nimport { EMPTY_OBJ, EMPTY_ARR } from '../constants';\nimport { getDomSibling } from '../component';\nimport { isArray } from '../util';\n\n/**\n * Diff the children of a virtual node\n * @param {import('../internal').PreactElement} parentDom The DOM element whose\n * children are being diffed\n * @param {import('../internal').ComponentChildren[]} renderResult\n * @param {import('../internal').VNode} newParentVNode The new virtual\n * node whose children should be diff'ed against oldParentVNode\n * @param {import('../internal').VNode} oldParentVNode The old virtual\n * node whose children should be diff'ed against newParentVNode\n * @param {object} globalContext The current context object - modified by getChildContext\n * @param {boolean} isSvg Whether or not this DOM node is an SVG node\n * @param {Array<import('../internal').PreactElement>} excessDomChildren\n * @param {Array<import('../internal').Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {import('../internal').PreactElement} oldDom The current attached DOM\n * element any new dom elements should be placed around. Likely `null` on first\n * render (except when hydrating). Can be a sibling DOM element when diffing\n * Fragments that have siblings. In most cases, it starts out as `oldChildren[0]._dom`.\n * @param {boolean} isHydrating Whether or not we are in hydration\n */\nexport function diffChildren(\n\tparentDom,\n\trenderResult,\n\tnewParentVNode,\n\toldParentVNode,\n\tglobalContext,\n\tisSvg,\n\texcessDomChildren,\n\tcommitQueue,\n\toldDom,\n\tisHydrating\n) {\n\tlet i, j, oldVNode, childVNode, newDom, firstChildDom, refs;\n\n\t// This is a compression of oldParentVNode!=null && oldParentVNode != EMPTY_OBJ && oldParentVNode._children || EMPTY_ARR\n\t// as EMPTY_OBJ._children should be `undefined`.\n\tlet oldChildren = (oldParentVNode && oldParentVNode._children) || EMPTY_ARR;\n\n\tlet oldChildrenLength = oldChildren.length;\n\n\tnewParentVNode._children = [];\n\tfor (i = 0; i < renderResult.length; i++) {\n\t\tchildVNode = renderResult[i];\n\n\t\tif (\n\t\t\tchildVNode == null ||\n\t\t\ttypeof childVNode == 'boolean' ||\n\t\t\ttypeof childVNode == 'function'\n\t\t) {\n\t\t\tchildVNode = newParentVNode._children[i] = null;\n\t\t}\n\t\t// If this newVNode is being reused (e.g. <div>{reuse}{reuse}</div>) in the same diff,\n\t\t// or we are rendering a component (e.g. setState) copy the oldVNodes so it can have\n\t\t// it's own DOM & etc. pointers\n\t\telse if (\n\t\t\ttypeof childVNode == 'string' ||\n\t\t\ttypeof childVNode == 'number' ||\n\t\t\t// eslint-disable-next-line valid-typeof\n\t\t\ttypeof childVNode == 'bigint'\n\t\t) {\n\t\t\tchildVNode = newParentVNode._children[i] = createVNode(\n\t\t\t\tnull,\n\t\t\t\tchildVNode,\n\t\t\t\tnull,\n\t\t\t\tnull,\n\t\t\t\tchildVNode\n\t\t\t);\n\t\t} else if (isArray(childVNode)) {\n\t\t\tchildVNode = newParentVNode._children[i] = createVNode(\n\t\t\t\tFragment,\n\t\t\t\t{ children: childVNode },\n\t\t\t\tnull,\n\t\t\t\tnull,\n\t\t\t\tnull\n\t\t\t);\n\t\t} else if (childVNode._depth > 0) {\n\t\t\t// VNode is already in use, clone it. This can happen in the following\n\t\t\t// scenario:\n\t\t\t//   const reuse = <div />\n\t\t\t//   <div>{reuse}<span />{reuse}</div>\n\t\t\tchildVNode = newParentVNode._children[i] = createVNode(\n\t\t\t\tchildVNode.type,\n\t\t\t\tchildVNode.props,\n\t\t\t\tchildVNode.key,\n\t\t\t\tchildVNode.ref ? childVNode.ref : null,\n\t\t\t\tchildVNode._original\n\t\t\t);\n\t\t} else {\n\t\t\tchildVNode = newParentVNode._children[i] = childVNode;\n\t\t}\n\n\t\t// Terser removes the `continue` here and wraps the loop body\n\t\t// in a `if (childVNode) { ... } condition\n\t\tif (childVNode == null) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tchildVNode._parent = newParentVNode;\n\t\tchildVNode._depth = newParentVNode._depth + 1;\n\n\t\t// Check if we find a corresponding element in oldChildren.\n\t\t// If found, delete the array item by setting to `undefined`.\n\t\t// We use `undefined`, as `null` is reserved for empty placeholders\n\t\t// (holes).\n\t\toldVNode = oldChildren[i];\n\n\t\tif (\n\t\t\toldVNode === null ||\n\t\t\t(oldVNode &&\n\t\t\t\tchildVNode.key == oldVNode.key &&\n\t\t\t\tchildVNode.type === oldVNode.type)\n\t\t) {\n\t\t\toldChildren[i] = undefined;\n\t\t} else {\n\t\t\t// Either oldVNode === undefined or oldChildrenLength > 0,\n\t\t\t// so after this loop oldVNode == null or oldVNode is a valid value.\n\t\t\tfor (j = 0; j < oldChildrenLength; j++) {\n\t\t\t\toldVNode = oldChildren[j];\n\t\t\t\t// If childVNode is unkeyed, we only match similarly unkeyed nodes, otherwise we match by key.\n\t\t\t\t// We always match by type (in either case).\n\t\t\t\tif (\n\t\t\t\t\toldVNode &&\n\t\t\t\t\tchildVNode.key == oldVNode.key &&\n\t\t\t\t\tchildVNode.type === oldVNode.type\n\t\t\t\t) {\n\t\t\t\t\toldChildren[j] = undefined;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\toldVNode = null;\n\t\t\t}\n\t\t}\n\n\t\toldVNode = oldVNode || EMPTY_OBJ;\n\n\t\t// Morph the old element into the new one, but don't append it to the dom yet\n\t\tdiff(\n\t\t\tparentDom,\n\t\t\tchildVNode,\n\t\t\toldVNode,\n\t\t\tglobalContext,\n\t\t\tisSvg,\n\t\t\texcessDomChildren,\n\t\t\tcommitQueue,\n\t\t\toldDom,\n\t\t\tisHydrating\n\t\t);\n\n\t\tnewDom = childVNode._dom;\n\n\t\tif ((j = childVNode.ref) && oldVNode.ref != j) {\n\t\t\tif (!refs) refs = [];\n\t\t\tif (oldVNode.ref) refs.push(oldVNode.ref, null, childVNode);\n\t\t\trefs.push(j, childVNode._component || newDom, childVNode);\n\t\t}\n\n\t\tif (newDom != null) {\n\t\t\tif (firstChildDom == null) {\n\t\t\t\tfirstChildDom = newDom;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\ttypeof childVNode.type == 'function' &&\n\t\t\t\tchildVNode._children === oldVNode._children\n\t\t\t) {\n\t\t\t\tchildVNode._nextDom = oldDom = reorderChildren(\n\t\t\t\t\tchildVNode,\n\t\t\t\t\toldDom,\n\t\t\t\t\tparentDom\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\toldDom = placeChild(\n\t\t\t\t\tparentDom,\n\t\t\t\t\tchildVNode,\n\t\t\t\t\toldVNode,\n\t\t\t\t\toldChildren,\n\t\t\t\t\tnewDom,\n\t\t\t\t\toldDom\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (typeof newParentVNode.type == 'function') {\n\t\t\t\t// Because the newParentVNode is Fragment-like, we need to set it's\n\t\t\t\t// _nextDom property to the nextSibling of its last child DOM node.\n\t\t\t\t//\n\t\t\t\t// `oldDom` contains the correct value here because if the last child\n\t\t\t\t// is a Fragment-like, then oldDom has already been set to that child's _nextDom.\n\t\t\t\t// If the last child is a DOM VNode, then oldDom will be set to that DOM\n\t\t\t\t// node's nextSibling.\n\t\t\t\tnewParentVNode._nextDom = oldDom;\n\t\t\t}\n\t\t} else if (\n\t\t\toldDom &&\n\t\t\toldVNode._dom == oldDom &&\n\t\t\toldDom.parentNode != parentDom\n\t\t) {\n\t\t\t// The above condition is to handle null placeholders. See test in placeholder.test.js:\n\t\t\t// `efficiently replace null placeholders in parent rerenders`\n\t\t\toldDom = getDomSibling(oldVNode);\n\t\t}\n\t}\n\n\tnewParentVNode._dom = firstChildDom;\n\n\t// Remove remaining oldChildren if there are any.\n\tfor (i = oldChildrenLength; i--; ) {\n\t\tif (oldChildren[i] != null) {\n\t\t\tif (\n\t\t\t\ttypeof newParentVNode.type == 'function' &&\n\t\t\t\toldChildren[i]._dom != null &&\n\t\t\t\toldChildren[i]._dom == newParentVNode._nextDom\n\t\t\t) {\n\t\t\t\t// If the newParentVNode.__nextDom points to a dom node that is about to\n\t\t\t\t// be unmounted, then get the next sibling of that vnode and set\n\t\t\t\t// _nextDom to it\n\t\t\t\tnewParentVNode._nextDom = getLastDom(oldParentVNode).nextSibling;\n\t\t\t}\n\n\t\t\tunmount(oldChildren[i], oldChildren[i]);\n\t\t}\n\t}\n\n\t// Set refs only after unmount\n\tif (refs) {\n\t\tfor (i = 0; i < refs.length; i++) {\n\t\t\tapplyRef(refs[i], refs[++i], refs[++i]);\n\t\t}\n\t}\n}\n\nfunction reorderChildren(childVNode, oldDom, parentDom) {\n\t// Note: VNodes in nested suspended trees may be missing _children.\n\tlet c = childVNode._children;\n\tlet tmp = 0;\n\tfor (; c && tmp < c.length; tmp++) {\n\t\tlet vnode = c[tmp];\n\t\tif (vnode) {\n\t\t\t// We typically enter this code path on sCU bailout, where we copy\n\t\t\t// oldVNode._children to newVNode._children. If that is the case, we need\n\t\t\t// to update the old children's _parent pointer to point to the newVNode\n\t\t\t// (childVNode here).\n\t\t\tvnode._parent = childVNode;\n\n\t\t\tif (typeof vnode.type == 'function') {\n\t\t\t\toldDom = reorderChildren(vnode, oldDom, parentDom);\n\t\t\t} else {\n\t\t\t\toldDom = placeChild(parentDom, vnode, vnode, c, vnode._dom, oldDom);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn oldDom;\n}\n\n/**\n * Flatten and loop through the children of a virtual node\n * @param {import('../index').ComponentChildren} children The unflattened\n * children of a virtual node\n * @returns {import('../internal').VNode[]}\n */\nexport function toChildArray(children, out) {\n\tout = out || [];\n\tif (children == null || typeof children == 'boolean') {\n\t} else if (isArray(children)) {\n\t\tchildren.some(child => {\n\t\t\ttoChildArray(child, out);\n\t\t});\n\t} else {\n\t\tout.push(children);\n\t}\n\treturn out;\n}\n\nfunction placeChild(\n\tparentDom,\n\tchildVNode,\n\toldVNode,\n\toldChildren,\n\tnewDom,\n\toldDom\n) {\n\tlet nextDom;\n\tif (childVNode._nextDom !== undefined) {\n\t\t// Only Fragments or components that return Fragment like VNodes will\n\t\t// have a non-undefined _nextDom. Continue the diff from the sibling\n\t\t// of last DOM child of this child VNode\n\t\tnextDom = childVNode._nextDom;\n\n\t\t// Eagerly cleanup _nextDom. We don't need to persist the value because\n\t\t// it is only used by `diffChildren` to determine where to resume the diff after\n\t\t// diffing Components and Fragments. Once we store it the nextDOM local var, we\n\t\t// can clean up the property\n\t\tchildVNode._nextDom = undefined;\n\t} else if (\n\t\toldVNode == null ||\n\t\tnewDom != oldDom ||\n\t\tnewDom.parentNode == null\n\t) {\n\t\touter: if (oldDom == null || oldDom.parentNode !== parentDom) {\n\t\t\tparentDom.appendChild(newDom);\n\t\t\tnextDom = null;\n\t\t} else {\n\t\t\t// `j<oldChildrenLength; j+=2` is an alternative to `j++<oldChildrenLength/2`\n\t\t\tfor (\n\t\t\t\tlet sibDom = oldDom, j = 0;\n\t\t\t\t(sibDom = sibDom.nextSibling) && j < oldChildren.length;\n\t\t\t\tj += 1\n\t\t\t) {\n\t\t\t\tif (sibDom == newDom) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t}\n\t\t\tparentDom.insertBefore(newDom, oldDom);\n\t\t\tnextDom = oldDom;\n\t\t}\n\t}\n\n\t// If we have pre-calculated the nextDOM node, use it. Else calculate it now\n\t// Strictly check for `undefined` here cuz `null` is a valid value of `nextDom`.\n\t// See more detail in create-element.js:createVNode\n\tif (nextDom !== undefined) {\n\t\toldDom = nextDom;\n\t} else {\n\t\toldDom = newDom.nextSibling;\n\t}\n\n\treturn oldDom;\n}\n\n/**\n * @param {import('../internal').VNode} vnode\n */\nfunction getLastDom(vnode) {\n\tif (vnode.type == null || typeof vnode.type === 'string') {\n\t\treturn vnode._dom;\n\t}\n\n\tif (vnode._children) {\n\t\tfor (let i = vnode._children.length - 1; i >= 0; i--) {\n\t\t\tlet child = vnode._children[i];\n\t\t\tif (child) {\n\t\t\t\tlet lastDom = getLastDom(child);\n\t\t\t\tif (lastDom) {\n\t\t\t\t\treturn lastDom;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn null;\n}\n", "import { IS_NON_DIMENSIONAL } from '../constants';\nimport options from '../options';\n\n/**\n * Diff the old and new properties of a VNode and apply changes to the DOM node\n * @param {import('../internal').PreactElement} dom The DOM node to apply\n * changes to\n * @param {object} newProps The new props\n * @param {object} oldProps The old props\n * @param {boolean} isSvg Whether or not this node is an SVG node\n * @param {boolean} hydrate Whether or not we are in hydration mode\n */\nexport function diffProps(dom, newProps, oldProps, isSvg, hydrate) {\n\tlet i;\n\n\tfor (i in oldProps) {\n\t\tif (i !== 'children' && i !== 'key' && !(i in newProps)) {\n\t\t\tsetProperty(dom, i, null, oldProps[i], isSvg);\n\t\t}\n\t}\n\n\tfor (i in newProps) {\n\t\tif (\n\t\t\t(!hydrate || typeof newProps[i] == 'function') &&\n\t\t\ti !== 'children' &&\n\t\t\ti !== 'key' &&\n\t\t\ti !== 'value' &&\n\t\t\ti !== 'checked' &&\n\t\t\toldProps[i] !== newProps[i]\n\t\t) {\n\t\t\tsetProperty(dom, i, newProps[i], oldProps[i], isSvg);\n\t\t}\n\t}\n}\n\nfunction setStyle(style, key, value) {\n\tif (key[0] === '-') {\n\t\tstyle.setProperty(key, value == null ? '' : value);\n\t} else if (value == null) {\n\t\tstyle[key] = '';\n\t} else if (typeof value != 'number' || IS_NON_DIMENSIONAL.test(key)) {\n\t\tstyle[key] = value;\n\t} else {\n\t\tstyle[key] = value + 'px';\n\t}\n}\n\n/**\n * Set a property value on a DOM node\n * @param {import('../internal').PreactElement} dom The DOM node to modify\n * @param {string} name The name of the property to set\n * @param {*} value The value to set the property to\n * @param {*} oldValue The old value the property had\n * @param {boolean} isSvg Whether or not this DOM node is an SVG node or not\n */\nexport function setProperty(dom, name, value, oldValue, isSvg) {\n\tlet useCapture;\n\n\to: if (name === 'style') {\n\t\tif (typeof value == 'string') {\n\t\t\tdom.style.cssText = value;\n\t\t} else {\n\t\t\tif (typeof oldValue == 'string') {\n\t\t\t\tdom.style.cssText = oldValue = '';\n\t\t\t}\n\n\t\t\tif (oldValue) {\n\t\t\t\tfor (name in oldValue) {\n\t\t\t\t\tif (!(value && name in value)) {\n\t\t\t\t\t\tsetStyle(dom.style, name, '');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (value) {\n\t\t\t\tfor (name in value) {\n\t\t\t\t\tif (!oldValue || value[name] !== oldValue[name]) {\n\t\t\t\t\t\tsetStyle(dom.style, name, value[name]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t// Benchmark for comparison: https://esbench.com/bench/574c954bdb965b9a00965ac6\n\telse if (name[0] === 'o' && name[1] === 'n') {\n\t\tuseCapture = name !== (name = name.replace(/Capture$/, ''));\n\n\t\t// Infer correct casing for DOM built-in events:\n\t\tif (name.toLowerCase() in dom) name = name.toLowerCase().slice(2);\n\t\telse name = name.slice(2);\n\n\t\tif (!dom._listeners) dom._listeners = {};\n\t\tdom._listeners[name + useCapture] = value;\n\n\t\tif (value) {\n\t\t\tif (!oldValue) {\n\t\t\t\tconst handler = useCapture ? eventProxyCapture : eventProxy;\n\t\t\t\tdom.addEventListener(name, handler, useCapture);\n\t\t\t}\n\t\t} else {\n\t\t\tconst handler = useCapture ? eventProxyCapture : eventProxy;\n\t\t\tdom.removeEventListener(name, handler, useCapture);\n\t\t}\n\t} else if (name !== 'dangerouslySetInnerHTML') {\n\t\tif (isSvg) {\n\t\t\t// Normalize incorrect prop usage for SVG:\n\t\t\t// - xlink:href / xlinkHref --> href (xlink:href was removed from SVG and isn't needed)\n\t\t\t// - className --> class\n\t\t\tname = name.replace(/xlink(H|:h)/, 'h').replace(/sName$/, 's');\n\t\t} else if (\n\t\t\tname !== 'width' &&\n\t\t\tname !== 'height' &&\n\t\t\tname !== 'href' &&\n\t\t\tname !== 'list' &&\n\t\t\tname !== 'form' &&\n\t\t\t// Default value in browsers is `-1` and an empty string is\n\t\t\t// cast to `0` instead\n\t\t\tname !== 'tabIndex' &&\n\t\t\tname !== 'download' &&\n\t\t\tname !== 'rowSpan' &&\n\t\t\tname !== 'colSpan' &&\n\t\t\tname in dom\n\t\t) {\n\t\t\ttry {\n\t\t\t\tdom[name] = value == null ? '' : value;\n\t\t\t\t// labelled break is 1b smaller here than a return statement (sorry)\n\t\t\t\tbreak o;\n\t\t\t} catch (e) {}\n\t\t}\n\n\t\t// aria- and data- attributes have no boolean representation.\n\t\t// A `false` value is different from the attribute not being\n\t\t// present, so we can't remove it. For non-boolean aria\n\t\t// attributes we could treat false as a removal, but the\n\t\t// amount of exceptions would cost too many bytes. On top of\n\t\t// that other frameworks generally stringify `false`.\n\n\t\tif (typeof value === 'function') {\n\t\t\t// never serialize functions as attribute values\n\t\t} else if (value != null && (value !== false || name[4] === '-')) {\n\t\t\tdom.setAttribute(name, value);\n\t\t} else {\n\t\t\tdom.removeAttribute(name);\n\t\t}\n\t}\n}\n\n/**\n * Proxy an event to hooked event handlers\n * @param {Event} e The event object from the browser\n * @private\n */\nfunction eventProxy(e) {\n\treturn this._listeners[e.type + false](options.event ? options.event(e) : e);\n}\n\nfunction eventProxyCapture(e) {\n\treturn this._listeners[e.type + true](options.event ? options.event(e) : e);\n}\n", "import { EMPTY_OBJ } from '../constants';\nimport { Component, getDomSibling } from '../component';\nimport { Fragment } from '../create-element';\nimport { diffChildren } from './children';\nimport { diffProps, setProperty } from './props';\nimport { assign, isArray, removeNode, slice } from '../util';\nimport options from '../options';\n\n/**\n * Diff two virtual nodes and apply proper changes to the DOM\n * @param {import('../internal').PreactElement} parentDom The parent of the DOM element\n * @param {import('../internal').VNode} newVNode The new virtual node\n * @param {import('../internal').VNode} oldVNode The old virtual node\n * @param {object} globalContext The current context object. Modified by getChildContext\n * @param {boolean} isSvg Whether or not this element is an SVG node\n * @param {Array<import('../internal').PreactElement>} excessDomChildren\n * @param {Array<import('../internal').Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {import('../internal').PreactElement} oldDom The current attached DOM\n * element any new dom elements should be placed around. Likely `null` on first\n * render (except when hydrating). Can be a sibling DOM element when diffing\n * Fragments that have siblings. In most cases, it starts out as `oldChildren[0]._dom`.\n * @param {boolean} [isHydrating] Whether or not we are in hydration\n */\nexport function diff(\n\tparentDom,\n\tnewVNode,\n\toldVNode,\n\tglobalContext,\n\tisSvg,\n\texcessDomChildren,\n\tcommitQueue,\n\toldDom,\n\tisHydrating\n) {\n\tlet tmp,\n\t\tnewType = newVNode.type;\n\n\t// When passing through createElement it assigns the object\n\t// constructor as undefined. This to prevent JSON-injection.\n\tif (newVNode.constructor !== undefined) return null;\n\n\t// If the previous diff bailed out, resume creating/hydrating.\n\tif (oldVNode._hydrating != null) {\n\t\tisHydrating = oldVNode._hydrating;\n\t\toldDom = newVNode._dom = oldVNode._dom;\n\t\t// if we resume, we want the tree to be \"unlocked\"\n\t\tnewVNode._hydrating = null;\n\t\texcessDomChildren = [oldDom];\n\t}\n\n\tif ((tmp = options._diff)) tmp(newVNode);\n\n\ttry {\n\t\touter: if (typeof newType == 'function') {\n\t\t\tlet c, isNew, oldProps, oldState, snapshot, clearProcessingException;\n\t\t\tlet newProps = newVNode.props;\n\n\t\t\t// Necessary for createContext api. Setting this property will pass\n\t\t\t// the context value as `this.context` just for this component.\n\t\t\ttmp = newType.contextType;\n\t\t\tlet provider = tmp && globalContext[tmp._id];\n\t\t\tlet componentContext = tmp\n\t\t\t\t? provider\n\t\t\t\t\t? provider.props.value\n\t\t\t\t\t: tmp._defaultValue\n\t\t\t\t: globalContext;\n\n\t\t\t// Get component and set it to `c`\n\t\t\tif (oldVNode._component) {\n\t\t\t\tc = newVNode._component = oldVNode._component;\n\t\t\t\tclearProcessingException = c._processingException = c._pendingError;\n\t\t\t} else {\n\t\t\t\t// Instantiate the new component\n\t\t\t\tif ('prototype' in newType && newType.prototype.render) {\n\t\t\t\t\t// @ts-ignore The check above verifies that newType is suppose to be constructed\n\t\t\t\t\tnewVNode._component = c = new newType(newProps, componentContext); // eslint-disable-line new-cap\n\t\t\t\t} else {\n\t\t\t\t\t// @ts-ignore Trust me, Component implements the interface we want\n\t\t\t\t\tnewVNode._component = c = new Component(newProps, componentContext);\n\t\t\t\t\tc.constructor = newType;\n\t\t\t\t\tc.render = doRender;\n\t\t\t\t}\n\t\t\t\tif (provider) provider.sub(c);\n\n\t\t\t\tc.props = newProps;\n\t\t\t\tif (!c.state) c.state = {};\n\t\t\t\tc.context = componentContext;\n\t\t\t\tc._globalContext = globalContext;\n\t\t\t\tisNew = c._dirty = true;\n\t\t\t\tc._renderCallbacks = [];\n\t\t\t\tc._stateCallbacks = [];\n\t\t\t}\n\n\t\t\t// Invoke getDerivedStateFromProps\n\t\t\tif (c._nextState == null) {\n\t\t\t\tc._nextState = c.state;\n\t\t\t}\n\n\t\t\tif (newType.getDerivedStateFromProps != null) {\n\t\t\t\tif (c._nextState == c.state) {\n\t\t\t\t\tc._nextState = assign({}, c._nextState);\n\t\t\t\t}\n\n\t\t\t\tassign(\n\t\t\t\t\tc._nextState,\n\t\t\t\t\tnewType.getDerivedStateFromProps(newProps, c._nextState)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\toldProps = c.props;\n\t\t\toldState = c.state;\n\t\t\tc._vnode = newVNode;\n\n\t\t\t// Invoke pre-render lifecycle methods\n\t\t\tif (isNew) {\n\t\t\t\tif (\n\t\t\t\t\tnewType.getDerivedStateFromProps == null &&\n\t\t\t\t\tc.componentWillMount != null\n\t\t\t\t) {\n\t\t\t\t\tc.componentWillMount();\n\t\t\t\t}\n\n\t\t\t\tif (c.componentDidMount != null) {\n\t\t\t\t\tc._renderCallbacks.push(c.componentDidMount);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (\n\t\t\t\t\tnewType.getDerivedStateFromProps == null &&\n\t\t\t\t\tnewProps !== oldProps &&\n\t\t\t\t\tc.componentWillReceiveProps != null\n\t\t\t\t) {\n\t\t\t\t\tc.componentWillReceiveProps(newProps, componentContext);\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\t(!c._force &&\n\t\t\t\t\t\tc.shouldComponentUpdate != null &&\n\t\t\t\t\t\tc.shouldComponentUpdate(\n\t\t\t\t\t\t\tnewProps,\n\t\t\t\t\t\t\tc._nextState,\n\t\t\t\t\t\t\tcomponentContext\n\t\t\t\t\t\t) === false) ||\n\t\t\t\t\tnewVNode._original === oldVNode._original\n\t\t\t\t) {\n\t\t\t\t\t// More info about this here: https://gist.github.com/JoviDeCroock/bec5f2ce93544d2e6070ef8e0036e4e8\n\t\t\t\t\tif (newVNode._original !== oldVNode._original) {\n\t\t\t\t\t\t// When we are dealing with a bail because of sCU we have to update\n\t\t\t\t\t\t// the props, state and dirty-state.\n\t\t\t\t\t\t// when we are dealing with strict-equality we don't as the child could still\n\t\t\t\t\t\t// be dirtied see #3883\n\t\t\t\t\t\tc.props = newProps;\n\t\t\t\t\t\tc.state = c._nextState;\n\t\t\t\t\t\tc._dirty = false;\n\t\t\t\t\t}\n\n\t\t\t\t\t// In cases of bailing due to strict-equality we have to reset force as well\n\t\t\t\t\tc._force = false;\n\t\t\t\t\tnewVNode._dom = oldVNode._dom;\n\t\t\t\t\tnewVNode._children = oldVNode._children;\n\t\t\t\t\tnewVNode._children.forEach(vnode => {\n\t\t\t\t\t\tif (vnode) vnode._parent = newVNode;\n\t\t\t\t\t});\n\n\t\t\t\t\tfor (let i = 0; i < c._stateCallbacks.length; i++) {\n\t\t\t\t\t\tc._renderCallbacks.push(c._stateCallbacks[i]);\n\t\t\t\t\t}\n\t\t\t\t\tc._stateCallbacks = [];\n\n\t\t\t\t\tif (c._renderCallbacks.length) {\n\t\t\t\t\t\tcommitQueue.push(c);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\n\t\t\t\tif (c.componentWillUpdate != null) {\n\t\t\t\t\tc.componentWillUpdate(newProps, c._nextState, componentContext);\n\t\t\t\t}\n\n\t\t\t\tif (c.componentDidUpdate != null) {\n\t\t\t\t\tc._renderCallbacks.push(() => {\n\t\t\t\t\t\tc.componentDidUpdate(oldProps, oldState, snapshot);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tc.context = componentContext;\n\t\t\tc.props = newProps;\n\t\t\tc._parentDom = parentDom;\n\n\t\t\tlet renderHook = options._render,\n\t\t\t\tcount = 0;\n\t\t\tif ('prototype' in newType && newType.prototype.render) {\n\t\t\t\tc.state = c._nextState;\n\t\t\t\tc._dirty = false;\n\n\t\t\t\tif (renderHook) renderHook(newVNode);\n\n\t\t\t\ttmp = c.render(c.props, c.state, c.context);\n\n\t\t\t\tfor (let i = 0; i < c._stateCallbacks.length; i++) {\n\t\t\t\t\tc._renderCallbacks.push(c._stateCallbacks[i]);\n\t\t\t\t}\n\t\t\t\tc._stateCallbacks = [];\n\t\t\t} else {\n\t\t\t\tdo {\n\t\t\t\t\tc._dirty = false;\n\t\t\t\t\tif (renderHook) renderHook(newVNode);\n\n\t\t\t\t\ttmp = c.render(c.props, c.state, c.context);\n\n\t\t\t\t\t// Handle setState called in render, see #2553\n\t\t\t\t\tc.state = c._nextState;\n\t\t\t\t} while (c._dirty && ++count < 25);\n\t\t\t}\n\n\t\t\t// Handle setState called in render, see #2553\n\t\t\tc.state = c._nextState;\n\n\t\t\tif (c.getChildContext != null) {\n\t\t\t\tglobalContext = assign(assign({}, globalContext), c.getChildContext());\n\t\t\t}\n\n\t\t\tif (!isNew && c.getSnapshotBeforeUpdate != null) {\n\t\t\t\tsnapshot = c.getSnapshotBeforeUpdate(oldProps, oldState);\n\t\t\t}\n\n\t\t\tlet isTopLevelFragment =\n\t\t\t\ttmp != null && tmp.type === Fragment && tmp.key == null;\n\t\t\tlet renderResult = isTopLevelFragment ? tmp.props.children : tmp;\n\n\t\t\tdiffChildren(\n\t\t\t\tparentDom,\n\t\t\t\tisArray(renderResult) ? renderResult : [renderResult],\n\t\t\t\tnewVNode,\n\t\t\t\toldVNode,\n\t\t\t\tglobalContext,\n\t\t\t\tisSvg,\n\t\t\t\texcessDomChildren,\n\t\t\t\tcommitQueue,\n\t\t\t\toldDom,\n\t\t\t\tisHydrating\n\t\t\t);\n\n\t\t\tc.base = newVNode._dom;\n\n\t\t\t// We successfully rendered this VNode, unset any stored hydration/bailout state:\n\t\t\tnewVNode._hydrating = null;\n\n\t\t\tif (c._renderCallbacks.length) {\n\t\t\t\tcommitQueue.push(c);\n\t\t\t}\n\n\t\t\tif (clearProcessingException) {\n\t\t\t\tc._pendingError = c._processingException = null;\n\t\t\t}\n\n\t\t\tc._force = false;\n\t\t} else if (\n\t\t\texcessDomChildren == null &&\n\t\t\tnewVNode._original === oldVNode._original\n\t\t) {\n\t\t\tnewVNode._children = oldVNode._children;\n\t\t\tnewVNode._dom = oldVNode._dom;\n\t\t} else {\n\t\t\tnewVNode._dom = diffElementNodes(\n\t\t\t\toldVNode._dom,\n\t\t\t\tnewVNode,\n\t\t\t\toldVNode,\n\t\t\t\tglobalContext,\n\t\t\t\tisSvg,\n\t\t\t\texcessDomChildren,\n\t\t\t\tcommitQueue,\n\t\t\t\tisHydrating\n\t\t\t);\n\t\t}\n\n\t\tif ((tmp = options.diffed)) tmp(newVNode);\n\t} catch (e) {\n\t\tnewVNode._original = null;\n\t\t// if hydrating or creating initial tree, bailout preserves DOM:\n\t\tif (isHydrating || excessDomChildren != null) {\n\t\t\tnewVNode._dom = oldDom;\n\t\t\tnewVNode._hydrating = !!isHydrating;\n\t\t\texcessDomChildren[excessDomChildren.indexOf(oldDom)] = null;\n\t\t\t// ^ could possibly be simplified to:\n\t\t\t// excessDomChildren.length = 0;\n\t\t}\n\t\toptions._catchError(e, newVNode, oldVNode);\n\t}\n}\n\n/**\n * @param {Array<import('../internal').Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {import('../internal').VNode} root\n */\nexport function commitRoot(commitQueue, root) {\n\tif (options._commit) options._commit(root, commitQueue);\n\n\tcommitQueue.some(c => {\n\t\ttry {\n\t\t\t// @ts-ignore Reuse the commitQueue variable here so the type changes\n\t\t\tcommitQueue = c._renderCallbacks;\n\t\t\tc._renderCallbacks = [];\n\t\t\tcommitQueue.some(cb => {\n\t\t\t\t// @ts-ignore See above ts-ignore on commitQueue\n\t\t\t\tcb.call(c);\n\t\t\t});\n\t\t} catch (e) {\n\t\t\toptions._catchError(e, c._vnode);\n\t\t}\n\t});\n}\n\n/**\n * Diff two virtual nodes representing DOM element\n * @param {import('../internal').PreactElement} dom The DOM element representing\n * the virtual nodes being diffed\n * @param {import('../internal').VNode} newVNode The new virtual node\n * @param {import('../internal').VNode} oldVNode The old virtual node\n * @param {object} globalContext The current context object\n * @param {boolean} isSvg Whether or not this DOM node is an SVG node\n * @param {*} excessDomChildren\n * @param {Array<import('../internal').Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {boolean} isHydrating Whether or not we are in hydration\n * @returns {import('../internal').PreactElement}\n */\nfunction diffElementNodes(\n\tdom,\n\tnewVNode,\n\toldVNode,\n\tglobalContext,\n\tisSvg,\n\texcessDomChildren,\n\tcommitQueue,\n\tisHydrating\n) {\n\tlet oldProps = oldVNode.props;\n\tlet newProps = newVNode.props;\n\tlet nodeType = newVNode.type;\n\tlet i = 0;\n\n\t// Tracks entering and exiting SVG namespace when descending through the tree.\n\tif (nodeType === 'svg') isSvg = true;\n\n\tif (excessDomChildren != null) {\n\t\tfor (; i < excessDomChildren.length; i++) {\n\t\t\tconst child = excessDomChildren[i];\n\n\t\t\t// if newVNode matches an element in excessDomChildren or the `dom`\n\t\t\t// argument matches an element in excessDomChildren, remove it from\n\t\t\t// excessDomChildren so it isn't later removed in diffChildren\n\t\t\tif (\n\t\t\t\tchild &&\n\t\t\t\t'setAttribute' in child === !!nodeType &&\n\t\t\t\t(nodeType ? child.localName === nodeType : child.nodeType === 3)\n\t\t\t) {\n\t\t\t\tdom = child;\n\t\t\t\texcessDomChildren[i] = null;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (dom == null) {\n\t\tif (nodeType === null) {\n\t\t\t// @ts-ignore createTextNode returns Text, we expect PreactElement\n\t\t\treturn document.createTextNode(newProps);\n\t\t}\n\n\t\tif (isSvg) {\n\t\t\tdom = document.createElementNS(\n\t\t\t\t'http://www.w3.org/2000/svg',\n\t\t\t\t// @ts-ignore We know `newVNode.type` is a string\n\t\t\t\tnodeType\n\t\t\t);\n\t\t} else {\n\t\t\tdom = document.createElement(\n\t\t\t\t// @ts-ignore We know `newVNode.type` is a string\n\t\t\t\tnodeType,\n\t\t\t\tnewProps.is && newProps\n\t\t\t);\n\t\t}\n\n\t\t// we created a new parent, so none of the previously attached children can be reused:\n\t\texcessDomChildren = null;\n\t\t// we are creating a new node, so we can assume this is a new subtree (in case we are hydrating), this deopts the hydrate\n\t\tisHydrating = false;\n\t}\n\n\tif (nodeType === null) {\n\t\t// During hydration, we still have to split merged text from SSR'd HTML.\n\t\tif (oldProps !== newProps && (!isHydrating || dom.data !== newProps)) {\n\t\t\tdom.data = newProps;\n\t\t}\n\t} else {\n\t\t// If excessDomChildren was not null, repopulate it with the current element's children:\n\t\texcessDomChildren = excessDomChildren && slice.call(dom.childNodes);\n\n\t\toldProps = oldVNode.props || EMPTY_OBJ;\n\n\t\tlet oldHtml = oldProps.dangerouslySetInnerHTML;\n\t\tlet newHtml = newProps.dangerouslySetInnerHTML;\n\n\t\t// During hydration, props are not diffed at all (including dangerouslySetInnerHTML)\n\t\t// @TODO we should warn in debug mode when props don't match here.\n\t\tif (!isHydrating) {\n\t\t\t// But, if we are in a situation where we are using existing DOM (e.g. replaceNode)\n\t\t\t// we should read the existing DOM attributes to diff them\n\t\t\tif (excessDomChildren != null) {\n\t\t\t\toldProps = {};\n\t\t\t\tfor (i = 0; i < dom.attributes.length; i++) {\n\t\t\t\t\toldProps[dom.attributes[i].name] = dom.attributes[i].value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (newHtml || oldHtml) {\n\t\t\t\t// Avoid re-applying the same '__html' if it did not changed between re-render\n\t\t\t\tif (\n\t\t\t\t\t!newHtml ||\n\t\t\t\t\t((!oldHtml || newHtml.__html != oldHtml.__html) &&\n\t\t\t\t\t\tnewHtml.__html !== dom.innerHTML)\n\t\t\t\t) {\n\t\t\t\t\tdom.innerHTML = (newHtml && newHtml.__html) || '';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tdiffProps(dom, newProps, oldProps, isSvg, isHydrating);\n\n\t\t// If the new vnode didn't have dangerouslySetInnerHTML, diff its children\n\t\tif (newHtml) {\n\t\t\tnewVNode._children = [];\n\t\t} else {\n\t\t\ti = newVNode.props.children;\n\t\t\tdiffChildren(\n\t\t\t\tdom,\n\t\t\t\tisArray(i) ? i : [i],\n\t\t\t\tnewVNode,\n\t\t\t\toldVNode,\n\t\t\t\tglobalContext,\n\t\t\t\tisSvg && nodeType !== 'foreignObject',\n\t\t\t\texcessDomChildren,\n\t\t\t\tcommitQueue,\n\t\t\t\texcessDomChildren\n\t\t\t\t\t? excessDomChildren[0]\n\t\t\t\t\t: oldVNode._children && getDomSibling(oldVNode, 0),\n\t\t\t\tisHydrating\n\t\t\t);\n\n\t\t\t// Remove children that are not part of any vnode.\n\t\t\tif (excessDomChildren != null) {\n\t\t\t\tfor (i = excessDomChildren.length; i--; ) {\n\t\t\t\t\tif (excessDomChildren[i] != null) removeNode(excessDomChildren[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// (as above, don't diff props during hydration)\n\t\tif (!isHydrating) {\n\t\t\tif (\n\t\t\t\t'value' in newProps &&\n\t\t\t\t(i = newProps.value) !== undefined &&\n\t\t\t\t// #2756 For the <progress>-element the initial value is 0,\n\t\t\t\t// despite the attribute not being present. When the attribute\n\t\t\t\t// is missing the progress bar is treated as indeterminate.\n\t\t\t\t// To fix that we'll always update it when it is 0 for progress elements\n\t\t\t\t(i !== dom.value ||\n\t\t\t\t\t(nodeType === 'progress' && !i) ||\n\t\t\t\t\t// This is only for IE 11 to fix <select> value not being updated.\n\t\t\t\t\t// To avoid a stale select value we need to set the option.value\n\t\t\t\t\t// again, which triggers IE11 to re-evaluate the select value\n\t\t\t\t\t(nodeType === 'option' && i !== oldProps.value))\n\t\t\t) {\n\t\t\t\tsetProperty(dom, 'value', i, oldProps.value, false);\n\t\t\t}\n\t\t\tif (\n\t\t\t\t'checked' in newProps &&\n\t\t\t\t(i = newProps.checked) !== undefined &&\n\t\t\t\ti !== dom.checked\n\t\t\t) {\n\t\t\t\tsetProperty(dom, 'checked', i, oldProps.checked, false);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn dom;\n}\n\n/**\n * Invoke or update a ref, depending on whether it is a function or object ref.\n * @param {object|function} ref\n * @param {any} value\n * @param {import('../internal').VNode} vnode\n */\nexport function applyRef(ref, value, vnode) {\n\ttry {\n\t\tif (typeof ref == 'function') ref(value);\n\t\telse ref.current = value;\n\t} catch (e) {\n\t\toptions._catchError(e, vnode);\n\t}\n}\n\n/**\n * Unmount a virtual node from the tree and apply DOM changes\n * @param {import('../internal').VNode} vnode The virtual node to unmount\n * @param {import('../internal').VNode} parentVNode The parent of the VNode that\n * initiated the unmount\n * @param {boolean} [skipRemove] Flag that indicates that a parent node of the\n * current element is already detached from the DOM.\n */\nexport function unmount(vnode, parentVNode, skipRemove) {\n\tlet r;\n\tif (options.unmount) options.unmount(vnode);\n\n\tif ((r = vnode.ref)) {\n\t\tif (!r.current || r.current === vnode._dom) {\n\t\t\tapplyRef(r, null, parentVNode);\n\t\t}\n\t}\n\n\tif ((r = vnode._component) != null) {\n\t\tif (r.componentWillUnmount) {\n\t\t\ttry {\n\t\t\t\tr.componentWillUnmount();\n\t\t\t} catch (e) {\n\t\t\t\toptions._catchError(e, parentVNode);\n\t\t\t}\n\t\t}\n\n\t\tr.base = r._parentDom = null;\n\t\tvnode._component = undefined;\n\t}\n\n\tif ((r = vnode._children)) {\n\t\tfor (let i = 0; i < r.length; i++) {\n\t\t\tif (r[i]) {\n\t\t\t\tunmount(\n\t\t\t\t\tr[i],\n\t\t\t\t\tparentVNode,\n\t\t\t\t\tskipRemove || typeof vnode.type !== 'function'\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!skipRemove && vnode._dom != null) {\n\t\tremoveNode(vnode._dom);\n\t}\n\n\t// Must be set to `undefined` to properly clean up `_nextDom`\n\t// for which `null` is a valid value. See comment in `create-element.js`\n\tvnode._parent = vnode._dom = vnode._nextDom = undefined;\n}\n\n/** The `.render()` method for a PFC backing instance. */\nfunction doRender(props, state, context) {\n\treturn this.constructor(props, context);\n}\n", "import { EMPTY_OBJ } from './constants';\nimport { commitRoot, diff } from './diff/index';\nimport { createElement, Fragment } from './create-element';\nimport options from './options';\nimport { slice } from './util';\n\n/**\n * Render a Preact virtual node into a DOM element\n * @param {import('./internal').ComponentChild} vnode The virtual node to render\n * @param {import('./internal').PreactElement} parentDom The DOM element to\n * render into\n * @param {import('./internal').PreactElement | object} [replaceNode] Optional: Attempt to re-use an\n * existing DOM tree rooted at `replaceNode`\n */\nexport function render(vnode, parentDom, replaceNode) {\n\tif (options._root) options._root(vnode, parentDom);\n\n\t// We abuse the `replaceNode` parameter in `hydrate()` to signal if we are in\n\t// hydration mode or not by passing the `hydrate` function instead of a DOM\n\t// element..\n\tlet isHydrating = typeof replaceNode === 'function';\n\n\t// To be able to support calling `render()` multiple times on the same\n\t// DOM node, we need to obtain a reference to the previous tree. We do\n\t// this by assigning a new `_children` property to DOM nodes which points\n\t// to the last rendered tree. By default this property is not present, which\n\t// means that we are mounting a new tree for the first time.\n\tlet oldVNode = isHydrating\n\t\t? null\n\t\t: (replaceNode && replaceNode._children) || parentDom._children;\n\n\tvnode = ((!isHydrating && replaceNode) || parentDom)._children =\n\t\tcreateElement(Fragment, null, [vnode]);\n\n\t// List of effects that need to be called after diffing.\n\tlet commitQueue = [];\n\tdiff(\n\t\tparentDom,\n\t\t// Determine the new vnode tree and store it on the DOM element on\n\t\t// our custom `_children` property.\n\t\tvnode,\n\t\toldVNode || EMPTY_OBJ,\n\t\tEMPTY_OBJ,\n\t\tparentDom.ownerSVGElement !== undefined,\n\t\t!isHydrating && replaceNode\n\t\t\t? [replaceNode]\n\t\t\t: oldVNode\n\t\t\t? null\n\t\t\t: parentDom.firstChild\n\t\t\t? slice.call(parentDom.childNodes)\n\t\t\t: null,\n\t\tcommitQueue,\n\t\t!isHydrating && replaceNode\n\t\t\t? replaceNode\n\t\t\t: oldVNode\n\t\t\t? oldVNode._dom\n\t\t\t: parentDom.firstChild,\n\t\tisHydrating\n\t);\n\n\t// Flush all queued effects\n\tcommitRoot(commitQueue, vnode);\n}\n\n/**\n * Update an existing DOM element with data from a Preact virtual node\n * @param {import('./internal').ComponentChild} vnode The virtual node to render\n * @param {import('./internal').PreactElement} parentDom The DOM element to\n * update\n */\nexport function hydrate(vnode, parentDom) {\n\trender(vnode, parentDom, hydrate);\n}\n", "import { assign, slice } from './util';\nimport { createVNode } from './create-element';\n\n/**\n * Clones the given VNode, optionally adding attributes/props and replacing its children.\n * @param {import('./internal').VNode} vnode The virtual DOM element to clone\n * @param {object} props Attributes/props to add when cloning\n * @param {Array<import('./internal').ComponentChildren>} rest Any additional arguments will be used as replacement children.\n * @returns {import('./internal').VNode}\n */\nexport function cloneElement(vnode, props, children) {\n\tlet normalizedProps = assign({}, vnode.props),\n\t\tkey,\n\t\tref,\n\t\ti;\n\n\tlet defaultProps;\n\n\tif (vnode.type && vnode.type.defaultProps) {\n\t\tdefaultProps = vnode.type.defaultProps;\n\t}\n\n\tfor (i in props) {\n\t\tif (i == 'key') key = props[i];\n\t\telse if (i == 'ref') ref = props[i];\n\t\telse if (props[i] === undefined && defaultProps !== undefined) {\n\t\t\tnormalizedProps[i] = defaultProps[i];\n\t\t} else {\n\t\t\tnormalizedProps[i] = props[i];\n\t\t}\n\t}\n\n\tif (arguments.length > 2) {\n\t\tnormalizedProps.children =\n\t\t\targuments.length > 3 ? slice.call(arguments, 2) : children;\n\t}\n\n\treturn createVNode(\n\t\tvnode.type,\n\t\tnormalizedProps,\n\t\tkey || vnode.key,\n\t\tref || vnode.ref,\n\t\tnull\n\t);\n}\n", "/**\n * Find the closest error boundary to a thrown error and call it\n * @param {object} error The thrown value\n * @param {import('../internal').VNode} vnode The vnode that threw\n * the error that was caught (except for unmounting when this parameter\n * is the highest parent that was being unmounted)\n * @param {import('../internal').VNode} [oldVNode]\n * @param {import('../internal').ErrorInfo} [errorInfo]\n */\nexport function _catchError(error, vnode, oldVNode, errorInfo) {\n\t/** @type {import('../internal').Component} */\n\tlet component, ctor, handled;\n\n\tfor (; (vnode = vnode._parent); ) {\n\t\tif ((component = vnode._component) && !component._processingException) {\n\t\t\ttry {\n\t\t\t\tctor = component.constructor;\n\n\t\t\t\tif (ctor && ctor.getDerivedStateFromError != null) {\n\t\t\t\t\tcomponent.setState(ctor.getDerivedStateFromError(error));\n\t\t\t\t\thandled = component._dirty;\n\t\t\t\t}\n\n\t\t\t\tif (component.componentDidCatch != null) {\n\t\t\t\t\tcomponent.componentDidCatch(error, errorInfo || {});\n\t\t\t\t\thandled = component._dirty;\n\t\t\t\t}\n\n\t\t\t\t// This is an error boundary. Mark it as having bailed out, and whether it was mid-hydration.\n\t\t\t\tif (handled) {\n\t\t\t\t\treturn (component._pendingError = component);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\terror = e;\n\t\t\t}\n\t\t}\n\t}\n\n\tthrow error;\n}\n", "import { options } from 'preact';\n\n/** @type {number} */\nlet currentIndex;\n\n/** @type {import('./internal').Component} */\nlet currentComponent;\n\n/** @type {import('./internal').Component} */\nlet previousComponent;\n\n/** @type {number} */\nlet currentHook = 0;\n\n/** @type {Array<import('./internal').Component>} */\nlet afterPaintEffects = [];\n\nlet EMPTY = [];\n\nlet oldBeforeDiff = options._diff;\nlet oldBeforeRender = options._render;\nlet oldAfterDiff = options.diffed;\nlet oldCommit = options._commit;\nlet oldBeforeUnmount = options.unmount;\n\nconst RAF_TIMEOUT = 100;\nlet prevRaf;\n\noptions._diff = vnode => {\n\tcurrentComponent = null;\n\tif (oldBeforeDiff) oldBeforeDiff(vnode);\n};\n\noptions._render = vnode => {\n\tif (oldBeforeRender) oldBeforeRender(vnode);\n\n\tcurrentComponent = vnode._component;\n\tcurrentIndex = 0;\n\n\tconst hooks = currentComponent.__hooks;\n\tif (hooks) {\n\t\tif (previousComponent === currentComponent) {\n\t\t\thooks._pendingEffects = [];\n\t\t\tcurrentComponent._renderCallbacks = [];\n\t\t\thooks._list.forEach(hookItem => {\n\t\t\t\tif (hookItem._nextValue) {\n\t\t\t\t\thookItem._value = hookItem._nextValue;\n\t\t\t\t}\n\t\t\t\thookItem._pendingValue = EMPTY;\n\t\t\t\thookItem._nextValue = hookItem._pendingArgs = undefined;\n\t\t\t});\n\t\t} else {\n\t\t\thooks._pendingEffects.forEach(invokeCleanup);\n\t\t\thooks._pendingEffects.forEach(invokeEffect);\n\t\t\thooks._pendingEffects = [];\n\t\t\tcurrentIndex = 0;\n\t\t}\n\t}\n\tpreviousComponent = currentComponent;\n};\n\noptions.diffed = vnode => {\n\tif (oldAfterDiff) oldAfterDiff(vnode);\n\n\tconst c = vnode._component;\n\tif (c && c.__hooks) {\n\t\tif (c.__hooks._pendingEffects.length) afterPaint(afterPaintEffects.push(c));\n\t\tc.__hooks._list.forEach(hookItem => {\n\t\t\tif (hookItem._pendingArgs) {\n\t\t\t\thookItem._args = hookItem._pendingArgs;\n\t\t\t}\n\t\t\tif (hookItem._pendingValue !== EMPTY) {\n\t\t\t\thookItem._value = hookItem._pendingValue;\n\t\t\t}\n\t\t\thookItem._pendingArgs = undefined;\n\t\t\thookItem._pendingValue = EMPTY;\n\t\t});\n\t}\n\tpreviousComponent = currentComponent = null;\n};\n\noptions._commit = (vnode, commitQueue) => {\n\tcommitQueue.some(component => {\n\t\ttry {\n\t\t\tcomponent._renderCallbacks.forEach(invokeCleanup);\n\t\t\tcomponent._renderCallbacks = component._renderCallbacks.filter(cb =>\n\t\t\t\tcb._value ? invokeEffect(cb) : true\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tcommitQueue.some(c => {\n\t\t\t\tif (c._renderCallbacks) c._renderCallbacks = [];\n\t\t\t});\n\t\t\tcommitQueue = [];\n\t\t\toptions._catchError(e, component._vnode);\n\t\t}\n\t});\n\n\tif (oldCommit) oldCommit(vnode, commitQueue);\n};\n\noptions.unmount = vnode => {\n\tif (oldBeforeUnmount) oldBeforeUnmount(vnode);\n\n\tconst c = vnode._component;\n\tif (c && c.__hooks) {\n\t\tlet hasErrored;\n\t\tc.__hooks._list.forEach(s => {\n\t\t\ttry {\n\t\t\t\tinvokeCleanup(s);\n\t\t\t} catch (e) {\n\t\t\t\thasErrored = e;\n\t\t\t}\n\t\t});\n\t\tc.__hooks = undefined;\n\t\tif (hasErrored) options._catchError(hasErrored, c._vnode);\n\t}\n};\n\n/**\n * Get a hook's state from the currentComponent\n * @param {number} index The index of the hook to get\n * @param {number} type The index of the hook to get\n * @returns {any}\n */\nfunction getHookState(index, type) {\n\tif (options._hook) {\n\t\toptions._hook(currentComponent, index, currentHook || type);\n\t}\n\tcurrentHook = 0;\n\n\t// Largely inspired by:\n\t// * https://github.com/michael-klein/funcy.js/blob/f6be73468e6ec46b0ff5aa3cc4c9baf72a29025a/src/hooks/core_hooks.mjs\n\t// * https://github.com/michael-klein/funcy.js/blob/650beaa58c43c33a74820a3c98b3c7079cf2e333/src/renderer.mjs\n\t// Other implementations to look at:\n\t// * https://codesandbox.io/s/mnox05qp8\n\tconst hooks =\n\t\tcurrentComponent.__hooks ||\n\t\t(currentComponent.__hooks = {\n\t\t\t_list: [],\n\t\t\t_pendingEffects: []\n\t\t});\n\n\tif (index >= hooks._list.length) {\n\t\thooks._list.push({ _pendingValue: EMPTY });\n\t}\n\treturn hooks._list[index];\n}\n\n/**\n * @param {import('./index').StateUpdater<any>} [initialState]\n */\nexport function useState(initialState) {\n\tcurrentHook = 1;\n\treturn useReducer(invokeOrReturn, initialState);\n}\n\n/**\n * @param {import('./index').Reducer<any, any>} reducer\n * @param {import('./index').StateUpdater<any>} initialState\n * @param {(initialState: any) => void} [init]\n * @returns {[ any, (state: any) => void ]}\n */\nexport function useReducer(reducer, initialState, init) {\n\t/** @type {import('./internal').ReducerHookState} */\n\tconst hookState = getHookState(currentIndex++, 2);\n\thookState._reducer = reducer;\n\tif (!hookState._component) {\n\t\thookState._value = [\n\t\t\t!init ? invokeOrReturn(undefined, initialState) : init(initialState),\n\n\t\t\taction => {\n\t\t\t\tconst currentValue = hookState._nextValue\n\t\t\t\t\t? hookState._nextValue[0]\n\t\t\t\t\t: hookState._value[0];\n\t\t\t\tconst nextValue = hookState._reducer(currentValue, action);\n\n\t\t\t\tif (currentValue !== nextValue) {\n\t\t\t\t\thookState._nextValue = [nextValue, hookState._value[1]];\n\t\t\t\t\thookState._component.setState({});\n\t\t\t\t}\n\t\t\t}\n\t\t];\n\n\t\thookState._component = currentComponent;\n\n\t\tif (!currentComponent._hasScuFromHooks) {\n\t\t\tcurrentComponent._hasScuFromHooks = true;\n\t\t\tlet prevScu = currentComponent.shouldComponentUpdate;\n\t\t\tconst prevCWU = currentComponent.componentWillUpdate;\n\n\t\t\t// If we're dealing with a forced update `shouldComponentUpdate` will\n\t\t\t// not be called. But we use that to update the hook values, so we\n\t\t\t// need to call it.\n\t\t\tcurrentComponent.componentWillUpdate = function (p, s, c) {\n\t\t\t\tif (this._force) {\n\t\t\t\t\tlet tmp = prevScu;\n\t\t\t\t\t// Clear to avoid other sCU hooks from being called\n\t\t\t\t\tprevScu = undefined;\n\t\t\t\t\tupdateHookState(p, s, c);\n\t\t\t\t\tprevScu = tmp;\n\t\t\t\t}\n\n\t\t\t\tif (prevCWU) prevCWU.call(this, p, s, c);\n\t\t\t};\n\n\t\t\t// This SCU has the purpose of bailing out after repeated updates\n\t\t\t// to stateful hooks.\n\t\t\t// we store the next value in _nextValue[0] and keep doing that for all\n\t\t\t// state setters, if we have next states and\n\t\t\t// all next states within a component end up being equal to their original state\n\t\t\t// we are safe to bail out for this specific component.\n\t\t\t/**\n\t\t\t *\n\t\t\t * @type {import('./internal').Component[\"shouldComponentUpdate\"]}\n\t\t\t */\n\t\t\t// @ts-ignore - We don't use TS to downtranspile\n\t\t\t// eslint-disable-next-line no-inner-declarations\n\t\t\tfunction updateHookState(p, s, c) {\n\t\t\t\tif (!hookState._component.__hooks) return true;\n\n\t\t\t\tconst stateHooks = hookState._component.__hooks._list.filter(\n\t\t\t\t\tx => x._component\n\t\t\t\t);\n\t\t\t\tconst allHooksEmpty = stateHooks.every(x => !x._nextValue);\n\t\t\t\t// When we have no updated hooks in the component we invoke the previous SCU or\n\t\t\t\t// traverse the VDOM tree further.\n\t\t\t\tif (allHooksEmpty) {\n\t\t\t\t\treturn prevScu ? prevScu.call(this, p, s, c) : true;\n\t\t\t\t}\n\n\t\t\t\t// We check whether we have components with a nextValue set that\n\t\t\t\t// have values that aren't equal to one another this pushes\n\t\t\t\t// us to update further down the tree\n\t\t\t\tlet shouldUpdate = false;\n\t\t\t\tstateHooks.forEach(hookItem => {\n\t\t\t\t\tif (hookItem._nextValue) {\n\t\t\t\t\t\tconst currentValue = hookItem._value[0];\n\t\t\t\t\t\thookItem._value = hookItem._nextValue;\n\t\t\t\t\t\thookItem._nextValue = undefined;\n\t\t\t\t\t\tif (currentValue !== hookItem._value[0]) shouldUpdate = true;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn shouldUpdate || hookState._component.props !== p\n\t\t\t\t\t? prevScu\n\t\t\t\t\t\t? prevScu.call(this, p, s, c)\n\t\t\t\t\t\t: true\n\t\t\t\t\t: false;\n\t\t\t}\n\n\t\t\tcurrentComponent.shouldComponentUpdate = updateHookState;\n\t\t}\n\t}\n\n\treturn hookState._nextValue || hookState._value;\n}\n\n/**\n * @param {import('./internal').Effect} callback\n * @param {any[]} args\n */\nexport function useEffect(callback, args) {\n\t/** @type {import('./internal').EffectHookState} */\n\tconst state = getHookState(currentIndex++, 3);\n\tif (!options._skipEffects && argsChanged(state._args, args)) {\n\t\tstate._value = callback;\n\t\tstate._pendingArgs = args;\n\n\t\tcurrentComponent.__hooks._pendingEffects.push(state);\n\t}\n}\n\n/**\n * @param {import('./internal').Effect} callback\n * @param {any[]} args\n */\nexport function useLayoutEffect(callback, args) {\n\t/** @type {import('./internal').EffectHookState} */\n\tconst state = getHookState(currentIndex++, 4);\n\tif (!options._skipEffects && argsChanged(state._args, args)) {\n\t\tstate._value = callback;\n\t\tstate._pendingArgs = args;\n\n\t\tcurrentComponent._renderCallbacks.push(state);\n\t}\n}\n\nexport function useRef(initialValue) {\n\tcurrentHook = 5;\n\treturn useMemo(() => ({ current: initialValue }), []);\n}\n\n/**\n * @param {object} ref\n * @param {() => object} createHandle\n * @param {any[]} args\n */\nexport function useImperativeHandle(ref, createHandle, args) {\n\tcurrentHook = 6;\n\tuseLayoutEffect(\n\t\t() => {\n\t\t\tif (typeof ref == 'function') {\n\t\t\t\tref(createHandle());\n\t\t\t\treturn () => ref(null);\n\t\t\t} else if (ref) {\n\t\t\t\tref.current = createHandle();\n\t\t\t\treturn () => (ref.current = null);\n\t\t\t}\n\t\t},\n\t\targs == null ? args : args.concat(ref)\n\t);\n}\n\n/**\n * @param {() => any} factory\n * @param {any[]} args\n */\nexport function useMemo(factory, args) {\n\t/** @type {import('./internal').MemoHookState} */\n\tconst state = getHookState(currentIndex++, 7);\n\tif (argsChanged(state._args, args)) {\n\t\tstate._pendingValue = factory();\n\t\tstate._pendingArgs = args;\n\t\tstate._factory = factory;\n\t\treturn state._pendingValue;\n\t}\n\n\treturn state._value;\n}\n\n/**\n * @param {() => void} callback\n * @param {any[]} args\n */\nexport function useCallback(callback, args) {\n\tcurrentHook = 8;\n\treturn useMemo(() => callback, args);\n}\n\n/**\n * @param {import('./internal').PreactContext} context\n */\nexport function useContext(context) {\n\tconst provider = currentComponent.context[context._id];\n\t// We could skip this call here, but than we'd not call\n\t// `options._hook`. We need to do that in order to make\n\t// the devtools aware of this hook.\n\t/** @type {import('./internal').ContextHookState} */\n\tconst state = getHookState(currentIndex++, 9);\n\t// The devtools needs access to the context object to\n\t// be able to pull of the default value when no provider\n\t// is present in the tree.\n\tstate._context = context;\n\tif (!provider) return context._defaultValue;\n\t// This is probably not safe to convert to \"!\"\n\tif (state._value == null) {\n\t\tstate._value = true;\n\t\tprovider.sub(currentComponent);\n\t}\n\treturn provider.props.value;\n}\n\n/**\n * Display a custom label for a custom hook for the devtools panel\n * @type {<T>(value: T, cb?: (value: T) => string | number) => void}\n */\nexport function useDebugValue(value, formatter) {\n\tif (options.useDebugValue) {\n\t\toptions.useDebugValue(formatter ? formatter(value) : value);\n\t}\n}\n\n/**\n * @param {(error: any, errorInfo: import('preact').ErrorInfo) => void} cb\n */\nexport function useErrorBoundary(cb) {\n\t/** @type {import('./internal').ErrorBoundaryHookState} */\n\tconst state = getHookState(currentIndex++, 10);\n\tconst errState = useState();\n\tstate._value = cb;\n\tif (!currentComponent.componentDidCatch) {\n\t\tcurrentComponent.componentDidCatch = (err, errorInfo) => {\n\t\t\tif (state._value) state._value(err, errorInfo);\n\t\t\terrState[1](err);\n\t\t};\n\t}\n\treturn [\n\t\terrState[0],\n\t\t() => {\n\t\t\terrState[1](undefined);\n\t\t}\n\t];\n}\n\nexport function useId() {\n\tconst state = getHookState(currentIndex++, 11);\n\tif (!state._value) {\n\t\t// Grab either the root node or the nearest async boundary node.\n\t\t/** @type {import('./internal.d').VNode} */\n\t\tlet root = currentComponent._vnode;\n\t\twhile (root !== null && !root._mask && root._parent !== null) {\n\t\t\troot = root._parent;\n\t\t}\n\n\t\tlet mask = root._mask || (root._mask = [0, 0]);\n\t\tstate._value = 'P' + mask[0] + '-' + mask[1]++;\n\t}\n\n\treturn state._value;\n}\n/**\n * After paint effects consumer.\n */\nfunction flushAfterPaintEffects() {\n\tlet component;\n\twhile ((component = afterPaintEffects.shift())) {\n\t\tif (!component._parentDom || !component.__hooks) continue;\n\t\ttry {\n\t\t\tcomponent.__hooks._pendingEffects.forEach(invokeCleanup);\n\t\t\tcomponent.__hooks._pendingEffects.forEach(invokeEffect);\n\t\t\tcomponent.__hooks._pendingEffects = [];\n\t\t} catch (e) {\n\t\t\tcomponent.__hooks._pendingEffects = [];\n\t\t\toptions._catchError(e, component._vnode);\n\t\t}\n\t}\n}\n\nlet HAS_RAF = typeof requestAnimationFrame == 'function';\n\n/**\n * Schedule a callback to be invoked after the browser has a chance to paint a new frame.\n * Do this by combining requestAnimationFrame (rAF) + setTimeout to invoke a callback after\n * the next browser frame.\n *\n * Also, schedule a timeout in parallel to the the rAF to ensure the callback is invoked\n * even if RAF doesn't fire (for example if the browser tab is not visible)\n *\n * @param {() => void} callback\n */\nfunction afterNextFrame(callback) {\n\tconst done = () => {\n\t\tclearTimeout(timeout);\n\t\tif (HAS_RAF) cancelAnimationFrame(raf);\n\t\tsetTimeout(callback);\n\t};\n\tconst timeout = setTimeout(done, RAF_TIMEOUT);\n\n\tlet raf;\n\tif (HAS_RAF) {\n\t\traf = requestAnimationFrame(done);\n\t}\n}\n\n// Note: if someone used options.debounceRendering = requestAnimationFrame,\n// then effects will ALWAYS run on the NEXT frame instead of the current one, incurring a ~16ms delay.\n// Perhaps this is not such a big deal.\n/**\n * Schedule afterPaintEffects flush after the browser paints\n * @param {number} newQueueLength\n */\nfunction afterPaint(newQueueLength) {\n\tif (newQueueLength === 1 || prevRaf !== options.requestAnimationFrame) {\n\t\tprevRaf = options.requestAnimationFrame;\n\t\t(prevRaf || afterNextFrame)(flushAfterPaintEffects);\n\t}\n}\n\n/**\n * @param {import('./internal').EffectHookState} hook\n */\nfunction invokeCleanup(hook) {\n\t// A hook cleanup can introduce a call to render which creates a new root, this will call options.vnode\n\t// and move the currentComponent away.\n\tconst comp = currentComponent;\n\tlet cleanup = hook._cleanup;\n\tif (typeof cleanup == 'function') {\n\t\thook._cleanup = undefined;\n\t\tcleanup();\n\t}\n\n\tcurrentComponent = comp;\n}\n\n/**\n * Invoke a Hook's effect\n * @param {import('./internal').EffectHookState} hook\n */\nfunction invokeEffect(hook) {\n\t// A hook call can introduce a call to render which creates a new root, this will call options.vnode\n\t// and move the currentComponent away.\n\tconst comp = currentComponent;\n\thook._cleanup = hook._value();\n\tcurrentComponent = comp;\n}\n\n/**\n * @param {any[]} oldArgs\n * @param {any[]} newArgs\n */\nfunction argsChanged(oldArgs, newArgs) {\n\treturn (\n\t\t!oldArgs ||\n\t\toldArgs.length !== newArgs.length ||\n\t\tnewArgs.some((arg, index) => arg !== oldArgs[index])\n\t);\n}\n\nfunction invokeOrReturn(arg, f) {\n\treturn typeof f == 'function' ? f(arg) : f;\n}\n", "/**\n * Assign properties from `props` to `obj`\n * @template O, P The obj and props types\n * @param {O} obj The object to copy properties to\n * @param {P} props The object to copy properties from\n * @returns {O & P}\n */\nexport function assign(obj, props) {\n\tfor (let i in props) obj[i] = props[i];\n\treturn /** @type {O & P} */ (obj);\n}\n\n/**\n * Check if two objects have a different shape\n * @param {object} a\n * @param {object} b\n * @returns {boolean}\n */\nexport function shallowDiffers(a, b) {\n\tfor (let i in a) if (i !== '__source' && !(i in b)) return true;\n\tfor (let i in b) if (i !== '__source' && a[i] !== b[i]) return true;\n\treturn false;\n}\n\nexport function removeNode(node) {\n\tlet parentNode = node.parentNode;\n\tif (parentNode) parentNode.removeChild(node);\n}\n\n/**\n * Check if two values are the same value\n * @param {*} x\n * @param {*} y\n * @returns {boolean}\n */\nexport function is(x, y) {\n\treturn (x === y && (x !== 0 || 1 / x === 1 / y)) || (x !== x && y !== y);\n}\n", "import { Component } from 'preact';\nimport { shallowDiffers } from './util';\n\n/**\n * Component class with a predefined `shouldComponentUpdate` implementation\n */\nexport function PureComponent(p) {\n\tthis.props = p;\n}\nPureComponent.prototype = new Component();\n// Some third-party libraries check if this property is present\nPureComponent.prototype.isPureReactComponent = true;\nPureComponent.prototype.shouldComponentUpdate = function (props, state) {\n\treturn shallowDiffers(this.props, props) || shallowDiffers(this.state, state);\n};\n", "import { createElement } from 'preact';\nimport { shallowDiffers } from './util';\n\n/**\n * Memoize a component, so that it only updates when the props actually have\n * changed. This was previously known as `React.pure`.\n * @param {import('./internal').FunctionComponent} c functional component\n * @param {(prev: object, next: object) => boolean} [comparer] Custom equality function\n * @returns {import('./internal').FunctionComponent}\n */\nexport function memo(c, comparer) {\n\tfunction shouldUpdate(nextProps) {\n\t\tlet ref = this.props.ref;\n\t\tlet updateRef = ref == nextProps.ref;\n\t\tif (!updateRef && ref) {\n\t\t\tref.call ? ref(null) : (ref.current = null);\n\t\t}\n\n\t\tif (!comparer) {\n\t\t\treturn shallowDiffers(this.props, nextProps);\n\t\t}\n\n\t\treturn !comparer(this.props, nextProps) || !updateRef;\n\t}\n\n\tfunction Memoed(props) {\n\t\tthis.shouldComponentUpdate = shouldUpdate;\n\t\treturn createElement(c, props);\n\t}\n\tMemoed.displayName = 'Memo(' + (c.displayName || c.name) + ')';\n\tMemoed.prototype.isReactComponent = true;\n\tMemoed._forwarded = true;\n\treturn Memoed;\n}\n", "import { options } from 'preact';\nimport { assign } from './util';\n\nlet oldDiffHook = options._diff;\noptions._diff = vnode => {\n\tif (vnode.type && vnode.type._forwarded && vnode.ref) {\n\t\tvnode.props.ref = vnode.ref;\n\t\tvnode.ref = null;\n\t}\n\tif (oldDiffHook) oldDiffHook(vnode);\n};\n\nexport const REACT_FORWARD_SYMBOL =\n\t(typeof Symbol != 'undefined' &&\n\t\tSymbol.for &&\n\t\tSymbol.for('react.forward_ref')) ||\n\t0xf47;\n\n/**\n * Pass ref down to a child. This is mainly used in libraries with HOCs that\n * wrap components. Using `forwardRef` there is an easy way to get a reference\n * of the wrapped component instead of one of the wrapper itself.\n * @param {import('./index').ForwardFn} fn\n * @returns {import('./internal').FunctionComponent}\n */\nexport function forwardRef(fn) {\n\tfunction Forwarded(props) {\n\t\tlet clone = assign({}, props);\n\t\tdelete clone.ref;\n\t\treturn fn(clone, props.ref || null);\n\t}\n\n\t// mobx-react checks for this being present\n\tForwarded.$$typeof = REACT_FORWARD_SYMBOL;\n\t// mobx-react heavily relies on implementation details.\n\t// It expects an object here with a `render` property,\n\t// and prototype.render will fail. Without this\n\t// mobx-react throws.\n\tForwarded.render = Forwarded;\n\n\tForwarded.prototype.isReactComponent = Forwarded._forwarded = true;\n\tForwarded.displayName = 'ForwardRef(' + (fn.displayName || fn.name) + ')';\n\treturn Forwarded;\n}\n", "import { toChildArray } from 'preact';\n\nconst mapFn = (children, fn) => {\n\tif (children == null) return null;\n\treturn toChildArray(toChildArray(children).map(fn));\n};\n\n// This API is completely unnecessary for Preact, so it's basically passthrough.\nexport const Children = {\n\tmap: mapFn,\n\tforEach: mapFn,\n\tcount(children) {\n\t\treturn children ? toChildArray(children).length : 0;\n\t},\n\tonly(children) {\n\t\tconst normalized = toChildArray(children);\n\t\tif (normalized.length !== 1) throw 'Children.only';\n\t\treturn normalized[0];\n\t},\n\ttoArray: toChildArray\n};\n", "import { Component, createElement, options, Fragment } from 'preact';\nimport { assign } from './util';\n\nconst oldCatchError = options._catchError;\noptions._catchError = function (error, newVNode, oldVNode, errorInfo) {\n\tif (error.then) {\n\t\t/** @type {import('./internal').Component} */\n\t\tlet component;\n\t\tlet vnode = newVNode;\n\n\t\tfor (; (vnode = vnode._parent); ) {\n\t\t\tif ((component = vnode._component) && component._childDidSuspend) {\n\t\t\t\tif (newVNode._dom == null) {\n\t\t\t\t\tnewVNode._dom = oldVNode._dom;\n\t\t\t\t\tnewVNode._children = oldVNode._children;\n\t\t\t\t}\n\t\t\t\t// Don't call oldCatchError if we found a Suspense\n\t\t\t\treturn component._childDidSuspend(error, newVNode);\n\t\t\t}\n\t\t}\n\t}\n\toldCatchError(error, newVNode, oldVNode, errorInfo);\n};\n\nconst oldUnmount = options.unmount;\noptions.unmount = function (vnode) {\n\t/** @type {import('./internal').Component} */\n\tconst component = vnode._component;\n\tif (component && component._onResolve) {\n\t\tcomponent._onResolve();\n\t}\n\n\t// if the component is still hydrating\n\t// most likely it is because the component is suspended\n\t// we set the vnode.type as `null` so that it is not a typeof function\n\t// so the unmount will remove the vnode._dom\n\tif (component && vnode._hydrating === true) {\n\t\tvnode.type = null;\n\t}\n\n\tif (oldUnmount) oldUnmount(vnode);\n};\n\nfunction detachedClone(vnode, detachedParent, parentDom) {\n\tif (vnode) {\n\t\tif (vnode._component && vnode._component.__hooks) {\n\t\t\tvnode._component.__hooks._list.forEach(effect => {\n\t\t\t\tif (typeof effect._cleanup == 'function') effect._cleanup();\n\t\t\t});\n\n\t\t\tvnode._component.__hooks = null;\n\t\t}\n\n\t\tvnode = assign({}, vnode);\n\t\tif (vnode._component != null) {\n\t\t\tif (vnode._component._parentDom === parentDom) {\n\t\t\t\tvnode._component._parentDom = detachedParent;\n\t\t\t}\n\t\t\tvnode._component = null;\n\t\t}\n\n\t\tvnode._children =\n\t\t\tvnode._children &&\n\t\t\tvnode._children.map(child =>\n\t\t\t\tdetachedClone(child, detachedParent, parentDom)\n\t\t\t);\n\t}\n\n\treturn vnode;\n}\n\nfunction removeOriginal(vnode, detachedParent, originalParent) {\n\tif (vnode) {\n\t\tvnode._original = null;\n\t\tvnode._children =\n\t\t\tvnode._children &&\n\t\t\tvnode._children.map(child =>\n\t\t\t\tremoveOriginal(child, detachedParent, originalParent)\n\t\t\t);\n\n\t\tif (vnode._component) {\n\t\t\tif (vnode._component._parentDom === detachedParent) {\n\t\t\t\tif (vnode._dom) {\n\t\t\t\t\toriginalParent.insertBefore(vnode._dom, vnode._nextDom);\n\t\t\t\t}\n\t\t\t\tvnode._component._force = true;\n\t\t\t\tvnode._component._parentDom = originalParent;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn vnode;\n}\n\n// having custom inheritance instead of a class here saves a lot of bytes\nexport function Suspense() {\n\t// we do not call super here to golf some bytes...\n\tthis._pendingSuspensionCount = 0;\n\tthis._suspenders = null;\n\tthis._detachOnNextRender = null;\n}\n\n// Things we do here to save some bytes but are not proper JS inheritance:\n// - call `new Component()` as the prototype\n// - do not set `Suspense.prototype.constructor` to `Suspense`\nSuspense.prototype = new Component();\n\n/**\n * @this {import('./internal').SuspenseComponent}\n * @param {Promise} promise The thrown promise\n * @param {import('./internal').VNode<any, any>} suspendingVNode The suspending component\n */\nSuspense.prototype._childDidSuspend = function (promise, suspendingVNode) {\n\tconst suspendingComponent = suspendingVNode._component;\n\n\t/** @type {import('./internal').SuspenseComponent} */\n\tconst c = this;\n\n\tif (c._suspenders == null) {\n\t\tc._suspenders = [];\n\t}\n\tc._suspenders.push(suspendingComponent);\n\n\tconst resolve = suspended(c._vnode);\n\n\tlet resolved = false;\n\tconst onResolved = () => {\n\t\tif (resolved) return;\n\n\t\tresolved = true;\n\t\tsuspendingComponent._onResolve = null;\n\n\t\tif (resolve) {\n\t\t\tresolve(onSuspensionComplete);\n\t\t} else {\n\t\t\tonSuspensionComplete();\n\t\t}\n\t};\n\n\tsuspendingComponent._onResolve = onResolved;\n\n\tconst onSuspensionComplete = () => {\n\t\tif (!--c._pendingSuspensionCount) {\n\t\t\t// If the suspension was during hydration we don't need to restore the\n\t\t\t// suspended children into the _children array\n\t\t\tif (c.state._suspended) {\n\t\t\t\tconst suspendedVNode = c.state._suspended;\n\t\t\t\tc._vnode._children[0] = removeOriginal(\n\t\t\t\t\tsuspendedVNode,\n\t\t\t\t\tsuspendedVNode._component._parentDom,\n\t\t\t\t\tsuspendedVNode._component._originalParentDom\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tc.setState({ _suspended: (c._detachOnNextRender = null) });\n\n\t\t\tlet suspended;\n\t\t\twhile ((suspended = c._suspenders.pop())) {\n\t\t\t\tsuspended.forceUpdate();\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * We do not set `suspended: true` during hydration because we want the actual markup\n\t * to remain on screen and hydrate it when the suspense actually gets resolved.\n\t * While in non-hydration cases the usual fallback -> component flow would occour.\n\t */\n\tconst wasHydrating = suspendingVNode._hydrating === true;\n\tif (!c._pendingSuspensionCount++ && !wasHydrating) {\n\t\tc.setState({ _suspended: (c._detachOnNextRender = c._vnode._children[0]) });\n\t}\n\tpromise.then(onResolved, onResolved);\n};\n\nSuspense.prototype.componentWillUnmount = function () {\n\tthis._suspenders = [];\n};\n\n/**\n * @this {import('./internal').SuspenseComponent}\n * @param {import('./internal').SuspenseComponent[\"props\"]} props\n * @param {import('./internal').SuspenseState} state\n */\nSuspense.prototype.render = function (props, state) {\n\tif (this._detachOnNextRender) {\n\t\t// When the Suspense's _vnode was created by a call to createVNode\n\t\t// (i.e. due to a setState further up in the tree)\n\t\t// it's _children prop is null, in this case we \"forget\" about the parked vnodes to detach\n\t\tif (this._vnode._children) {\n\t\t\tconst detachedParent = document.createElement('div');\n\t\t\tconst detachedComponent = this._vnode._children[0]._component;\n\t\t\tthis._vnode._children[0] = detachedClone(\n\t\t\t\tthis._detachOnNextRender,\n\t\t\t\tdetachedParent,\n\t\t\t\t(detachedComponent._originalParentDom = detachedComponent._parentDom)\n\t\t\t);\n\t\t}\n\n\t\tthis._detachOnNextRender = null;\n\t}\n\n\t// Wrap fallback tree in a VNode that prevents itself from being marked as aborting mid-hydration:\n\t/** @type {import('./internal').VNode} */\n\tconst fallback =\n\t\tstate._suspended && createElement(Fragment, null, props.fallback);\n\tif (fallback) fallback._hydrating = null;\n\n\treturn [\n\t\tcreateElement(Fragment, null, state._suspended ? null : props.children),\n\t\tfallback\n\t];\n};\n\n/**\n * Checks and calls the parent component's _suspended method, passing in the\n * suspended vnode. This is a way for a parent (e.g. SuspenseList) to get notified\n * that one of its children/descendants suspended.\n *\n * The parent MAY return a callback. The callback will get called when the\n * suspension resolves, notifying the parent of the fact.\n * Moreover, the callback gets function `unsuspend` as a parameter. The resolved\n * child descendant will not actually get unsuspended until `unsuspend` gets called.\n * This is a way for the parent to delay unsuspending.\n *\n * If the parent does not return a callback then the resolved vnode\n * gets unsuspended immediately when it resolves.\n *\n * @param {import('./internal').VNode} vnode\n * @returns {((unsuspend: () => void) => void)?}\n */\nexport function suspended(vnode) {\n\t/** @type {import('./internal').Component} */\n\tlet component = vnode._parent._component;\n\treturn component && component._suspended && component._suspended(vnode);\n}\n\nexport function lazy(loader) {\n\tlet prom;\n\tlet component;\n\tlet error;\n\n\tfunction Lazy(props) {\n\t\tif (!prom) {\n\t\t\tprom = loader();\n\t\t\tprom.then(\n\t\t\t\texports => {\n\t\t\t\t\tcomponent = exports.default || exports;\n\t\t\t\t},\n\t\t\t\te => {\n\t\t\t\t\terror = e;\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t\tif (error) {\n\t\t\tthrow error;\n\t\t}\n\n\t\tif (!component) {\n\t\t\tthrow prom;\n\t\t}\n\n\t\treturn createElement(component, props);\n\t}\n\n\tLazy.displayName = 'Lazy';\n\tLazy._forwarded = true;\n\treturn Lazy;\n}\n", "import { Component, toChildArray } from 'preact';\nimport { suspended } from './suspense.js';\n\n// Indexes to linked list nodes (nodes are stored as arrays to save bytes).\nconst SUSPENDED_COUNT = 0;\nconst RESOLVED_COUNT = 1;\nconst NEXT_NODE = 2;\n\n// Having custom inheritance instead of a class here saves a lot of bytes.\nexport function SuspenseList() {\n\tthis._next = null;\n\tthis._map = null;\n}\n\n// Mark one of child's earlier suspensions as resolved.\n// Some pending callbacks may become callable due to this\n// (e.g. the last suspended descendant gets resolved when\n// revealOrder === 'together'). Process those callbacks as well.\nconst resolve = (list, child, node) => {\n\tif (++node[RESOLVED_COUNT] === node[SUSPENDED_COUNT]) {\n\t\t// The number a child (or any of its descendants) has been suspended\n\t\t// matches the number of times it's been resolved. Therefore we\n\t\t// mark the child as completely resolved by deleting it from ._map.\n\t\t// This is used to figure out when *all* children have been completely\n\t\t// resolved when revealOrder is 'together'.\n\t\tlist._map.delete(child);\n\t}\n\n\t// If revealOrder is falsy then we can do an early exit, as the\n\t// callbacks won't get queued in the node anyway.\n\t// If revealOrder is 'together' then also do an early exit\n\t// if all suspended descendants have not yet been resolved.\n\tif (\n\t\t!list.props.revealOrder ||\n\t\t(list.props.revealOrder[0] === 't' && list._map.size)\n\t) {\n\t\treturn;\n\t}\n\n\t// Walk the currently suspended children in order, calling their\n\t// stored callbacks on the way. Stop if we encounter a child that\n\t// has not been completely resolved yet.\n\tnode = list._next;\n\twhile (node) {\n\t\twhile (node.length > 3) {\n\t\t\tnode.pop()();\n\t\t}\n\t\tif (node[RESOLVED_COUNT] < node[SUSPENDED_COUNT]) {\n\t\t\tbreak;\n\t\t}\n\t\tlist._next = node = node[NEXT_NODE];\n\t}\n};\n\n// Things we do here to save some bytes but are not proper JS inheritance:\n// - call `new Component()` as the prototype\n// - do not set `Suspense.prototype.constructor` to `Suspense`\nSuspenseList.prototype = new Component();\n\nSuspenseList.prototype._suspended = function (child) {\n\tconst list = this;\n\tconst delegated = suspended(list._vnode);\n\n\tlet node = list._map.get(child);\n\tnode[SUSPENDED_COUNT]++;\n\n\treturn unsuspend => {\n\t\tconst wrappedUnsuspend = () => {\n\t\t\tif (!list.props.revealOrder) {\n\t\t\t\t// Special case the undefined (falsy) revealOrder, as there\n\t\t\t\t// is no need to coordinate a specific order or unsuspends.\n\t\t\t\tunsuspend();\n\t\t\t} else {\n\t\t\t\tnode.push(unsuspend);\n\t\t\t\tresolve(list, child, node);\n\t\t\t}\n\t\t};\n\t\tif (delegated) {\n\t\t\tdelegated(wrappedUnsuspend);\n\t\t} else {\n\t\t\twrappedUnsuspend();\n\t\t}\n\t};\n};\n\nSuspenseList.prototype.render = function (props) {\n\tthis._next = null;\n\tthis._map = new Map();\n\n\tconst children = toChildArray(props.children);\n\tif (props.revealOrder && props.revealOrder[0] === 'b') {\n\t\t// If order === 'backwards' (or, well, anything starting with a 'b')\n\t\t// then flip the child list around so that the last child will be\n\t\t// the first in the linked list.\n\t\tchildren.reverse();\n\t}\n\t// Build the linked list. Iterate through the children in reverse order\n\t// so that `_next` points to the first linked list node to be resolved.\n\tfor (let i = children.length; i--; ) {\n\t\t// Create a new linked list node as an array of form:\n\t\t// \t[suspended_count, resolved_count, next_node]\n\t\t// where suspended_count and resolved_count are numeric counters for\n\t\t// keeping track how many times a node has been suspended and resolved.\n\t\t//\n\t\t// Note that suspended_count starts from 1 instead of 0, so we can block\n\t\t// processing callbacks until componentDidMount has been called. In a sense\n\t\t// node is suspended at least until componentDidMount gets called!\n\t\t//\n\t\t// Pending callbacks are added to the end of the node:\n\t\t// \t[suspended_count, resolved_count, next_node, callback_0, callback_1, ...]\n\t\tthis._map.set(children[i], (this._next = [1, 0, this._next]));\n\t}\n\treturn props.children;\n};\n\nSuspenseList.prototype.componentDidUpdate =\n\tSuspenseList.prototype.componentDidMount = function () {\n\t\t// Iterate through all children after mounting for two reasons:\n\t\t// 1. As each node[SUSPENDED_COUNT] starts from 1, this iteration increases\n\t\t//    each node[RELEASED_COUNT] by 1, therefore balancing the counters.\n\t\t//    The nodes can now be completely consumed from the linked list.\n\t\t// 2. Handle nodes that might have gotten resolved between render and\n\t\t//    componentDidMount.\n\t\tthis._map.forEach((node, child) => {\n\t\t\tresolve(this, child, node);\n\t\t});\n\t};\n", "import { createElement, render } from 'preact';\n\n/**\n * @param {import('../../src/index').RenderableProps<{ context: any }>} props\n */\nfunction ContextProvider(props) {\n\tthis.getChildContext = () => props.context;\n\treturn props.children;\n}\n\n/**\n * Portal component\n * @this {import('./internal').Component}\n * @param {object | null | undefined} props\n *\n * TODO: use createRoot() instead of fake root\n */\nfunction Portal(props) {\n\tconst _this = this;\n\tlet container = props._container;\n\n\t_this.componentWillUnmount = function () {\n\t\trender(null, _this._temp);\n\t\t_this._temp = null;\n\t\t_this._container = null;\n\t};\n\n\t// When we change container we should clear our old container and\n\t// indicate a new mount.\n\tif (_this._container && _this._container !== container) {\n\t\t_this.componentWillUnmount();\n\t}\n\n\t// When props.vnode is undefined/false/null we are dealing with some kind of\n\t// conditional vnode. This should not trigger a render.\n\tif (props._vnode) {\n\t\tif (!_this._temp) {\n\t\t\t_this._container = container;\n\n\t\t\t// Create a fake DOM parent node that manages a subset of `container`'s children:\n\t\t\t_this._temp = {\n\t\t\t\tnodeType: 1,\n\t\t\t\tparentNode: container,\n\t\t\t\tchildNodes: [],\n\t\t\t\tappendChild(child) {\n\t\t\t\t\tthis.childNodes.push(child);\n\t\t\t\t\t_this._container.appendChild(child);\n\t\t\t\t},\n\t\t\t\tinsertBefore(child, before) {\n\t\t\t\t\tthis.childNodes.push(child);\n\t\t\t\t\t_this._container.appendChild(child);\n\t\t\t\t},\n\t\t\t\tremoveChild(child) {\n\t\t\t\t\tthis.childNodes.splice(this.childNodes.indexOf(child) >>> 1, 1);\n\t\t\t\t\t_this._container.removeChild(child);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\t// Render our wrapping element into temp.\n\t\trender(\n\t\t\tcreateElement(ContextProvider, { context: _this.context }, props._vnode),\n\t\t\t_this._temp\n\t\t);\n\t}\n\t// When we come from a conditional render, on a mounted\n\t// portal we should clear the DOM.\n\telse if (_this._temp) {\n\t\t_this.componentWillUnmount();\n\t}\n}\n\n/**\n * Create a `Portal` to continue rendering the vnode tree at a different DOM node\n * @param {import('./internal').VNode} vnode The vnode to render\n * @param {import('./internal').PreactElement} container The DOM node to continue rendering in to.\n */\nexport function createPortal(vnode, container) {\n\tconst el = createElement(Portal, { _vnode: vnode, _container: container });\n\tel.containerInfo = container;\n\treturn el;\n}\n", "import {\n\trender as preactRender,\n\thydrate as preactHydrate,\n\toptions,\n\ttoChildArray,\n\tComponent\n} from 'preact';\n\nexport const REACT_ELEMENT_TYPE =\n\t(typeof Symbol != 'undefined' && Symbol.for && Symbol.for('react.element')) ||\n\t0xeac7;\n\nconst CAMEL_PROPS =\n\t/^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|dominant|fill|flood|font|glyph(?!R)|horiz|image(!S)|letter|lighting|marker(?!H|W|U)|overline|paint|pointer|shape|stop|strikethrough|stroke|text(?!L)|transform|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/;\nconst ON_ANI = /^on(Ani|Tra|Tou|BeforeInp|Compo)/;\nconst CAMEL_REPLACE = /[A-Z0-9]/g;\n\nconst IS_DOM = typeof document !== 'undefined';\n\n// Input types for which onchange should not be converted to oninput.\n// type=\"file|checkbox|radio\", plus \"range\" in IE11.\n// (IE11 doesn't support Symbol, which we use here to turn `rad` into `ra` which matches \"range\")\nconst onChangeInputType = type =>\n\t(typeof Symbol != 'undefined' && typeof Symbol() == 'symbol'\n\t\t? /fil|che|rad/\n\t\t: /fil|che|ra/\n\t).test(type);\n\n// Some libraries like `react-virtualized` explicitly check for this.\nComponent.prototype.isReactComponent = {};\n\n// `UNSAFE_*` lifecycle hooks\n// Preact only ever invokes the unprefixed methods.\n// Here we provide a base \"fallback\" implementation that calls any defined UNSAFE_ prefixed method.\n// - If a component defines its own `componentDidMount()` (including via defineProperty), use that.\n// - If a component defines `UNSAFE_componentDidMount()`, `componentDidMount` is the alias getter/setter.\n// - If anything assigns to an `UNSAFE_*` property, the assignment is forwarded to the unprefixed property.\n// See https://github.com/preactjs/preact/issues/1941\n[\n\t'componentWillMount',\n\t'componentWillReceiveProps',\n\t'componentWillUpdate'\n].forEach(key => {\n\tObject.defineProperty(Component.prototype, key, {\n\t\tconfigurable: true,\n\t\tget() {\n\t\t\treturn this['UNSAFE_' + key];\n\t\t},\n\t\tset(v) {\n\t\t\tObject.defineProperty(this, key, {\n\t\t\t\tconfigurable: true,\n\t\t\t\twritable: true,\n\t\t\t\tvalue: v\n\t\t\t});\n\t\t}\n\t});\n});\n\n/**\n * Proxy render() since React returns a Component reference.\n * @param {import('./internal').VNode} vnode VNode tree to render\n * @param {import('./internal').PreactElement} parent DOM node to render vnode tree into\n * @param {() => void} [callback] Optional callback that will be called after rendering\n * @returns {import('./internal').Component | null} The root component reference or null\n */\nexport function render(vnode, parent, callback) {\n\t// React destroys any existing DOM nodes, see #1727\n\t// ...but only on the first render, see #1828\n\tif (parent._children == null) {\n\t\tparent.textContent = '';\n\t}\n\n\tpreactRender(vnode, parent);\n\tif (typeof callback == 'function') callback();\n\n\treturn vnode ? vnode._component : null;\n}\n\nexport function hydrate(vnode, parent, callback) {\n\tpreactHydrate(vnode, parent);\n\tif (typeof callback == 'function') callback();\n\n\treturn vnode ? vnode._component : null;\n}\n\nlet oldEventHook = options.event;\noptions.event = e => {\n\tif (oldEventHook) e = oldEventHook(e);\n\n\te.persist = empty;\n\te.isPropagationStopped = isPropagationStopped;\n\te.isDefaultPrevented = isDefaultPrevented;\n\treturn (e.nativeEvent = e);\n};\n\nfunction empty() {}\n\nfunction isPropagationStopped() {\n\treturn this.cancelBubble;\n}\n\nfunction isDefaultPrevented() {\n\treturn this.defaultPrevented;\n}\n\nconst classNameDescriptorNonEnumberable = {\n\tenumerable: false,\n\tconfigurable: true,\n\tget() {\n\t\treturn this.class;\n\t}\n};\n\nfunction handleDomVNode(vnode) {\n\tlet props = vnode.props,\n\t\ttype = vnode.type,\n\t\tnormalizedProps = {};\n\n\tfor (let i in props) {\n\t\tlet value = props[i];\n\n\t\tif (\n\t\t\t(i === 'value' && 'defaultValue' in props && value == null) ||\n\t\t\t// Emulate React's behavior of not rendering the contents of noscript tags on the client.\n\t\t\t(IS_DOM && i === 'children' && type === 'noscript') ||\n\t\t\ti === 'class' ||\n\t\t\ti === 'className'\n\t\t) {\n\t\t\t// Skip applying value if it is null/undefined and we already set\n\t\t\t// a default value\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet lowerCased = i.toLowerCase();\n\t\tif (i === 'defaultValue' && 'value' in props && props.value == null) {\n\t\t\t// `defaultValue` is treated as a fallback `value` when a value prop is present but null/undefined.\n\t\t\t// `defaultValue` for Elements with no value prop is the same as the DOM defaultValue property.\n\t\t\ti = 'value';\n\t\t} else if (i === 'download' && value === true) {\n\t\t\t// Calling `setAttribute` with a truthy value will lead to it being\n\t\t\t// passed as a stringified value, e.g. `download=\"true\"`. React\n\t\t\t// converts it to an empty string instead, otherwise the attribute\n\t\t\t// value will be used as the file name and the file will be called\n\t\t\t// \"true\" upon downloading it.\n\t\t\tvalue = '';\n\t\t} else if (lowerCased === 'ondoubleclick') {\n\t\t\ti = 'ondblclick';\n\t\t} else if (\n\t\t\tlowerCased === 'onchange' &&\n\t\t\t(type === 'input' || type === 'textarea') &&\n\t\t\t!onChangeInputType(props.type)\n\t\t) {\n\t\t\tlowerCased = i = 'oninput';\n\t\t} else if (lowerCased === 'onfocus') {\n\t\t\ti = 'onfocusin';\n\t\t} else if (lowerCased === 'onblur') {\n\t\t\ti = 'onfocusout';\n\t\t} else if (ON_ANI.test(i)) {\n\t\t\ti = lowerCased;\n\t\t} else if (type.indexOf('-') === -1 && CAMEL_PROPS.test(i)) {\n\t\t\ti = i.replace(CAMEL_REPLACE, '-$&').toLowerCase();\n\t\t} else if (value === null) {\n\t\t\tvalue = undefined;\n\t\t}\n\n\t\t// Add support for onInput and onChange, see #3561\n\t\t// if we have an oninput prop already change it to oninputCapture\n\t\tif (lowerCased === 'oninput') {\n\t\t\ti = lowerCased;\n\t\t\tif (normalizedProps[i]) {\n\t\t\t\ti = 'oninputCapture';\n\t\t\t}\n\t\t}\n\n\t\tnormalizedProps[i] = value;\n\t}\n\n\t// Add support for array select values: <select multiple value={[]} />\n\tif (\n\t\ttype == 'select' &&\n\t\tnormalizedProps.multiple &&\n\t\tArray.isArray(normalizedProps.value)\n\t) {\n\t\t// forEach() always returns undefined, which we abuse here to unset the value prop.\n\t\tnormalizedProps.value = toChildArray(props.children).forEach(child => {\n\t\t\tchild.props.selected =\n\t\t\t\tnormalizedProps.value.indexOf(child.props.value) != -1;\n\t\t});\n\t}\n\n\t// Adding support for defaultValue in select tag\n\tif (type == 'select' && normalizedProps.defaultValue != null) {\n\t\tnormalizedProps.value = toChildArray(props.children).forEach(child => {\n\t\t\tif (normalizedProps.multiple) {\n\t\t\t\tchild.props.selected =\n\t\t\t\t\tnormalizedProps.defaultValue.indexOf(child.props.value) != -1;\n\t\t\t} else {\n\t\t\t\tchild.props.selected =\n\t\t\t\t\tnormalizedProps.defaultValue == child.props.value;\n\t\t\t}\n\t\t});\n\t}\n\n\tif (props.class && !props.className) {\n\t\tnormalizedProps.class = props.class;\n\t\tObject.defineProperty(\n\t\t\tnormalizedProps,\n\t\t\t'className',\n\t\t\tclassNameDescriptorNonEnumberable\n\t\t);\n\t} else if (props.className && !props.class) {\n\t\tnormalizedProps.class = normalizedProps.className = props.className;\n\t} else if (props.class && props.className) {\n\t\tnormalizedProps.class = normalizedProps.className = props.className;\n\t}\n\n\tvnode.props = normalizedProps;\n}\n\nlet oldVNodeHook = options.vnode;\noptions.vnode = vnode => {\n\t// only normalize props on Element nodes\n\tif (typeof vnode.type === 'string') {\n\t\thandleDomVNode(vnode);\n\t}\n\n\tvnode.$$typeof = REACT_ELEMENT_TYPE;\n\n\tif (oldVNodeHook) oldVNodeHook(vnode);\n};\n\n// Only needed for react-relay\nlet currentComponent;\nconst oldBeforeRender = options._render;\noptions._render = function (vnode) {\n\tif (oldBeforeRender) {\n\t\toldBeforeRender(vnode);\n\t}\n\tcurrentComponent = vnode._component;\n};\n\nconst oldDiffed = options.diffed;\n/** @type {(vnode: import('./internal').VNode) => void} */\noptions.diffed = function (vnode) {\n\tif (oldDiffed) {\n\t\toldDiffed(vnode);\n\t}\n\n\tconst props = vnode.props;\n\tconst dom = vnode._dom;\n\n\tif (\n\t\tdom != null &&\n\t\tvnode.type === 'textarea' &&\n\t\t'value' in props &&\n\t\tprops.value !== dom.value\n\t) {\n\t\tdom.value = props.value == null ? '' : props.value;\n\t}\n\n\tcurrentComponent = null;\n};\n\n// This is a very very private internal function for React it\n// is used to sort-of do runtime dependency injection. So far\n// only `react-relay` makes use of it. It uses it to read the\n// context value.\nexport const __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = {\n\tReactCurrentDispatcher: {\n\t\tcurrent: {\n\t\t\treadContext(context) {\n\t\t\t\treturn currentComponent._globalContext[context._id].props.value;\n\t\t\t}\n\t\t}\n\t}\n};\n", "import {\n\tcreateElement,\n\trender as preactRender,\n\tcloneElement as preactCloneElement,\n\tcreateRef,\n\tComponent,\n\tcreateContext,\n\tFragment\n} from 'preact';\nimport {\n\tuseState,\n\tuseId,\n\tuseReducer,\n\tuseEffect,\n\tuseLayoutEffect,\n\tuseRef,\n\tuseImperativeHandle,\n\tuseMemo,\n\tuseCallback,\n\tuseContext,\n\tuseDebugValue\n} from 'preact/hooks';\nimport { PureComponent } from './PureComponent';\nimport { memo } from './memo';\nimport { forwardRef } from './forwardRef';\nimport { Children } from './Children';\nimport { Suspense, lazy } from './suspense';\nimport { SuspenseList } from './suspense-list';\nimport { createPortal } from './portals';\nimport { is } from './util';\nimport {\n\thydrate,\n\trender,\n\tREACT_ELEMENT_TYPE,\n\t__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED\n} from './render';\n\nconst version = '17.0.2'; // trick libraries to think we are react\n\n/**\n * Legacy version of createElement.\n * @param {import('./internal').VNode[\"type\"]} type The node name or Component constructor\n */\nfunction createFactory(type) {\n\treturn createElement.bind(null, type);\n}\n\n/**\n * Check if the passed element is a valid (p)react node.\n * @param {*} element The element to check\n * @returns {boolean}\n */\nfunction isValidElement(element) {\n\treturn !!element && element.$$typeof === REACT_ELEMENT_TYPE;\n}\n\n/**\n * Wrap `cloneElement` to abort if the passed element is not a valid element and apply\n * all vnode normalizations.\n * @param {import('./internal').VNode} element The vnode to clone\n * @param {object} props Props to add when cloning\n * @param {Array<import('./internal').ComponentChildren>} rest Optional component children\n */\nfunction cloneElement(element) {\n\tif (!isValidElement(element)) return element;\n\treturn preactCloneElement.apply(null, arguments);\n}\n\n/**\n * Remove a component tree from the DOM, including state and event handlers.\n * @param {import('./internal').PreactElement} container\n * @returns {boolean}\n */\nfunction unmountComponentAtNode(container) {\n\tif (container._children) {\n\t\tpreactRender(null, container);\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n/**\n * Get the matching DOM node for a component\n * @param {import('./internal').Component} component\n * @returns {import('./internal').PreactElement | null}\n */\nfunction findDOMNode(component) {\n\treturn (\n\t\t(component &&\n\t\t\t(component.base || (component.nodeType === 1 && component))) ||\n\t\tnull\n\t);\n}\n\n/**\n * Deprecated way to control batched rendering inside the reconciler, but we\n * already schedule in batches inside our rendering code\n * @template Arg\n * @param {(arg: Arg) => void} callback function that triggers the updated\n * @param {Arg} [arg] Optional argument that can be passed to the callback\n */\n// eslint-disable-next-line camelcase\nconst unstable_batchedUpdates = (callback, arg) => callback(arg);\n\n/**\n * In React, `flushSync` flushes the entire tree and forces a rerender. It's\n * implmented here as a no-op.\n * @template Arg\n * @template Result\n * @param {(arg: Arg) => Result} callback function that runs before the flush\n * @param {Arg} [arg] Optional argument that can be passed to the callback\n * @returns\n */\nconst flushSync = (callback, arg) => callback(arg);\n\n/**\n * Strict Mode is not implemented in Preact, so we provide a stand-in for it\n * that just renders its children without imposing any restrictions.\n */\nconst StrictMode = Fragment;\n\nexport function startTransition(cb) {\n\tcb();\n}\n\nexport function useDeferredValue(val) {\n\treturn val;\n}\n\nexport function useTransition() {\n\treturn [false, startTransition];\n}\n\n// TODO: in theory this should be done after a VNode is diffed as we want to insert\n// styles/... before it attaches\nexport const useInsertionEffect = useLayoutEffect;\n\n/**\n * This is taken from https://github.com/facebook/react/blob/main/packages/use-sync-external-store/src/useSyncExternalStoreShimClient.js#L84\n * on a high level this cuts out the warnings, ... and attempts a smaller implementation\n */\nexport function useSyncExternalStore(subscribe, getSnapshot) {\n\tconst value = getSnapshot();\n\n\tconst [{ _instance }, forceUpdate] = useState({\n\t\t_instance: { _value: value, _getSnapshot: getSnapshot }\n\t});\n\n\tuseLayoutEffect(() => {\n\t\t_instance._value = value;\n\t\t_instance._getSnapshot = getSnapshot;\n\n\t\tif (!is(_instance._value, getSnapshot())) {\n\t\t\tforceUpdate({ _instance });\n\t\t}\n\t}, [subscribe, value, getSnapshot]);\n\n\tuseEffect(() => {\n\t\tif (!is(_instance._value, _instance._getSnapshot())) {\n\t\t\tforceUpdate({ _instance });\n\t\t}\n\n\t\treturn subscribe(() => {\n\t\t\tif (!is(_instance._value, _instance._getSnapshot())) {\n\t\t\t\tforceUpdate({ _instance });\n\t\t\t}\n\t\t});\n\t}, [subscribe]);\n\n\treturn value;\n}\n\nexport * from 'preact/hooks';\nexport {\n\tversion,\n\tChildren,\n\trender,\n\thydrate,\n\tunmountComponentAtNode,\n\tcreatePortal,\n\tcreateElement,\n\tcreateContext,\n\tcreateFactory,\n\tcloneElement,\n\tcreateRef,\n\tFragment,\n\tisValidElement,\n\tfindDOMNode,\n\tComponent,\n\tPureComponent,\n\tmemo,\n\tforwardRef,\n\tflushSync,\n\t// eslint-disable-next-line camelcase\n\tunstable_batchedUpdates,\n\tStrictMode,\n\tSuspense,\n\tSuspenseList,\n\tlazy,\n\t__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED\n};\n\n// React copies the named exports to the default one.\nexport default {\n\tuseState,\n\tuseId,\n\tuseReducer,\n\tuseEffect,\n\tuseLayoutEffect,\n\tuseInsertionEffect,\n\tuseTransition,\n\tuseDeferredValue,\n\tuseSyncExternalStore,\n\tstartTransition,\n\tuseRef,\n\tuseImperativeHandle,\n\tuseMemo,\n\tuseCallback,\n\tuseContext,\n\tuseDebugValue,\n\tversion,\n\tChildren,\n\trender,\n\thydrate,\n\tunmountComponentAtNode,\n\tcreatePortal,\n\tcreateElement,\n\tcreateContext,\n\tcreateFactory,\n\tcloneElement,\n\tcreateRef,\n\tFragment,\n\tisValidElement,\n\tfindDOMNode,\n\tComponent,\n\tPureComponent,\n\tmemo,\n\tforwardRef,\n\tflushSync,\n\tunstable_batchedUpdates,\n\tStrictMode,\n\tSuspense,\n\tSuspenseList,\n\tlazy,\n\t__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED\n};\n", "import { TableState, Updater } from './types'\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\nexport type RequiredKeys<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type Overwrite<T, U extends { [TKey in keyof T]?: any }> = Omit<\n  T,\n  keyof U\n> &\n  U\n\nexport type UnionToIntersection<T> = (\n  T extends any ? (x: T) => any : never\n) extends (x: infer R) => any\n  ? R\n  : never\n\nexport type IsAny<T, Y, N> = 1 extends 0 & T ? Y : N\nexport type IsKnown<T, Y, N> = unknown extends T ? N : Y\n\ntype ComputeRange<\n  N extends number,\n  Result extends Array<unknown> = []\n> = Result['length'] extends N\n  ? Result\n  : ComputeRange<N, [...Result, Result['length']]>\ntype Index40 = ComputeRange<40>[number]\n\n// Is this type a tuple?\ntype IsTuple<T> = T extends readonly any[] & { length: infer Length }\n  ? Length extends Index40\n    ? T\n    : never\n  : never\n\n// If this type is a tuple, what indices are allowed?\ntype AllowedIndexes<\n  Tuple extends ReadonlyArray<any>,\n  Keys extends number = never\n> = Tuple extends readonly []\n  ? Keys\n  : Tuple extends readonly [infer _, ...infer Tail]\n  ? AllowedIndexes<Tail, Keys | Tail['length']>\n  : Keys\n\nexport type DeepKeys<T> = unknown extends T\n  ? keyof T\n  : object extends T\n  ? string\n  : T extends readonly any[] & IsTuple<T>\n  ? AllowedIndexes<T> | DeepKeysPrefix<T, AllowedIndexes<T>>\n  : T extends any[]\n  ? never & 'Dynamic length array indexing is not supported'\n  : T extends Date\n  ? never\n  : T extends object\n  ? (keyof T & string) | DeepKeysPrefix<T, keyof T>\n  : never\n\ntype DeepKeysPrefix<T, TPrefix> = TPrefix extends keyof T & (number | string)\n  ? `${TPrefix}.${DeepKeys<T[TPrefix]> & string}`\n  : never\n\nexport type DeepValue<T, TProp> = T extends Record<string | number, any>\n  ? TProp extends `${infer TBranch}.${infer TDeepProp}`\n    ? DeepValue<T[TBranch], TDeepProp>\n    : T[TProp & string]\n  : never\n\nexport type NoInfer<T> = [T][T extends any ? 0 : never]\n\nexport type Getter<TValue> = <TTValue = TValue>() => NoInfer<TTValue>\n\n///\n\nexport function functionalUpdate<T>(updater: Updater<T>, input: T): T {\n  return typeof updater === 'function'\n    ? (updater as (input: T) => T)(input)\n    : updater\n}\n\nexport function noop() {\n  //\n}\n\nexport function makeStateUpdater<K extends keyof TableState>(\n  key: K,\n  instance: unknown\n) {\n  return (updater: Updater<TableState[K]>) => {\n    ;(instance as any).setState(<TTableState>(old: TTableState) => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, (old as any)[key]),\n      }\n    })\n  }\n}\n\ntype AnyFunction = (...args: any) => any\n\nexport function isFunction<T extends AnyFunction>(d: any): d is T {\n  return d instanceof Function\n}\n\nexport function isNumberArray(d: any): d is number[] {\n  return Array.isArray(d) && d.every(val => typeof val === 'number')\n}\n\nexport function flattenBy<TNode>(\n  arr: TNode[],\n  getChildren: (item: TNode) => TNode[]\n) {\n  const flat: TNode[] = []\n\n  const recurse = (subArr: TNode[]) => {\n    subArr.forEach(item => {\n      flat.push(item)\n      const children = getChildren(item)\n      if (children?.length) {\n        recurse(children)\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: any\n    debug?: () => any\n    onChange?: (result: TResult) => void\n  }\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug) resultTime = Date.now()\n\n    result = fn(...newDeps)\n    opts?.onChange?.(result)\n\n    if (opts.key && opts.debug) {\n      if (opts?.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n        const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n        const resultFpsPercentage = resultEndTime / 16\n\n        const pad = (str: number | string, num: number) => {\n          str = String(str)\n          while (str.length < num) {\n            str = ' ' + str\n          }\n          return str\n        }\n\n        console.info(\n          `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n          `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120)\n            )}deg 100% 31%);`,\n          opts?.key\n        )\n      }\n    }\n\n    return result!\n  }\n}\n", "import {\n  Column,\n  Table,\n  AccessorFn,\n  ColumnDef,\n  RowData,\n  ColumnDefResolved,\n} from '../types'\nimport { memo } from '../utils'\n\nexport interface CoreColumn<TData extends RowData, TValue> {\n  id: string\n  depth: number\n  accessorFn?: AccessorFn<TData, TValue>\n  columnDef: ColumnDef<TData, TValue>\n  columns: Column<TData, TValue>[]\n  parent?: Column<TData, TValue>\n  getFlatColumns: () => Column<TData, TValue>[]\n  getLeafColumns: () => Column<TData, TValue>[]\n}\n\nexport function createColumn<TData extends RowData, TValue>(\n  table: Table<TData>,\n  columnDef: ColumnDef<TData, TValue>,\n  depth: number,\n  parent?: Column<TData, TValue>\n): Column<TData, TValue> {\n  const defaultColumn = table._getDefaultColumnDef()\n\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef,\n  } as ColumnDefResolved<TData>\n\n  const accessorKey = resolvedColumnDef.accessorKey\n\n  let id =\n    resolvedColumnDef.id ??\n    (accessorKey ? accessorKey.replace('.', '_') : undefined) ??\n    (typeof resolvedColumnDef.header === 'string'\n      ? resolvedColumnDef.header\n      : undefined)\n\n  let accessorFn: AccessorFn<TData> | undefined\n\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = (originalRow: TData) => {\n        let result = originalRow as Record<string, any>\n\n        for (const key of accessorKey.split('.')) {\n          result = result?.[key]\n          if (process.env.NODE_ENV !== 'production' && result === undefined) {\n            console.warn(\n              `\"${key}\" in deeply nested key \"${accessorKey}\" returned undefined.`\n            )\n          }\n        }\n\n        return result\n      }\n    } else {\n      accessorFn = (originalRow: TData) =>\n        (originalRow as any)[resolvedColumnDef.accessorKey]\n    }\n  }\n\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        resolvedColumnDef.accessorFn\n          ? `Columns require an id when using an accessorFn`\n          : `Columns require an id when using a non-string header`\n      )\n    }\n    throw new Error()\n  }\n\n  let column: CoreColumn<TData, any> = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent as any,\n    depth,\n    columnDef: resolvedColumnDef as ColumnDef<TData, any>,\n    columns: [],\n    getFlatColumns: memo(\n      () => [true],\n      () => {\n        return [\n          column as Column<TData, TValue>,\n          ...column.columns?.flatMap(d => d.getFlatColumns()),\n        ]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n    getLeafColumns: memo(\n      () => [table._getOrderColumnsFn()],\n      orderColumns => {\n        if (column.columns?.length) {\n          let leafColumns = column.columns.flatMap(column =>\n            column.getLeafColumns()\n          )\n\n          return orderColumns(leafColumns)\n        }\n\n        return [column as Column<TData, TValue>]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n  }\n\n  column = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.createColumn?.(column, table))\n  }, column)\n\n  // Yes, we have to convert table to uknown, because we know more than the compiler here.\n  return column as Column<TData, TValue>\n}\n", "import { RowData, Column, Header, HeaderGroup, Table } from '../types'\nimport { memo } from '../utils'\nimport { TableFeature } from './table'\n\nexport interface CoreHeaderGroup<TData extends RowData> {\n  id: string\n  depth: number\n  headers: Header<TData, unknown>[]\n}\n\nexport interface HeaderContext<TData, TValue> {\n  table: Table<TData>\n  header: Header<TData, TValue>\n  column: Column<TData, TValue>\n}\n\nexport interface CoreHeader<TData extends RowData, TValue> {\n  id: string\n  index: number\n  depth: number\n  column: Column<TData, TValue>\n  headerGroup: HeaderGroup<TData>\n  subHeaders: Header<TData, TValue>[]\n  colSpan: number\n  rowSpan: number\n  getLeafHeaders: () => Header<TData, unknown>[]\n  isPlaceholder: boolean\n  placeholderId?: string\n  getContext: () => HeaderContext<TData, TValue>\n}\n\nexport interface HeadersInstance<TData extends RowData> {\n  getHeaderGroups: () => HeaderGroup<TData>[]\n  getLeftHeaderGroups: () => HeaderGroup<TData>[]\n  getCenterHeaderGroups: () => HeaderGroup<TData>[]\n  getRightHeaderGroups: () => HeaderGroup<TData>[]\n\n  getFooterGroups: () => HeaderGroup<TData>[]\n  getLeftFooterGroups: () => HeaderGroup<TData>[]\n  getCenterFooterGroups: () => HeaderGroup<TData>[]\n  getRightFooterGroups: () => HeaderGroup<TData>[]\n\n  getFlatHeaders: () => Header<TData, unknown>[]\n  getLeftFlatHeaders: () => Header<TData, unknown>[]\n  getCenterFlatHeaders: () => Header<TData, unknown>[]\n  getRightFlatHeaders: () => Header<TData, unknown>[]\n\n  getLeafHeaders: () => Header<TData, unknown>[]\n  getLeftLeafHeaders: () => Header<TData, unknown>[]\n  getCenterLeafHeaders: () => Header<TData, unknown>[]\n  getRightLeafHeaders: () => Header<TData, unknown>[]\n}\n\n//\n\nfunction createHeader<TData extends RowData, TValue>(\n  table: Table<TData>,\n  column: Column<TData, TValue>,\n  options: {\n    id?: string\n    isPlaceholder?: boolean\n    placeholderId?: string\n    index: number\n    depth: number\n  }\n): Header<TData, TValue> {\n  const id = options.id ?? column.id\n\n  let header: CoreHeader<TData, TValue> = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null!,\n    getLeafHeaders: (): Header<TData, unknown>[] => {\n      const leafHeaders: Header<TData, unknown>[] = []\n\n      const recurseHeader = (h: CoreHeader<TData, any>) => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader)\n        }\n        leafHeaders.push(h as Header<TData, unknown>)\n      }\n\n      recurseHeader(header)\n\n      return leafHeaders\n    },\n    getContext: () => ({\n      table,\n      header: header as Header<TData, TValue>,\n      column,\n    }),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(header, feature.createHeader?.(header, table))\n  })\n\n  return header as Header<TData, TValue>\n}\n\nexport const Headers: TableFeature = {\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): HeadersInstance<TData> => {\n    return {\n      // Header Groups\n\n      getHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          const leftColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const rightColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const centerColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n\n          const headerGroups = buildHeaderGroups(\n            allColumns,\n            [...leftColumns, ...centerColumns, ...rightColumns],\n            table\n          )\n\n          return headerGroups\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          leafColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n          return buildHeaderGroups(allColumns, leafColumns, table, 'center')\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n        ],\n        (allColumns, leafColumns, left) => {\n          const orderedLeafColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'left'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, right) => {\n          const orderedLeafColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'right'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Footer Groups\n\n      getFooterGroups: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFooterGroups: memo(\n        () => [table.getLeftHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFooterGroups: memo(\n        () => [table.getCenterHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFooterGroups: memo(\n        () => [table.getRightHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Flat Headers\n\n      getFlatHeaders: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return headerGroups\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFlatHeaders: memo(\n        () => [table.getLeftHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFlatHeaders: memo(\n        () => [table.getCenterHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFlatHeaders: memo(\n        () => [table.getRightHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Leaf Headers\n\n      getCenterLeafHeaders: memo(\n        () => [table.getCenterFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftLeafHeaders: memo(\n        () => [table.getLeftFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightLeafHeaders: memo(\n        () => [table.getRightFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeafHeaders: memo(\n        () => [\n          table.getLeftHeaderGroups(),\n          table.getCenterHeaderGroups(),\n          table.getRightHeaderGroups(),\n        ],\n        (left, center, right) => {\n          return [\n            ...(left[0]?.headers ?? []),\n            ...(center[0]?.headers ?? []),\n            ...(right[0]?.headers ?? []),\n          ]\n            .map(header => {\n              return header.getLeafHeaders()\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n    }\n  },\n}\n\nexport function buildHeaderGroups<TData extends RowData>(\n  allColumns: Column<TData, unknown>[],\n  columnsToGroup: Column<TData, unknown>[],\n  table: Table<TData>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TData, unknown>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TData>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TData, unknown>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TData> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders: Header<TData, unknown>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TData, unknown>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      if (\n        latestPendingParentHeader &&\n        latestPendingParentHeader?.column === column\n      ) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup)\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup?.id]\n            .filter(Boolean)\n            .join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder\n            ? `${pendingParentHeaders.filter(d => d.column === column).length}`\n            : undefined,\n          depth,\n          index: pendingParentHeaders.length,\n        })\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup)\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header)\n      }\n\n      headerGroup.headers.push(headerToGroup)\n      headerToGroup.headerGroup = headerGroup\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map((column, index) =>\n    createHeader(table, column, {\n      depth: maxDepth,\n      index,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (\n    headers: Header<TData, unknown>[]\n  ): { colSpan: number; rowSpan: number }[] => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan\n      header.rowSpan = rowSpan\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n", "import { TableFeature } from '../core/table'\nimport { RowData, Column, Header, OnChangeFn, Table, Updater } from '../types'\nimport { makeStateUpdater } from '../utils'\nimport { ColumnPinningPosition } from './Pinning'\n\n//\n\nexport interface ColumnSizingTableState {\n  columnSizing: ColumnSizingState\n  columnSizingInfo: ColumnSizingInfoState\n}\n\nexport type ColumnSizingState = Record<string, number>\n\nexport interface ColumnSizingInfoState {\n  startOffset: null | number\n  startSize: null | number\n  deltaOffset: null | number\n  deltaPercentage: null | number\n  isResizingColumn: false | string\n  columnSizingStart: [string, number][]\n}\n\nexport type ColumnResizeMode = 'onChange' | 'onEnd'\n\nexport interface ColumnSizingOptions {\n  enableColumnResizing?: boolean\n  columnResizeMode?: ColumnResizeMode\n  onColumnSizingChange?: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingDefaultOptions {\n  columnResizeMode: ColumnResizeMode\n  onColumnSizingChange: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingInstance {\n  setColumnSizing: (updater: Updater<ColumnSizingState>) => void\n  setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void\n  resetColumnSizing: (defaultState?: boolean) => void\n  resetHeaderSizeInfo: (defaultState?: boolean) => void\n  getTotalSize: () => number\n  getLeftTotalSize: () => number\n  getCenterTotalSize: () => number\n  getRightTotalSize: () => number\n}\n\nexport interface ColumnSizingColumnDef {\n  enableResizing?: boolean\n  size?: number\n  minSize?: number\n  maxSize?: number\n}\n\nexport interface ColumnSizingColumn {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  resetSize: () => void\n}\n\nexport interface ColumnSizingHeader {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getResizeHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER,\n}\n\nconst getDefaultColumnSizingInfoState = (): ColumnSizingInfoState => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: [],\n})\n\nexport const ColumnSizing: TableFeature = {\n  getDefaultColumnDef: (): ColumnSizingColumnDef => {\n    return defaultColumnSizing\n  },\n  getInitialState: (state): ColumnSizingTableState => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingDefaultOptions => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingColumn => {\n    return {\n      getSize: () => {\n        const columnSize = table.getState().columnSizing[column.id]\n\n        return Math.min(\n          Math.max(\n            column.columnDef.minSize ?? defaultColumnSizing.minSize,\n            columnSize ?? column.columnDef.size ?? defaultColumnSizing.size\n          ),\n          column.columnDef.maxSize ?? defaultColumnSizing.maxSize\n        )\n      },\n      getStart: position => {\n        const columns = !position\n          ? table.getVisibleLeafColumns()\n          : position === 'left'\n          ? table.getLeftVisibleLeafColumns()\n          : table.getRightVisibleLeafColumns()\n\n        const index = columns.findIndex(d => d.id === column.id)\n\n        if (index > 0) {\n          const prevSiblingColumn = columns[index - 1]!\n\n          return (\n            prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize()\n          )\n        }\n\n        return 0\n      },\n      resetSize: () => {\n        table.setColumnSizing(({ [column.id]: _, ...rest }) => {\n          return rest\n        })\n      },\n      getCanResize: () => {\n        return (\n          (column.columnDef.enableResizing ?? true) &&\n          (table.options.enableColumnResizing ?? true)\n        )\n      },\n      getIsResizing: () => {\n        return table.getState().columnSizingInfo.isResizingColumn === column.id\n      },\n    }\n  },\n\n  createHeader: <TData extends RowData, TValue>(\n    header: Header<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingHeader => {\n    return {\n      getSize: () => {\n        let sum = 0\n\n        const recurse = (header: Header<TData, TValue>) => {\n          if (header.subHeaders.length) {\n            header.subHeaders.forEach(recurse)\n          } else {\n            sum += header.column.getSize() ?? 0\n          }\n        }\n\n        recurse(header)\n\n        return sum\n      },\n      getStart: () => {\n        if (header.index > 0) {\n          const prevSiblingHeader =\n            header.headerGroup.headers[header.index - 1]!\n          return prevSiblingHeader.getStart() + prevSiblingHeader.getSize()\n        }\n\n        return 0\n      },\n      getResizeHandler: () => {\n        const column = table.getColumn(header.column.id)\n        const canResize = column?.getCanResize()\n\n        return (e: unknown) => {\n          if (!column || !canResize) {\n            return\n          }\n\n          ;(e as any).persist?.()\n\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return\n            }\n          }\n\n          const startSize = header.getSize()\n\n          const columnSizingStart: [string, number][] = header\n            ? header\n                .getLeafHeaders()\n                .map(d => [d.column.id, d.column.getSize()])\n            : [[column.id, column.getSize()]]\n\n          const clientX = isTouchStartEvent(e)\n            ? Math.round(e.touches[0]!.clientX)\n            : (e as MouseEvent).clientX\n\n          const newColumnSizing: ColumnSizingState = {}\n\n          const updateOffset = (\n            eventType: 'move' | 'end',\n            clientXPos?: number\n          ) => {\n            if (typeof clientXPos !== 'number') {\n              return\n            }\n\n            table.setColumnSizingInfo(old => {\n              const deltaOffset = clientXPos - (old?.startOffset ?? 0)\n              const deltaPercentage = Math.max(\n                deltaOffset / (old?.startSize ?? 0),\n                -0.999999\n              )\n\n              old.columnSizingStart.forEach(([columnId, headerSize]) => {\n                newColumnSizing[columnId] =\n                  Math.round(\n                    Math.max(headerSize + headerSize * deltaPercentage, 0) * 100\n                  ) / 100\n              })\n\n              return {\n                ...old,\n                deltaOffset,\n                deltaPercentage,\n              }\n            })\n\n            if (\n              table.options.columnResizeMode === 'onChange' ||\n              eventType === 'end'\n            ) {\n              table.setColumnSizing(old => ({\n                ...old,\n                ...newColumnSizing,\n              }))\n            }\n          }\n\n          const onMove = (clientXPos?: number) =>\n            updateOffset('move', clientXPos)\n\n          const onEnd = (clientXPos?: number) => {\n            updateOffset('end', clientXPos)\n\n            table.setColumnSizingInfo(old => ({\n              ...old,\n              isResizingColumn: false,\n              startOffset: null,\n              startSize: null,\n              deltaOffset: null,\n              deltaPercentage: null,\n              columnSizingStart: [],\n            }))\n          }\n\n          const mouseEvents = {\n            moveHandler: (e: MouseEvent) => onMove(e.clientX),\n            upHandler: (e: MouseEvent) => {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler)\n              document.removeEventListener('mouseup', mouseEvents.upHandler)\n              onEnd(e.clientX)\n            },\n          }\n\n          const touchEvents = {\n            moveHandler: (e: TouchEvent) => {\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onMove(e.touches[0]!.clientX)\n              return false\n            },\n            upHandler: (e: TouchEvent) => {\n              document.removeEventListener('touchmove', touchEvents.moveHandler)\n              document.removeEventListener('touchend', touchEvents.upHandler)\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onEnd(e.touches[0]?.clientX)\n            },\n          }\n\n          const passiveIfSupported = passiveEventSupported()\n            ? { passive: false }\n            : false\n\n          if (isTouchStartEvent(e)) {\n            document.addEventListener(\n              'touchmove',\n              touchEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'touchend',\n              touchEvents.upHandler,\n              passiveIfSupported\n            )\n          } else {\n            document.addEventListener(\n              'mousemove',\n              mouseEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'mouseup',\n              mouseEvents.upHandler,\n              passiveIfSupported\n            )\n          }\n\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            startOffset: clientX,\n            startSize,\n            deltaOffset: 0,\n            deltaPercentage: 0,\n            columnSizingStart,\n            isResizingColumn: column.id,\n          }))\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingInstance => {\n    return {\n      setColumnSizing: updater => table.options.onColumnSizingChange?.(updater),\n      setColumnSizingInfo: updater =>\n        table.options.onColumnSizingInfoChange?.(updater),\n      resetColumnSizing: defaultState => {\n        table.setColumnSizing(\n          defaultState ? {} : table.initialState.columnSizing ?? {}\n        )\n      },\n      resetHeaderSizeInfo: defaultState => {\n        table.setColumnSizingInfo(\n          defaultState\n            ? getDefaultColumnSizingInfoState()\n            : table.initialState.columnSizingInfo ??\n                getDefaultColumnSizingInfoState()\n        )\n      },\n      getTotalSize: () =>\n        table.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getLeftTotalSize: () =>\n        table.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getCenterTotalSize: () =>\n        table.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getRightTotalSize: () =>\n        table.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n    }\n  },\n}\n\nlet passiveSupported: boolean | null = null\nexport function passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    const noop = () => {}\n\n    window.addEventListener('test', noop, options)\n    window.removeEventListener('test', noop)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\nfunction isTouchStartEvent(e: unknown): e is TouchEvent {\n  return (e as TouchEvent).type === 'touchstart'\n}\n", "import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, Updater, RowData } from '../types'\nimport { makeStateUpdater } from '../utils'\n\nexport type ExpandedStateList = Record<string, boolean>\nexport type ExpandedState = true | Record<string, boolean>\nexport interface ExpandedTableState {\n  expanded: ExpandedState\n}\n\nexport interface ExpandedRow {\n  toggleExpanded: (expanded?: boolean) => void\n  getIsExpanded: () => boolean\n  getCanExpand: () => boolean\n  getToggleExpandedHandler: () => () => void\n}\n\nexport interface ExpandedOptions<TData extends RowData> {\n  manualExpanding?: boolean\n  onExpandedChange?: OnChangeFn<ExpandedState>\n  autoResetExpanded?: boolean\n  enableExpanding?: boolean\n  getExpandedRowModel?: (table: Table<any>) => () => RowModel<any>\n  getIsRowExpanded?: (row: Row<TData>) => boolean\n  getRowCanExpand?: (row: Row<TData>) => boolean\n  paginateExpandedRows?: boolean\n}\n\nexport interface ExpandedInstance<TData extends RowData> {\n  _autoResetExpanded: () => void\n  setExpanded: (updater: Updater<ExpandedState>) => void\n  toggleAllRowsExpanded: (expanded?: boolean) => void\n  resetExpanded: (defaultState?: boolean) => void\n  getCanSomeRowsExpand: () => boolean\n  getToggleAllRowsExpandedHandler: () => (event: unknown) => void\n  getIsSomeRowsExpanded: () => boolean\n  getIsAllRowsExpanded: () => boolean\n  getExpandedDepth: () => number\n  getExpandedRowModel: () => RowModel<TData>\n  _getExpandedRowModel?: () => RowModel<TData>\n  getPreExpandedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const Expanding: TableFeature = {\n  getInitialState: (state): ExpandedTableState => {\n    return {\n      expanded: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedOptions<TData> => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetExpanded: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetExpanded ??\n          !table.options.manualExpanding\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetExpanded()\n            queued = false\n          })\n        }\n      },\n      setExpanded: updater => table.options.onExpandedChange?.(updater),\n      toggleAllRowsExpanded: expanded => {\n        if (expanded ?? !table.getIsAllRowsExpanded()) {\n          table.setExpanded(true)\n        } else {\n          table.setExpanded({})\n        }\n      },\n      resetExpanded: defaultState => {\n        table.setExpanded(\n          defaultState ? {} : table.initialState?.expanded ?? {}\n        )\n      },\n      getCanSomeRowsExpand: () => {\n        return table\n          .getPrePaginationRowModel()\n          .flatRows.some(row => row.getCanExpand())\n      },\n      getToggleAllRowsExpandedHandler: () => {\n        return (e: unknown) => {\n          ;(e as any).persist?.()\n          table.toggleAllRowsExpanded()\n        }\n      },\n      getIsSomeRowsExpanded: () => {\n        const expanded = table.getState().expanded\n        return expanded === true || Object.values(expanded).some(Boolean)\n      },\n      getIsAllRowsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        // If expanded is true, save some cycles and return true\n        if (typeof expanded === 'boolean') {\n          return expanded === true\n        }\n\n        if (!Object.keys(expanded).length) {\n          return false\n        }\n\n        // If any row is not expanded, return false\n        if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\n          return false\n        }\n\n        // They must all be expanded :shrug:\n        return true\n      },\n      getExpandedDepth: () => {\n        let maxDepth = 0\n\n        const rowIds =\n          table.getState().expanded === true\n            ? Object.keys(table.getRowModel().rowsById)\n            : Object.keys(table.getState().expanded)\n\n        rowIds.forEach(id => {\n          const splitId = id.split('.')\n          maxDepth = Math.max(maxDepth, splitId.length)\n        })\n\n        return maxDepth\n      },\n      getPreExpandedRowModel: () => table.getSortedRowModel(),\n      getExpandedRowModel: () => {\n        if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n          table._getExpandedRowModel = table.options.getExpandedRowModel(table)\n        }\n\n        if (table.options.manualExpanding || !table._getExpandedRowModel) {\n          return table.getPreExpandedRowModel()\n        }\n\n        return table._getExpandedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ExpandedRow => {\n    return {\n      toggleExpanded: expanded => {\n        table.setExpanded(old => {\n          const exists = old === true ? true : !!old?.[row.id]\n\n          let oldExpanded: ExpandedStateList = {}\n\n          if (old === true) {\n            Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n              oldExpanded[rowId] = true\n            })\n          } else {\n            oldExpanded = old\n          }\n\n          expanded = expanded ?? !exists\n\n          if (!exists && expanded) {\n            return {\n              ...oldExpanded,\n              [row.id]: true,\n            }\n          }\n\n          if (exists && !expanded) {\n            const { [row.id]: _, ...rest } = oldExpanded\n            return rest\n          }\n\n          return old\n        })\n      },\n      getIsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        return !!(\n          table.options.getIsRowExpanded?.(row) ??\n          (expanded === true || expanded?.[row.id])\n        )\n      },\n      getCanExpand: () => {\n        return (\n          table.options.getRowCanExpand?.(row) ??\n          ((table.options.enableExpanding ?? true) && !!row.subRows?.length)\n        )\n      },\n      getToggleExpandedHandler: () => {\n        const canExpand = row.getCanExpand()\n\n        return () => {\n          if (!canExpand) return\n          row.toggleExpanded()\n        }\n      },\n    }\n  },\n}\n", "import { FilterFn } from './features/Filters'\n\nconst includesString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  const search = filterValue.toLowerCase()\n  return Boolean(\n    row\n      .getValue<string | null>(columnId)\n      ?.toString()\n      ?.toLowerCase()\n      ?.includes(search)\n  )\n}\n\nincludesString.autoRemove = (val: any) => testFalsey(val)\n\nconst includesStringSensitive: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return Boolean(\n    row.getValue<string | null>(columnId)?.toString()?.includes(filterValue)\n  )\n}\n\nincludesStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nconst equalsString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return (\n    row.getValue<string | null>(columnId)?.toString()?.toLowerCase() ===\n    filterValue?.toLowerCase()\n  )\n}\n\nequalsString.autoRemove = (val: any) => testFalsey(val)\n\nconst arrIncludes: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue<unknown[]>(columnId)?.includes(filterValue)\n}\n\narrIncludes.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesAll: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return !filterValue.some(\n    val => !row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesAll.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesSome: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return filterValue.some(val =>\n    row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesSome.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst equals: FilterFn<any> = (row, columnId: string, filterValue: unknown) => {\n  return row.getValue(columnId) === filterValue\n}\n\nequals.autoRemove = (val: any) => testFalsey(val)\n\nconst weakEquals: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue(columnId) == filterValue\n}\n\nweakEquals.autoRemove = (val: any) => testFalsey(val)\n\nconst inNumberRange: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: [number, number]\n) => {\n  let [min, max] = filterValue\n\n  const rowValue = row.getValue<number>(columnId)\n  return rowValue >= min && rowValue <= max\n}\n\ninNumberRange.resolveFilterValue = (val: [any, any]) => {\n  let [unsafeMin, unsafeMax] = val\n\n  let parsedMin =\n    typeof unsafeMin !== 'number' ? parseFloat(unsafeMin as string) : unsafeMin\n  let parsedMax =\n    typeof unsafeMax !== 'number' ? parseFloat(unsafeMax as string) : unsafeMax\n\n  let min =\n    unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return [min, max] as const\n}\n\ninNumberRange.autoRemove = (val: any) =>\n  testFalsey(val) || (testFalsey(val[0]) && testFalsey(val[1]))\n\n// Export\n\nexport const filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange,\n}\n\nexport type BuiltInFilterFn = keyof typeof filterFns\n\n// Utils\n\nfunction testFalsey(val: any) {\n  return val === undefined || val === null || val === ''\n}\n", "import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { BuiltInFilterFn, filterFns } from '../filterFns'\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  FilterMeta,\n  FilterFns,\n} from '../types'\nimport { functionalUpdate, isFunction, makeStateUpdater } from '../utils'\n\nexport interface FiltersTableState {\n  columnFilters: ColumnFiltersState\n  globalFilter: any\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport interface ColumnFilter {\n  id: string\n  value: unknown\n}\n\nexport interface ResolvedColumnFilter<TData extends RowData> {\n  id: string\n  resolvedValue: unknown\n  filterFn: FilterFn<TData>\n}\n\nexport interface FilterFn<TData extends RowData> {\n  (\n    row: Row<TData>,\n    columnId: string,\n    filterValue: any,\n    addMeta: (meta: FilterMeta) => void\n  ): boolean\n\n  resolveFilterValue?: TransformFilterValueFn<TData>\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TData>\n}\n\nexport type TransformFilterValueFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => unknown\n\nexport type ColumnFilterAutoRemoveTestFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => boolean\n\nexport type CustomFilterFns<TData extends RowData> = Record<\n  string,\n  FilterFn<TData>\n>\n\nexport type FilterFnOption<TData extends RowData> =\n  | 'auto'\n  | BuiltInFilterFn\n  | keyof FilterFns\n  | FilterFn<TData>\n\nexport interface FiltersColumnDef<TData extends RowData> {\n  filterFn?: FilterFnOption<TData>\n  enableColumnFilter?: boolean\n  enableGlobalFilter?: boolean\n}\n\nexport interface FiltersColumn<TData extends RowData> {\n  getAutoFilterFn: () => FilterFn<TData> | undefined\n  getFilterFn: () => FilterFn<TData> | undefined\n  setFilterValue: (updater: Updater<any>) => void\n  getCanFilter: () => boolean\n  getCanGlobalFilter: () => boolean\n  getFacetedRowModel: () => RowModel<TData>\n  _getFacetedRowModel?: () => RowModel<TData>\n  getIsFiltered: () => boolean\n  getFilterValue: () => unknown\n  getFilterIndex: () => number\n  getFacetedUniqueValues: () => Map<any, number>\n  _getFacetedUniqueValues?: () => Map<any, number>\n  getFacetedMinMaxValues: () => undefined | [number, number]\n  _getFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\nexport interface FiltersRow<TData extends RowData> {\n  columnFilters: Record<string, boolean>\n  columnFiltersMeta: Record<string, FilterMeta>\n}\n\ninterface FiltersOptionsBase<TData extends RowData> {\n  enableFilters?: boolean\n  manualFiltering?: boolean\n  filterFromLeafRows?: boolean\n  maxLeafRowFilterDepth?: number\n  getFilteredRowModel?: (table: Table<any>) => () => RowModel<any>\n\n  // Column\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n  enableColumnFilters?: boolean\n\n  // Global\n  globalFilterFn?: FilterFnOption<TData>\n  onGlobalFilterChange?: OnChangeFn<any>\n  enableGlobalFilter?: boolean\n  getColumnCanGlobalFilter?: (column: Column<TData, unknown>) => boolean\n\n  // Faceting\n  getFacetedRowModel?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => RowModel<TData>\n  getFacetedUniqueValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => Map<any, number>\n  getFacetedMinMaxValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => undefined | [number, number]\n}\n\ntype ResolvedFilterFns = keyof FilterFns extends never\n  ? {\n      filterFns?: Record<string, FilterFn<any>>\n    }\n  : {\n      filterFns: Record<keyof FilterFns, FilterFn<any>>\n    }\n\nexport interface FiltersOptions<TData extends RowData>\n  extends FiltersOptionsBase<TData>,\n    ResolvedFilterFns {}\n\nexport interface FiltersInstance<TData extends RowData> {\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n\n  resetColumnFilters: (defaultState?: boolean) => void\n\n  // Column Filters\n  getPreFilteredRowModel: () => RowModel<TData>\n  getFilteredRowModel: () => RowModel<TData>\n  _getFilteredRowModel?: () => RowModel<TData>\n\n  // Global Filters\n  setGlobalFilter: (updater: Updater<any>) => void\n  resetGlobalFilter: (defaultState?: boolean) => void\n  getGlobalAutoFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFacetedRowModel: () => RowModel<TData>\n  _getGlobalFacetedRowModel?: () => RowModel<TData>\n  getGlobalFacetedUniqueValues: () => Map<any, number>\n  _getGlobalFacetedUniqueValues?: () => Map<any, number>\n  getGlobalFacetedMinMaxValues: () => undefined | [number, number]\n  _getGlobalFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\n//\n\nexport const Filters: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): FiltersColumnDef<TData> => {\n    return {\n      filterFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): FiltersTableState => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersOptions<TData> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      filterFromLeafRows: false,\n      maxLeafRowFilterDepth: 100,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        const value = table\n          .getCoreRowModel()\n          .flatRows[0]?._getAllCellsByColumnId()\n          [column.id]?.getValue()\n\n        return typeof value === 'string' || typeof value === 'number'\n      },\n    } as FiltersOptions<TData>\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData, unknown>,\n    table: Table<TData>\n  ): FiltersColumn<TData> => {\n    return {\n      getAutoFilterFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return filterFns.includesString\n        }\n\n        if (typeof value === 'number') {\n          return filterFns.inNumberRange\n        }\n\n        if (typeof value === 'boolean') {\n          return filterFns.equals\n        }\n\n        if (value !== null && typeof value === 'object') {\n          return filterFns.equals\n        }\n\n        if (Array.isArray(value)) {\n          return filterFns.arrIncludes\n        }\n\n        return filterFns.weakEquals\n      },\n      getFilterFn: () => {\n        return isFunction(column.columnDef.filterFn)\n          ? column.columnDef.filterFn\n          : column.columnDef.filterFn === 'auto'\n          ? column.getAutoFilterFn()\n          // @ts-ignore \n          : table.options.filterFns?.[column.columnDef.filterFn as string] ??\n            filterFns[column.columnDef.filterFn as BuiltInFilterFn]\n      },\n      getCanFilter: () => {\n        return (\n          (column.columnDef.enableColumnFilter ?? true) &&\n          (table.options.enableColumnFilters ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanGlobalFilter: () => {\n        return (\n          (column.columnDef.enableGlobalFilter ?? true) &&\n          (table.options.enableGlobalFilter ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          (table.options.getColumnCanGlobalFilter?.(column) ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getIsFiltered: () => column.getFilterIndex() > -1,\n\n      getFilterValue: () =>\n        table.getState().columnFilters?.find(d => d.id === column.id)?.value,\n\n      getFilterIndex: () =>\n        table.getState().columnFilters?.findIndex(d => d.id === column.id) ??\n        -1,\n\n      setFilterValue: value => {\n        table.setColumnFilters(old => {\n          const filterFn = column.getFilterFn()\n          const previousfilter = old?.find(d => d.id === column.id)\n\n          const newFilter = functionalUpdate(\n            value,\n            previousfilter ? previousfilter.value : undefined\n          )\n\n          //\n          if (\n            shouldAutoRemoveFilter(\n              filterFn as FilterFn<TData>,\n              newFilter,\n              column\n            )\n          ) {\n            return old?.filter(d => d.id !== column.id) ?? []\n          }\n\n          const newFilterObj = { id: column.id, value: newFilter }\n\n          if (previousfilter) {\n            return (\n              old?.map(d => {\n                if (d.id === column.id) {\n                  return newFilterObj\n                }\n                return d\n              }) ?? []\n            )\n          }\n\n          if (old?.length) {\n            return [...old, newFilterObj]\n          }\n\n          return [newFilterObj]\n        })\n      },\n      _getFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, column.id),\n      getFacetedRowModel: () => {\n        if (!column._getFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return column._getFacetedRowModel()\n      },\n      _getFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, column.id),\n      getFacetedUniqueValues: () => {\n        if (!column._getFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return column._getFacetedUniqueValues()\n      },\n      _getFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, column.id),\n      getFacetedMinMaxValues: () => {\n        if (!column._getFacetedMinMaxValues) {\n          return undefined\n        }\n\n        return column._getFacetedMinMaxValues()\n      },\n      // () => [column.getFacetedRowModel()],\n      // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): FiltersRow<TData> => {\n    return {\n      columnFilters: {},\n      columnFiltersMeta: {},\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersInstance<TData> => {\n    return {\n      getGlobalAutoFilterFn: () => {\n        return filterFns.includesString\n      },\n\n      getGlobalFilterFn: () => {\n        const { globalFilterFn: globalFilterFn } = table.options\n\n        return isFunction(globalFilterFn)\n          ? globalFilterFn\n          : globalFilterFn === 'auto'\n          ? table.getGlobalAutoFilterFn()\n          // @ts-ignore\n          : table.options.filterFns?.[globalFilterFn as string] ??\n            filterFns[globalFilterFn as BuiltInFilterFn]\n      },\n\n      setColumnFilters: (updater: Updater<ColumnFiltersState>) => {\n        const leafColumns = table.getAllLeafColumns()\n\n        const updateFn = (old: ColumnFiltersState) => {\n          return functionalUpdate(updater, old)?.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id)\n\n            if (column) {\n              const filterFn = column.getFilterFn()\n\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false\n              }\n            }\n\n            return true\n          })\n        }\n\n        table.options.onColumnFiltersChange?.(updateFn)\n      },\n\n      setGlobalFilter: updater => {\n        table.options.onGlobalFilterChange?.(updater)\n      },\n\n      resetGlobalFilter: defaultState => {\n        table.setGlobalFilter(\n          defaultState ? undefined : table.initialState.globalFilter\n        )\n      },\n\n      resetColumnFilters: defaultState => {\n        table.setColumnFilters(\n          defaultState ? [] : table.initialState?.columnFilters ?? []\n        )\n      },\n\n      getPreFilteredRowModel: () => table.getCoreRowModel(),\n      getFilteredRowModel: () => {\n        if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n          table._getFilteredRowModel = table.options.getFilteredRowModel(table)\n        }\n\n        if (table.options.manualFiltering || !table._getFilteredRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getFilteredRowModel()\n      },\n\n      _getGlobalFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, '__global__'),\n\n      getGlobalFacetedRowModel: () => {\n        if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getGlobalFacetedRowModel()\n      },\n\n      _getGlobalFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, '__global__'),\n      getGlobalFacetedUniqueValues: () => {\n        if (!table._getGlobalFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return table._getGlobalFacetedUniqueValues()\n      },\n\n      _getGlobalFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, '__global__'),\n      getGlobalFacetedMinMaxValues: () => {\n        if (!table._getGlobalFacetedMinMaxValues) {\n          return\n        }\n\n        return table._getGlobalFacetedMinMaxValues()\n      },\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TData extends RowData>(\n  filterFn?: FilterFn<TData>,\n  value?: any,\n  column?: Column<TData, unknown>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n", "import { AggregationFn } from './features/Grouping'\nimport { isNumberArray } from './utils'\n\nconst sum: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId)\n    return sum + (typeof nextValue === 'number' ? nextValue : 0)\n  }, 0)\n}\n\nconst min: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  })\n\n  return min\n}\n\nconst max: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  })\n\n  return max\n}\n\nconst extent: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  })\n\n  return [min, max]\n}\n\nconst mean: AggregationFn<any> = (columnId, leafRows) => {\n  let count = 0\n  let sum = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue<number>(columnId)\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  })\n\n  if (count) return sum / count\n\n  return\n}\n\nconst median: AggregationFn<any> = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return\n  }\n\n  const values = leafRows.map(row => row.getValue(columnId))\n  if (!isNumberArray(values)) {\n    return\n  }\n  if (values.length === 1) {\n    return values[0]\n  }\n\n  const mid = Math.floor(values.length / 2)\n  const nums = values.sort((a, b) => a - b)\n  return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1]! + nums[mid]!) / 2\n}\n\nconst unique: AggregationFn<any> = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values())\n}\n\nconst uniqueCount: AggregationFn<any> = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size\n}\n\nconst count: AggregationFn<any> = (_columnId, leafRows) => {\n  return leafRows.length\n}\n\nexport const aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationFn = keyof typeof aggregationFns\n", "import { RowModel } from '..'\nimport { BuiltInAggregationFn, aggregationFns } from '../aggregationFns'\nimport { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  ColumnDefTemplate,\n  RowData,\n  AggregationFns,\n} from '../types'\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type GroupingState = string[]\n\nexport interface GroupingTableState {\n  grouping: GroupingState\n}\n\nexport type AggregationFn<TData extends RowData> = (\n  columnId: string,\n  leafRows: Row<TData>[],\n  childRows: Row<TData>[]\n) => any\n\nexport type CustomAggregationFns = Record<string, AggregationFn<any>>\n\nexport type AggregationFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof AggregationFns\n  | BuiltInAggregationFn\n  | AggregationFn<TData>\n\nexport interface GroupingColumnDef<TData extends RowData, TValue> {\n  aggregationFn?: AggregationFnOption<TData>\n  aggregatedCell?: ColumnDefTemplate<\n    ReturnType<Cell<TData, TValue>['getContext']>\n  >\n  enableGrouping?: boolean\n  getGroupingValue?: (row: TData) => any\n}\n\nexport interface GroupingColumn<TData extends RowData> {\n  getCanGroup: () => boolean\n  getIsGrouped: () => boolean\n  getGroupedIndex: () => number\n  toggleGrouping: () => void\n  getToggleGroupingHandler: () => () => void\n  getAutoAggregationFn: () => AggregationFn<TData> | undefined\n  getAggregationFn: () => AggregationFn<TData> | undefined\n}\n\nexport interface GroupingRow {\n  groupingColumnId?: string\n  groupingValue?: unknown\n  getIsGrouped: () => boolean\n  getGroupingValue: (columnId: string) => unknown\n  _groupingValuesCache: Record<string, any>\n}\n\nexport interface GroupingCell {\n  getIsGrouped: () => boolean\n  getIsPlaceholder: () => boolean\n  getIsAggregated: () => boolean\n}\n\nexport interface ColumnDefaultOptions {\n  // Column\n  onGroupingChange: OnChangeFn<GroupingState>\n  enableGrouping: boolean\n}\n\ninterface GroupingOptionsBase {\n  manualGrouping?: boolean\n  onGroupingChange?: OnChangeFn<GroupingState>\n  enableGrouping?: boolean\n  getGroupedRowModel?: (table: Table<any>) => () => RowModel<any>\n  groupedColumnMode?: false | 'reorder' | 'remove'\n}\n\ntype ResolvedAggregationFns = keyof AggregationFns extends never\n  ? {\n      aggregationFns?: Record<string, AggregationFn<any>>\n    }\n  : {\n      aggregationFns: Record<keyof AggregationFns, AggregationFn<any>>\n    }\n\nexport interface GroupingOptions\n  extends GroupingOptionsBase,\n    ResolvedAggregationFns {}\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport interface GroupingInstance<TData extends RowData> {\n  setGrouping: (updater: Updater<GroupingState>) => void\n  resetGrouping: (defaultState?: boolean) => void\n  getPreGroupedRowModel: () => RowModel<TData>\n  getGroupedRowModel: () => RowModel<TData>\n  _getGroupedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Grouping: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): GroupingColumnDef<\n    TData,\n    unknown\n  > => {\n    return {\n      aggregatedCell: props => (props.getValue() as any)?.toString?.() ?? null,\n      aggregationFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): GroupingTableState => {\n    return {\n      grouping: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingOptions => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder',\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): GroupingColumn<TData> => {\n    return {\n      toggleGrouping: () => {\n        table.setGrouping(old => {\n          // Find any existing grouping for this column\n          if (old?.includes(column.id)) {\n            return old.filter(d => d !== column.id)\n          }\n\n          return [...(old ?? []), column.id]\n        })\n      },\n\n      getCanGroup: () => {\n        return (\n          column.columnDef.enableGrouping ??\n          true ??\n          table.options.enableGrouping ??\n          true ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsGrouped: () => {\n        return table.getState().grouping?.includes(column.id)\n      },\n\n      getGroupedIndex: () => table.getState().grouping?.indexOf(column.id),\n\n      getToggleGroupingHandler: () => {\n        const canGroup = column.getCanGroup()\n\n        return () => {\n          if (!canGroup) return\n          column.toggleGrouping()\n        }\n      },\n      getAutoAggregationFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'number') {\n          return aggregationFns.sum\n        }\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationFns.extent\n        }\n      },\n      getAggregationFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.aggregationFn)\n          ? column.columnDef.aggregationFn\n          : column.columnDef.aggregationFn === 'auto'\n          ? column.getAutoAggregationFn()\n          : table.options.aggregationFns?.[\n              column.columnDef.aggregationFn as string\n            ] ??\n            aggregationFns[\n              column.columnDef.aggregationFn as BuiltInAggregationFn\n            ]\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingInstance<TData> => {\n    return {\n      setGrouping: updater => table.options.onGroupingChange?.(updater),\n\n      resetGrouping: defaultState => {\n        table.setGrouping(\n          defaultState ? [] : table.initialState?.grouping ?? []\n        )\n      },\n\n      getPreGroupedRowModel: () => table.getFilteredRowModel(),\n      getGroupedRowModel: () => {\n        if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n          table._getGroupedRowModel = table.options.getGroupedRowModel(table)\n        }\n\n        if (table.options.manualGrouping || !table._getGroupedRowModel) {\n          return table.getPreGroupedRowModel()\n        }\n\n        return table._getGroupedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): GroupingRow => {\n    return {\n      getIsGrouped: () => !!row.groupingColumnId,\n      getGroupingValue: columnId => {\n        if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n          return row._groupingValuesCache[columnId]\n        }\n\n        const column = table.getColumn(columnId)\n\n        if (!column?.columnDef.getGroupingValue) {\n          return row.getValue(columnId)\n        }\n\n        row._groupingValuesCache[columnId] = column.columnDef.getGroupingValue(\n          row.original\n        )\n\n        return row._groupingValuesCache[columnId]\n      },\n      _groupingValuesCache: {},\n    }\n  },\n\n  createCell: <TData extends RowData, TValue>(\n    cell: Cell<TData, TValue>,\n    column: Column<TData, TValue>,\n    row: Row<TData>,\n    table: Table<TData>\n  ): GroupingCell => {\n    const getRenderValue = () =>\n      cell.getValue() ?? table.options.renderFallbackValue\n\n    return {\n      getIsGrouped: () =>\n        column.getIsGrouped() && column.id === row.groupingColumnId,\n      getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n      getIsAggregated: () =>\n        !cell.getIsGrouped() &&\n        !cell.getIsPlaceholder() &&\n        !!row.subRows?.length,\n    }\n  },\n}\n\nexport function orderColumns<TData extends RowData>(\n  leafColumns: Column<TData, unknown>[],\n  grouping: string[],\n  groupedColumnMode?: GroupingColumnMode\n) {\n  if (!grouping?.length || !groupedColumnMode) {\n    return leafColumns\n  }\n\n  const nonGroupingColumns = leafColumns.filter(\n    col => !grouping.includes(col.id)\n  )\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns\n  }\n\n  const groupingColumns = grouping\n    .map(g => leafColumns.find(col => col.id === g)!)\n    .filter(Boolean)\n\n  return [...groupingColumns, ...nonGroupingColumns]\n}\n", "import { makeStateUpdater, memo } from '../utils'\n\nimport { Table, OnChangeFn, Updater, Column, RowData } from '../types'\n\nimport { orderColumns } from './Grouping'\nimport { TableFeature } from '../core/table'\n\nexport interface ColumnOrderTableState {\n  columnOrder: ColumnOrderState\n}\n\nexport type ColumnOrderState = string[]\n\nexport interface ColumnOrderOptions {\n  onColumnOrderChange?: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderDefaultOptions {\n  onColumnOrderChange: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderInstance<TData extends RowData> {\n  setColumnOrder: (updater: Updater<ColumnOrderState>) => void\n  resetColumnOrder: (defaultState?: boolean) => void\n  _getOrderColumnsFn: () => (\n    columns: Column<TData, unknown>[]\n  ) => Column<TData, unknown>[]\n}\n\n//\n\nexport const Ordering: TableFeature = {\n  getInitialState: (state): ColumnOrderTableState => {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderDefaultOptions => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderInstance<TData> => {\n    return {\n      setColumnOrder: updater => table.options.onColumnOrderChange?.(updater),\n      resetColumnOrder: defaultState => {\n        table.setColumnOrder(\n          defaultState ? [] : table.initialState.columnOrder ?? []\n        )\n      },\n      _getOrderColumnsFn: memo(\n        () => [\n          table.getState().columnOrder,\n          table.getState().grouping,\n          table.options.groupedColumnMode,\n        ],\n        (columnOrder, grouping, groupedColumnMode) => columns => {\n          // Sort grouped columns to the start of the column list\n          // before the headers are built\n          let orderedColumns: Column<TData, unknown>[] = []\n\n          // If there is no order, return the normal columns\n          if (!columnOrder?.length) {\n            orderedColumns = columns\n          } else {\n            const columnOrderCopy = [...columnOrder]\n\n            // If there is an order, make a copy of the columns\n            const columnsCopy = [...columns]\n\n            // And make a new ordered array of the columns\n\n            // Loop over the columns and place them in order into the new array\n            while (columnsCopy.length && columnOrderCopy.length) {\n              const targetColumnId = columnOrderCopy.shift()\n              const foundIndex = columnsCopy.findIndex(\n                d => d.id === targetColumnId\n              )\n              if (foundIndex > -1) {\n                orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]!)\n              }\n            }\n\n            // If there are any columns left, add them to the end\n            orderedColumns = [...orderedColumns, ...columnsCopy]\n          }\n\n          return orderColumns(orderedColumns, grouping, groupedColumnMode)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn',\n          // debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n    }\n  },\n}\n", "import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, RowModel, Updater, RowData } from '../types'\nimport { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nexport interface PaginationState {\n  pageIndex: number\n  pageSize: number\n}\n\nexport interface PaginationTableState {\n  pagination: PaginationState\n}\n\nexport interface PaginationInitialTableState {\n  pagination?: Partial<PaginationState>\n}\n\nexport interface PaginationOptions {\n  pageCount?: number\n  manualPagination?: boolean\n  onPaginationChange?: OnChangeFn<PaginationState>\n  autoResetPageIndex?: boolean\n  getPaginationRowModel?: (table: Table<any>) => () => RowModel<any>\n}\n\nexport interface PaginationDefaultOptions {\n  onPaginationChange: OnChangeFn<PaginationState>\n}\n\nexport interface PaginationInstance<TData extends RowData> {\n  _autoResetPageIndex: () => void\n  setPagination: (updater: Updater<PaginationState>) => void\n  resetPagination: (defaultState?: boolean) => void\n  setPageIndex: (updater: Updater<number>) => void\n  resetPageIndex: (defaultState?: boolean) => void\n  setPageSize: (updater: Updater<number>) => void\n  resetPageSize: (defaultState?: boolean) => void\n  setPageCount: (updater: Updater<number>) => void\n  getPageOptions: () => number[]\n  getCanPreviousPage: () => boolean\n  getCanNextPage: () => boolean\n  previousPage: () => void\n  nextPage: () => void\n  getPrePaginationRowModel: () => RowModel<TData>\n  getPaginationRowModel: () => RowModel<TData>\n  _getPaginationRowModel?: () => RowModel<TData>\n  getPageCount: () => number\n}\n\n//\n\nconst defaultPageIndex = 0\nconst defaultPageSize = 10\n\nconst getDefaultPaginationState = (): PaginationState => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize,\n})\n\nexport const Pagination: TableFeature = {\n  getInitialState: (state): PaginationTableState => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...state?.pagination,\n      },\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationDefaultOptions => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetPageIndex: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetPageIndex ??\n          !table.options.manualPagination\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetPageIndex()\n            queued = false\n          })\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater: Updater<PaginationState> = old => {\n          let newState = functionalUpdate(updater, old)\n\n          return newState\n        }\n\n        return table.options.onPaginationChange?.(safeUpdater)\n      },\n      resetPagination: defaultState => {\n        table.setPagination(\n          defaultState\n            ? getDefaultPaginationState()\n            : table.initialState.pagination ?? getDefaultPaginationState()\n        )\n      },\n      setPageIndex: updater => {\n        table.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex)\n\n          const maxPageIndex =\n            typeof table.options.pageCount === 'undefined' ||\n            table.options.pageCount === -1\n              ? Number.MAX_SAFE_INTEGER\n              : table.options.pageCount - 1\n\n          pageIndex = Math.max(0, Math.min(pageIndex, maxPageIndex))\n\n          return {\n            ...old,\n            pageIndex,\n          }\n        })\n      },\n      resetPageIndex: defaultState => {\n        table.setPageIndex(\n          defaultState\n            ? defaultPageIndex\n            : table.initialState?.pagination?.pageIndex ?? defaultPageIndex\n        )\n      },\n      resetPageSize: defaultState => {\n        table.setPageSize(\n          defaultState\n            ? defaultPageSize\n            : table.initialState?.pagination?.pageSize ?? defaultPageSize\n        )\n      },\n      setPageSize: updater => {\n        table.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))\n          const topRowIndex = old.pageSize * old.pageIndex!\n          const pageIndex = Math.floor(topRowIndex / pageSize)\n\n          return {\n            ...old,\n            pageIndex,\n            pageSize,\n          }\n        })\n      },\n      setPageCount: updater =>\n        table.setPagination(old => {\n          let newPageCount = functionalUpdate(\n            updater,\n            table.options.pageCount ?? -1\n          )\n\n          if (typeof newPageCount === 'number') {\n            newPageCount = Math.max(-1, newPageCount)\n          }\n\n          return {\n            ...old,\n            pageCount: newPageCount,\n          }\n        }),\n\n      getPageOptions: memo(\n        () => [table.getPageCount()],\n        pageCount => {\n          let pageOptions: number[] = []\n          if (pageCount && pageCount > 0) {\n            pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)\n          }\n          return pageOptions\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getCanPreviousPage: () => table.getState().pagination.pageIndex > 0,\n\n      getCanNextPage: () => {\n        const { pageIndex } = table.getState().pagination\n\n        const pageCount = table.getPageCount()\n\n        if (pageCount === -1) {\n          return true\n        }\n\n        if (pageCount === 0) {\n          return false\n        }\n\n        return pageIndex < pageCount - 1\n      },\n\n      previousPage: () => {\n        return table.setPageIndex(old => old - 1)\n      },\n\n      nextPage: () => {\n        return table.setPageIndex(old => {\n          return old + 1\n        })\n      },\n\n      getPrePaginationRowModel: () => table.getExpandedRowModel(),\n      getPaginationRowModel: () => {\n        if (\n          !table._getPaginationRowModel &&\n          table.options.getPaginationRowModel\n        ) {\n          table._getPaginationRowModel =\n            table.options.getPaginationRowModel(table)\n        }\n\n        if (table.options.manualPagination || !table._getPaginationRowModel) {\n          return table.getPrePaginationRowModel()\n        }\n\n        return table._getPaginationRowModel()\n      },\n\n      getPageCount: () => {\n        return (\n          table.options.pageCount ??\n          Math.ceil(\n            table.getPrePaginationRowModel().rows.length /\n              table.getState().pagination.pageSize\n          )\n        )\n      },\n    }\n  },\n}\n", "import { TableFeature } from '../core/table'\nimport {\n  OnChangeFn,\n  Updater,\n  Table,\n  Column,\n  Row,\n  Cell,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type ColumnPinningPosition = false | 'left' | 'right'\n\nexport interface ColumnPinningState {\n  left?: string[]\n  right?: string[]\n}\n\nexport interface ColumnPinningTableState {\n  columnPinning: ColumnPinningState\n}\n\nexport interface ColumnPinningOptions {\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningDefaultOptions {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport interface ColumnPinningColumnDef {\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningColumn {\n  getCanPin: () => boolean\n  getPinnedIndex: () => number\n  getIsPinned: () => ColumnPinningPosition\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport interface ColumnPinningRow<TData extends RowData> {\n  getLeftVisibleCells: () => Cell<TData, unknown>[]\n  getCenterVisibleCells: () => Cell<TData, unknown>[]\n  getRightVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface ColumnPinningInstance<TData extends RowData> {\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n  resetColumnPinning: (defaultState?: boolean) => void\n  getIsSomeColumnsPinned: (position?: ColumnPinningPosition) => boolean\n  getLeftLeafColumns: () => Column<TData, unknown>[]\n  getRightLeafColumns: () => Column<TData, unknown>[]\n  getCenterLeafColumns: () => Column<TData, unknown>[]\n}\n\n//\n\nconst getDefaultPinningState = (): ColumnPinningState => ({\n  left: [],\n  right: [],\n})\n\nexport const Pinning: TableFeature = {\n  getInitialState: (state): ColumnPinningTableState => {\n    return {\n      columnPinning: getDefaultPinningState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnPinningColumn => {\n    return {\n      pin: position => {\n        const columnIds = column\n          .getLeafColumns()\n          .map(d => d.id)\n          .filter(Boolean) as string[]\n\n        table.setColumnPinning(old => {\n          if (position === 'right') {\n            return {\n              left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              right: [\n                ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n            }\n          }\n\n          if (position === 'left') {\n            return {\n              left: [\n                ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n              right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n            }\n          }\n\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        })\n      },\n\n      getCanPin: () => {\n        const leafColumns = column.getLeafColumns()\n\n        return leafColumns.some(\n          d =>\n            (d.columnDef.enablePinning ?? true) &&\n            (table.options.enablePinning ?? true)\n        )\n      },\n\n      getIsPinned: () => {\n        const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n        const { left, right } = table.getState().columnPinning\n\n        const isLeft = leafColumnIds.some(d => left?.includes(d))\n        const isRight = leafColumnIds.some(d => right?.includes(d))\n\n        return isLeft ? 'left' : isRight ? 'right' : false\n      },\n\n      getPinnedIndex: () => {\n        const position = column.getIsPinned()\n\n        return position\n          ? table.getState().columnPinning?.[position]?.indexOf(column.id) ?? -1\n          : 0\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ColumnPinningRow<TData> => {\n    return {\n      getCenterVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allCells, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allCells.filter(d => !leftAndRight.includes(d.column.id))\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'row.getCenterVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getLeftVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          ,\n        ],\n        (allCells, left) => {\n          const cells = (left ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'left' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getRightVisibleCells: memo(\n        () => [row._getAllVisibleCells(), table.getState().columnPinning.right],\n        (allCells, right) => {\n          const cells = (right ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'right' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningInstance<TData> => {\n    return {\n      setColumnPinning: updater =>\n        table.options.onColumnPinningChange?.(updater),\n\n      resetColumnPinning: defaultState =>\n        table.setColumnPinning(\n          defaultState\n            ? getDefaultPinningState()\n            : table.initialState?.columnPinning ?? getDefaultPinningState()\n        ),\n\n      getIsSomeColumnsPinned: position => {\n        const pinningState = table.getState().columnPinning\n\n        if (!position) {\n          return Boolean(\n            pinningState.left?.length || pinningState.right?.length\n          )\n        }\n        return Boolean(pinningState[position]?.length)\n      },\n\n      getLeftLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.left],\n        (allColumns, left) => {\n          return (left ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getRightLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.right],\n        (allColumns, right) => {\n          return (right ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getCenterLeafColumns: memo(\n        () => [\n          table.getAllLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allColumns.filter(d => !leftAndRight.includes(d.id))\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n    }\n  },\n}\n", "import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, RowModel, Updater, RowData } from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type RowSelectionState = Record<string, boolean>\n\nexport interface RowSelectionTableState {\n  rowSelection: RowSelectionState\n}\n\nexport interface RowSelectionOptions<TData extends RowData> {\n  enableRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableMultiRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableSubRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  onRowSelectionChange?: OnChangeFn<RowSelectionState>\n  // enableGroupingRowSelection?:\n  //   | boolean\n  //   | ((\n  //       row: Row<TData>\n  //     ) => boolean)\n  // isAdditiveSelectEvent?: (e: unknown) => boolean\n  // isInclusiveSelectEvent?: (e: unknown) => boolean\n  // selectRowsFn?: (\n  //   table: Table<TData>,\n  //   rowModel: RowModel<TData>\n  // ) => RowModel<TData>\n}\n\nexport interface RowSelectionRow {\n  getIsSelected: () => boolean\n  getIsSomeSelected: () => boolean\n  getIsAllSubRowsSelected: () => boolean\n  getCanSelect: () => boolean\n  getCanMultiSelect: () => boolean\n  getCanSelectSubRows: () => boolean\n  toggleSelected: (value?: boolean) => void\n  getToggleSelectedHandler: () => (event: unknown) => void\n}\n\nexport interface RowSelectionInstance<TData extends RowData> {\n  getToggleAllRowsSelectedHandler: () => (event: unknown) => void\n  getToggleAllPageRowsSelectedHandler: () => (event: unknown) => void\n  setRowSelection: (updater: Updater<RowSelectionState>) => void\n  resetRowSelection: (defaultState?: boolean) => void\n  getIsAllRowsSelected: () => boolean\n  getIsAllPageRowsSelected: () => boolean\n  getIsSomeRowsSelected: () => boolean\n  getIsSomePageRowsSelected: () => boolean\n  toggleAllRowsSelected: (value?: boolean) => void\n  toggleAllPageRowsSelected: (value?: boolean) => void\n  getPreSelectedRowModel: () => RowModel<TData>\n  getSelectedRowModel: () => RowModel<TData>\n  getFilteredSelectedRowModel: () => RowModel<TData>\n  getGroupedSelectedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const RowSelection: TableFeature = {\n  getInitialState: (state): RowSelectionTableState => {\n    return {\n      rowSelection: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionOptions<TData> => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true,\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionInstance<TData> => {\n    return {\n      setRowSelection: updater => table.options.onRowSelectionChange?.(updater),\n      resetRowSelection: defaultState =>\n        table.setRowSelection(\n          defaultState ? {} : table.initialState.rowSelection ?? {}\n        ),\n      toggleAllRowsSelected: value => {\n        table.setRowSelection(old => {\n          value =\n            typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected()\n\n          const rowSelection = { ...old }\n\n          const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows\n\n          // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n          if (value) {\n            preGroupedFlatRows.forEach(row => {\n              if (!row.getCanSelect()) {\n                return\n              }\n              rowSelection[row.id] = true\n            })\n          } else {\n            preGroupedFlatRows.forEach(row => {\n              delete rowSelection[row.id]\n            })\n          }\n\n          return rowSelection\n        })\n      },\n      toggleAllPageRowsSelected: value =>\n        table.setRowSelection(old => {\n          const resolvedValue =\n            typeof value !== 'undefined'\n              ? value\n              : !table.getIsAllPageRowsSelected()\n\n          const rowSelection: RowSelectionState = { ...old }\n\n          table.getRowModel().rows.forEach(row => {\n            mutateRowIsSelected(rowSelection, row.id, resolvedValue, table)\n          })\n\n          return rowSelection\n        }),\n\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = table\n\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n\n      //   let include = false\n      //   const selectedRowIds = {}\n\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n\n      //   table.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n\n      //   table.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: () => table.getCoreRowModel(),\n      getSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getCoreRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getFilteredSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getFilteredRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getFilteredSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getGroupedSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getSortedRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getGroupedSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      ///\n\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = table.getRow(rowId)\n\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n\n      //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n      //     return table.options.enableGroupingRowSelection(row)\n      //   }\n\n      //   return table.options.enableGroupingRowSelection ?? false\n      // },\n\n      getIsAllRowsSelected: () => {\n        const preGroupedFlatRows = table.getFilteredRowModel().flatRows\n        const { rowSelection } = table.getState()\n\n        let isAllRowsSelected = Boolean(\n          preGroupedFlatRows.length && Object.keys(rowSelection).length\n        )\n\n        if (isAllRowsSelected) {\n          if (\n            preGroupedFlatRows.some(\n              row => row.getCanSelect() && !rowSelection[row.id]\n            )\n          ) {\n            isAllRowsSelected = false\n          }\n        }\n\n        return isAllRowsSelected\n      },\n\n      getIsAllPageRowsSelected: () => {\n        const paginationFlatRows = table\n          .getPaginationRowModel()\n          .flatRows.filter(row => row.getCanSelect())\n        const { rowSelection } = table.getState()\n\n        let isAllPageRowsSelected = !!paginationFlatRows.length\n\n        if (\n          isAllPageRowsSelected &&\n          paginationFlatRows.some(row => !rowSelection[row.id])\n        ) {\n          isAllPageRowsSelected = false\n        }\n\n        return isAllPageRowsSelected\n      },\n\n      getIsSomeRowsSelected: () => {\n        const totalSelected = Object.keys(\n          table.getState().rowSelection ?? {}\n        ).length\n        return (\n          totalSelected > 0 &&\n          totalSelected < table.getFilteredRowModel().flatRows.length\n        )\n      },\n\n      getIsSomePageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows\n        return table.getIsAllPageRowsSelected()\n          ? false\n          : paginationFlatRows\n              .filter(row => row.getCanSelect())\n              .some(d => d.getIsSelected() || d.getIsSomeSelected())\n      },\n\n      getToggleAllRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n\n      getToggleAllPageRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllPageRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): RowSelectionRow => {\n    return {\n      toggleSelected: value => {\n        const isSelected = row.getIsSelected()\n\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !isSelected\n\n          if (isSelected === value) {\n            return old\n          }\n\n          const selectedRowIds = { ...old }\n\n          mutateRowIsSelected(selectedRowIds, row.id, value, table)\n\n          return selectedRowIds\n        })\n      },\n      getIsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isRowSelected(row, rowSelection)\n      },\n\n      getIsSomeSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'some'\n      },\n\n      getIsAllSubRowsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'all'\n      },\n\n      getCanSelect: () => {\n        if (typeof table.options.enableRowSelection === 'function') {\n          return table.options.enableRowSelection(row)\n        }\n\n        return table.options.enableRowSelection ?? true\n      },\n\n      getCanSelectSubRows: () => {\n        if (typeof table.options.enableSubRowSelection === 'function') {\n          return table.options.enableSubRowSelection(row)\n        }\n\n        return table.options.enableSubRowSelection ?? true\n      },\n\n      getCanMultiSelect: () => {\n        if (typeof table.options.enableMultiRowSelection === 'function') {\n          return table.options.enableMultiRowSelection(row)\n        }\n\n        return table.options.enableMultiRowSelection ?? true\n      },\n      getToggleSelectedHandler: () => {\n        const canSelect = row.getCanSelect()\n\n        return (e: unknown) => {\n          if (!canSelect) return\n          row.toggleSelected(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n\nconst mutateRowIsSelected = <TData extends RowData>(\n  selectedRowIds: Record<string, boolean>,\n  id: string,\n  value: boolean,\n  table: Table<TData>\n) => {\n  const row = table.getRow(id)\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key])\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true\n    }\n  } else {\n    delete selectedRowIds[id]\n  }\n  // }\n\n  if (row.subRows?.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row =>\n      mutateRowIsSelected(selectedRowIds, row.id, value, table)\n    )\n  }\n}\n\nexport function selectRowsFn<TData extends RowData>(\n  table: Table<TData>,\n  rowModel: RowModel<TData>\n): RowModel<TData> {\n  const rowSelection = table.getState().rowSelection\n\n  const newSelectedFlatRows: Row<TData>[] = []\n  const newSelectedRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseRows = (rows: Row<TData>[], depth = 0): Row<TData>[] => {\n    return rows\n      .map(row => {\n        const isSelected = isRowSelected(row, rowSelection)\n\n        if (isSelected) {\n          newSelectedFlatRows.push(row)\n          newSelectedRowsById[row.id] = row\n        }\n\n        if (row.subRows?.length) {\n          row = {\n            ...row,\n            subRows: recurseRows(row.subRows, depth + 1),\n          }\n        }\n\n        if (isSelected) {\n          return row\n        }\n      })\n      .filter(Boolean) as Row<TData>[]\n  }\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById,\n  }\n}\n\nexport function isRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>\n): boolean {\n  return selection[row.id] ?? false\n}\n\nexport function isSubRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>,\n  table: Table<TData>\n): boolean | 'some' | 'all' {\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n\n    return allChildrenSelected ? 'all' : someSelected ? 'some' : false\n  }\n\n  return false\n}\n", "import { SortingFn } from './features/Sorting'\n\nexport const reSplitAlphaNumeric = /([0-9]+)/gm\n\nconst alphanumeric: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\nconst alphanumericCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\nconst datetime: SortingFn<any> = (rowA, rowB, columnId) => {\n  const a = rowA.getValue<Date>(columnId)\n  const b = rowB.getValue<Date>(columnId)\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0\n}\n\nconst basic: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId))\n}\n\n// Utils\n\nfunction compareBasic(a: any, b: any) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction toString(a: any) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr: string, bStr: string) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift()!\n    const bb = b.shift()!\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0]!)) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1]!)) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\n// Exports\n\nexport const sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic,\n}\n\nexport type BuiltInSortingFn = keyof typeof sortingFns\n", "import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport {\n  BuiltInSortingFn,\n  reSplitAlphaNumeric,\n  sortingFns,\n} from '../sortingFns'\n\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  SortingFns,\n} from '../types'\n\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type SortDirection = 'asc' | 'desc'\n\nexport interface ColumnSort {\n  id: string\n  desc: boolean\n}\n\nexport type SortingState = ColumnSort[]\n\nexport interface SortingTableState {\n  sorting: SortingState\n}\n\nexport interface SortingFn<TData extends RowData> {\n  (rowA: Row<TData>, rowB: Row<TData>, columnId: string): number\n}\n\nexport type CustomSortingFns<TData extends RowData> = Record<\n  string,\n  SortingFn<TData>\n>\n\nexport type SortingFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof SortingFns\n  | BuiltInSortingFn\n  | SortingFn<TData>\n\nexport interface SortingColumnDef<TData extends RowData> {\n  sortingFn?: SortingFnOption<TData>\n  sortDescFirst?: boolean\n  enableSorting?: boolean\n  enableMultiSort?: boolean\n  invertSorting?: boolean\n  sortUndefined?: false | -1 | 1\n}\n\nexport interface SortingColumn<TData extends RowData> {\n  getAutoSortingFn: () => SortingFn<TData>\n  getAutoSortDir: () => SortDirection\n  getSortingFn: () => SortingFn<TData>\n  getFirstSortDir: () => SortDirection\n  getNextSortingOrder: () => SortDirection | false\n  getCanSort: () => boolean\n  getCanMultiSort: () => boolean\n  getSortIndex: () => number\n  getIsSorted: () => false | SortDirection\n  clearSorting: () => void\n  toggleSorting: (desc?: boolean, isMulti?: boolean) => void\n  getToggleSortingHandler: () => undefined | ((event: unknown) => void)\n}\n\ninterface SortingOptionsBase {\n  manualSorting?: boolean\n  onSortingChange?: OnChangeFn<SortingState>\n  enableSorting?: boolean\n  enableSortingRemoval?: boolean\n  enableMultiRemove?: boolean\n  enableMultiSort?: boolean\n  sortDescFirst?: boolean\n  getSortedRowModel?: (table: Table<any>) => () => RowModel<any>\n  maxMultiSortColCount?: number\n  isMultiSortEvent?: (e: unknown) => boolean\n}\n\ntype ResolvedSortingFns = keyof SortingFns extends never\n  ? {\n      sortingFns?: Record<string, SortingFn<any>>\n    }\n  : {\n      sortingFns: Record<keyof SortingFns, SortingFn<any>>\n    }\n\nexport interface SortingOptions<TData extends RowData>\n  extends SortingOptionsBase,\n    ResolvedSortingFns {}\n\nexport interface SortingInstance<TData extends RowData> {\n  setSorting: (updater: Updater<SortingState>) => void\n  resetSorting: (defaultState?: boolean) => void\n  getPreSortedRowModel: () => RowModel<TData>\n  getSortedRowModel: () => RowModel<TData>\n  _getSortedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Sorting: TableFeature = {\n  getInitialState: (state): SortingTableState => {\n    return {\n      sorting: [],\n      ...state,\n    }\n  },\n\n  getDefaultColumnDef: <TData extends RowData>(): SortingColumnDef<TData> => {\n    return {\n      sortingFn: 'auto',\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingOptions<TData> => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: (e: unknown) => {\n        return (e as MouseEvent).shiftKey\n      },\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): SortingColumn<TData> => {\n    return {\n      getAutoSortingFn: () => {\n        const firstRows = table.getFilteredRowModel().flatRows.slice(10)\n\n        let isString = false\n\n        for (const row of firstRows) {\n          const value = row?.getValue(column.id)\n\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return sortingFns.datetime\n          }\n\n          if (typeof value === 'string') {\n            isString = true\n\n            if (value.split(reSplitAlphaNumeric).length > 1) {\n              return sortingFns.alphanumeric\n            }\n          }\n        }\n\n        if (isString) {\n          return sortingFns.text\n        }\n\n        return sortingFns.basic\n      },\n      getAutoSortDir: () => {\n        const firstRow = table.getFilteredRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return 'asc'\n        }\n\n        return 'desc'\n      },\n      getSortingFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.sortingFn)\n          ? column.columnDef.sortingFn\n          : column.columnDef.sortingFn === 'auto'\n          ? column.getAutoSortingFn()\n          : table.options.sortingFns?.[column.columnDef.sortingFn as string] ??\n            sortingFns[column.columnDef.sortingFn as BuiltInSortingFn]\n      },\n      toggleSorting: (desc, multi) => {\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n\n        // this needs to be outside of table.setSorting to be in sync with rerender\n        const nextSortingOrder = column.getNextSortingOrder()\n        const hasManualValue = typeof desc !== 'undefined' && desc !== null\n\n        table.setSorting(old => {\n          // Find any existing sorting for this column\n          const existingSorting = old?.find(d => d.id === column.id)\n          const existingIndex = old?.findIndex(d => d.id === column.id)\n\n          let newSorting: SortingState = []\n\n          // What should we do with this sort action?\n          let sortAction: 'add' | 'remove' | 'toggle' | 'replace'\n          let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc'\n\n          // Multi-mode\n          if (old?.length && column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'add'\n            }\n          } else {\n            // Normal mode\n            if (old?.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace'\n            } else if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'replace'\n            }\n          }\n\n          // Handle toggle states that will remove the sorting\n          if (sortAction === 'toggle') {\n            // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n            if (!hasManualValue) {\n              // Is our intention to remove?\n              if (!nextSortingOrder) {\n                sortAction = 'remove'\n              }\n            }\n          }\n\n          if (sortAction === 'add') {\n            newSorting = [\n              ...old,\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n            // Take latest n columns\n            newSorting.splice(\n              0,\n              newSorting.length -\n                (table.options.maxMultiSortColCount ?? Number.MAX_SAFE_INTEGER)\n            )\n          } else if (sortAction === 'toggle') {\n            // This flips (or sets) the\n            newSorting = old.map(d => {\n              if (d.id === column.id) {\n                return {\n                  ...d,\n                  desc: nextDesc,\n                }\n              }\n              return d\n            })\n          } else if (sortAction === 'remove') {\n            newSorting = old.filter(d => d.id !== column.id)\n          } else {\n            newSorting = [\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n          }\n\n          return newSorting\n        })\n      },\n\n      getFirstSortDir: () => {\n        const sortDescFirst =\n          column.columnDef.sortDescFirst ??\n          table.options.sortDescFirst ??\n          column.getAutoSortDir() === 'desc'\n        return sortDescFirst ? 'desc' : 'asc'\n      },\n\n      getNextSortingOrder: (multi?: boolean) => {\n        const firstSortDirection = column.getFirstSortDir()\n        const isSorted = column.getIsSorted()\n\n        if (!isSorted) {\n          return firstSortDirection\n        }\n\n        if (\n          isSorted !== firstSortDirection &&\n          (table.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general\n          (multi ? table.options.enableMultiRemove ?? true : true) // If multi, don't allow if enableMultiRemove))\n        ) {\n          return false\n        }\n        return isSorted === 'desc' ? 'asc' : 'desc'\n      },\n\n      getCanSort: () => {\n        return (\n          (column.columnDef.enableSorting ?? true) &&\n          (table.options.enableSorting ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanMultiSort: () => {\n        return (\n          column.columnDef.enableMultiSort ??\n          table.options.enableMultiSort ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsSorted: () => {\n        const columnSort = table\n          .getState()\n          .sorting?.find(d => d.id === column.id)\n\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'\n      },\n\n      getSortIndex: () =>\n        table.getState().sorting?.findIndex(d => d.id === column.id) ?? -1,\n\n      clearSorting: () => {\n        //clear sorting for just 1 column\n        table.setSorting(old =>\n          old?.length ? old.filter(d => d.id !== column.id) : []\n        )\n      },\n\n      getToggleSortingHandler: () => {\n        const canSort = column.getCanSort()\n\n        return (e: unknown) => {\n          if (!canSort) return\n          ;(e as any).persist?.()\n          column.toggleSorting?.(\n            undefined,\n            column.getCanMultiSort()\n              ? table.options.isMultiSortEvent?.(e)\n              : false\n          )\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingInstance<TData> => {\n    return {\n      setSorting: updater => table.options.onSortingChange?.(updater),\n      resetSorting: defaultState => {\n        table.setSorting(defaultState ? [] : table.initialState?.sorting ?? [])\n      },\n      getPreSortedRowModel: () => table.getGroupedRowModel(),\n      getSortedRowModel: () => {\n        if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n          table._getSortedRowModel = table.options.getSortedRowModel(table)\n        }\n\n        if (table.options.manualSorting || !table._getSortedRowModel) {\n          return table.getPreSortedRowModel()\n        }\n\n        return table._getSortedRowModel()\n      },\n    }\n  },\n}\n", "import { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Updater,\n  Row,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type VisibilityState = Record<string, boolean>\n\nexport interface VisibilityTableState {\n  columnVisibility: VisibilityState\n}\n\nexport interface VisibilityOptions {\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n  enableHiding?: boolean\n}\n\nexport interface VisibilityDefaultOptions {\n  onColumnVisibilityChange: OnChangeFn<VisibilityState>\n}\n\nexport interface VisibilityInstance<TData extends RowData> {\n  getVisibleFlatColumns: () => Column<TData, unknown>[]\n  getVisibleLeafColumns: () => Column<TData, unknown>[]\n  getLeftVisibleLeafColumns: () => Column<TData, unknown>[]\n  getRightVisibleLeafColumns: () => Column<TData, unknown>[]\n  getCenterVisibleLeafColumns: () => Column<TData, unknown>[]\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  resetColumnVisibility: (defaultState?: boolean) => void\n  toggleAllColumnsVisible: (value?: boolean) => void\n  getIsAllColumnsVisible: () => boolean\n  getIsSomeColumnsVisible: () => boolean\n  getToggleAllColumnsVisibilityHandler: () => (event: unknown) => void\n}\n\nexport interface VisibilityColumnDef {\n  enableHiding?: boolean\n}\n\nexport interface VisibilityRow<TData extends RowData> {\n  _getAllVisibleCells: () => Cell<TData, unknown>[]\n  getVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface VisibilityColumn {\n  getCanHide: () => boolean\n  getIsVisible: () => boolean\n  toggleVisibility: (value?: boolean) => void\n  getToggleVisibilityHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const Visibility: TableFeature = {\n  getInitialState: (state): VisibilityTableState => {\n    return {\n      columnVisibility: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityDefaultOptions => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): VisibilityColumn => {\n    return {\n      toggleVisibility: value => {\n        if (column.getCanHide()) {\n          table.setColumnVisibility(old => ({\n            ...old,\n            [column.id]: value ?? !column.getIsVisible(),\n          }))\n        }\n      },\n      getIsVisible: () => {\n        return table.getState().columnVisibility?.[column.id] ?? true\n      },\n\n      getCanHide: () => {\n        return (\n          (column.columnDef.enableHiding ?? true) &&\n          (table.options.enableHiding ?? true)\n        )\n      },\n      getToggleVisibilityHandler: () => {\n        return (e: unknown) => {\n          column.toggleVisibility?.(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): VisibilityRow<TData> => {\n    return {\n      _getAllVisibleCells: memo(\n        () => [row.getAllCells(), table.getState().columnVisibility],\n        cells => {\n          return cells.filter(cell => cell.column.getIsVisible())\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getVisibleCells: memo(\n        () => [\n          row.getLeftVisibleCells(),\n          row.getCenterVisibleCells(),\n          row.getRightVisibleCells(),\n        ],\n        (left, center, right) => [...left, ...center, ...right],\n        {\n          key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityInstance<TData> => {\n    const makeVisibleColumnsMethod = (\n      key: string,\n      getColumns: () => Column<TData, unknown>[]\n    ): (() => Column<TData, unknown>[]) => {\n      return memo(\n        () => [\n          getColumns(),\n          getColumns()\n            .filter(d => d.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        columns => {\n          return columns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key,\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      )\n    }\n\n    return {\n      getVisibleFlatColumns: makeVisibleColumnsMethod(\n        'getVisibleFlatColumns',\n        () => table.getAllFlatColumns()\n      ),\n      getVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getVisibleLeafColumns',\n        () => table.getAllLeafColumns()\n      ),\n      getLeftVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getLeftVisibleLeafColumns',\n        () => table.getLeftLeafColumns()\n      ),\n      getRightVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getRightVisibleLeafColumns',\n        () => table.getRightLeafColumns()\n      ),\n      getCenterVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getCenterVisibleLeafColumns',\n        () => table.getCenterLeafColumns()\n      ),\n\n      setColumnVisibility: updater =>\n        table.options.onColumnVisibilityChange?.(updater),\n\n      resetColumnVisibility: defaultState => {\n        table.setColumnVisibility(\n          defaultState ? {} : table.initialState.columnVisibility ?? {}\n        )\n      },\n\n      toggleAllColumnsVisible: value => {\n        value = value ?? !table.getIsAllColumnsVisible()\n\n        table.setColumnVisibility(\n          table.getAllLeafColumns().reduce(\n            (obj, column) => ({\n              ...obj,\n              [column.id]: !value ? !column.getCanHide?.() : value,\n            }),\n            {}\n          )\n        )\n      },\n\n      getIsAllColumnsVisible: () =>\n        !table.getAllLeafColumns().some(column => !column.getIsVisible?.()),\n\n      getIsSomeColumnsVisible: () =>\n        table.getAllLeafColumns().some(column => column.getIsVisible?.()),\n\n      getToggleAllColumnsVisibilityHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllColumnsVisible(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n", "import { functionalUpdate, memo, RequiredKeys } from '../utils'\n\nimport {\n  Updater,\n  TableOptionsResolved,\n  TableState,\n  Table,\n  InitialTableState,\n  Row,\n  Column,\n  RowModel,\n  ColumnDef,\n  TableOptions,\n  RowData,\n  TableMeta,\n  ColumnDefResolved,\n  GroupColumnDef,\n} from '../types'\n\n//\nimport { createColumn } from './column'\nimport { Headers } from './headers'\n//\n\nimport { ColumnSizing } from '../features/ColumnSizing'\nimport { Expanding } from '../features/Expanding'\nimport { Filters } from '../features/Filters'\nimport { Grouping } from '../features/Grouping'\nimport { Ordering } from '../features/Ordering'\nimport { Pagination } from '../features/Pagination'\nimport { Pinning } from '../features/Pinning'\nimport { RowSelection } from '../features/RowSelection'\nimport { Sorting } from '../features/Sorting'\nimport { Visibility } from '../features/Visibility'\n\nexport interface TableFeature {\n  getDefaultOptions?: (table: any) => any\n  getInitialState?: (initialState?: InitialTableState) => any\n  createTable?: (table: any) => any\n  getDefaultColumnDef?: () => any\n  createColumn?: (column: any, table: any) => any\n  createHeader?: (column: any, table: any) => any\n  createCell?: (cell: any, column: any, row: any, table: any) => any\n  createRow?: (row: any, table: any) => any\n}\n\nconst features = [\n  Headers,\n  Visibility,\n  Ordering,\n  Pinning,\n  Filters,\n  Sorting,\n  Grouping,\n  Expanding,\n  Pagination,\n  RowSelection,\n  ColumnSizing,\n] as const\n\n//\n\nexport interface CoreTableState {}\n\nexport interface CoreOptions<TData extends RowData> {\n  data: TData[]\n  state: Partial<TableState>\n  onStateChange: (updater: Updater<TableState>) => void\n  debugAll?: boolean\n  debugTable?: boolean\n  debugHeaders?: boolean\n  debugColumns?: boolean\n  debugRows?: boolean\n  initialState?: InitialTableState\n  autoResetAll?: boolean\n  mergeOptions?: (\n    defaultOptions: TableOptions<TData>,\n    options: Partial<TableOptions<TData>>\n  ) => TableOptions<TData>\n  meta?: TableMeta<TData>\n  getCoreRowModel: (table: Table<any>) => () => RowModel<any>\n  getSubRows?: (originalRow: TData, index: number) => undefined | TData[]\n  getRowId?: (originalRow: TData, index: number, parent?: Row<TData>) => string\n  columns: ColumnDef<TData, any>[]\n  defaultColumn?: Partial<ColumnDef<TData, unknown>>\n  renderFallbackValue: any\n}\n\nexport interface CoreInstance<TData extends RowData> {\n  initialState: TableState\n  reset: () => void\n  options: RequiredKeys<TableOptionsResolved<TData>, 'state'>\n  setOptions: (newOptions: Updater<TableOptionsResolved<TData>>) => void\n  getState: () => TableState\n  setState: (updater: Updater<TableState>) => void\n  _features: readonly TableFeature[]\n  _queue: (cb: () => void) => void\n  _getRowId: (_: TData, index: number, parent?: Row<TData>) => string\n  getCoreRowModel: () => RowModel<TData>\n  _getCoreRowModel?: () => RowModel<TData>\n  getRowModel: () => RowModel<TData>\n  getRow: (id: string) => Row<TData>\n  _getDefaultColumnDef: () => Partial<ColumnDef<TData, unknown>>\n  _getColumnDefs: () => ColumnDef<TData, unknown>[]\n  _getAllFlatColumnsById: () => Record<string, Column<TData, unknown>>\n  getAllColumns: () => Column<TData, unknown>[]\n  getAllFlatColumns: () => Column<TData, unknown>[]\n  getAllLeafColumns: () => Column<TData, unknown>[]\n  getColumn: (columnId: string) => Column<TData, unknown> | undefined\n}\n\nexport function createTable<TData extends RowData>(\n  options: TableOptionsResolved<TData>\n): Table<TData> {\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...')\n  }\n\n  let table = { _features: features } as unknown as Table<TData>\n\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions?.(table))\n  }, {}) as TableOptionsResolved<TData>\n\n  const mergeOptions = (options: TableOptionsResolved<TData>) => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options)\n    }\n\n    return {\n      ...defaultOptions,\n      ...options,\n    }\n  }\n\n  const coreInitialState: CoreTableState = {}\n\n  let initialState = {\n    ...coreInitialState,\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  table._features.forEach(feature => {\n    initialState = feature.getInitialState?.(initialState) ?? initialState\n  })\n\n  const queued: (() => void)[] = []\n  let queuedTimeout = false\n\n  const coreInstance: CoreInstance<TData> = {\n    _features: features,\n    options: {\n      ...defaultOptions,\n      ...options,\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb)\n\n      if (!queuedTimeout) {\n        queuedTimeout = true\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve()\n          .then(() => {\n            while (queued.length) {\n              queued.shift()!()\n            }\n            queuedTimeout = false\n          })\n          .catch(error =>\n            setTimeout(() => {\n              throw error\n            })\n          )\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState)\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options)\n      table.options = mergeOptions(newOptions) as RequiredKeys<\n        TableOptionsResolved<TData>,\n        'state'\n      >\n    },\n\n    getState: () => {\n      return table.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      table.options.onStateChange?.(updater)\n    },\n\n    _getRowId: (row: TData, index: number, parent?: Row<TData>) =>\n      table.options.getRowId?.(row, index, parent) ??\n      `${parent ? [parent.id, index].join('.') : index}`,\n\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table)\n      }\n\n      return table._getCoreRowModel!()\n    },\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel()\n    },\n    getRow: (id: string) => {\n      const row = table.getRowModel().rowsById[id]\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`)\n        }\n        throw new Error()\n      }\n\n      return row\n    },\n    _getDefaultColumnDef: memo(\n      () => [table.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<\n          ColumnDef<TData, unknown>\n        >\n\n        return {\n          header: props => {\n            const resolvedColumnDef = props.header.column\n              .columnDef as ColumnDefResolved<TData>\n\n            if (resolvedColumnDef.accessorKey) {\n              return resolvedColumnDef.accessorKey\n            }\n\n            if (resolvedColumnDef.accessorFn) {\n              return resolvedColumnDef.id\n            }\n\n            return null\n          },\n          // footer: props => props.header.column.id,\n          cell: props => props.renderValue<any>()?.toString?.() ?? null,\n          ...table._features.reduce((obj, feature) => {\n            return Object.assign(obj, feature.getDefaultColumnDef?.())\n          }, {}),\n          ...defaultColumn,\n        } as Partial<ColumnDef<TData, unknown>>\n      },\n      {\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n        key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef',\n      }\n    ),\n\n    _getColumnDefs: () => table.options.columns,\n\n    getAllColumns: memo(\n      () => [table._getColumnDefs()],\n      columnDefs => {\n        const recurseColumns = (\n          columnDefs: ColumnDef<TData, unknown>[],\n          parent?: Column<TData, unknown>,\n          depth = 0\n        ): Column<TData, unknown>[] => {\n          return columnDefs.map(columnDef => {\n            const column = createColumn(table, columnDef, depth, parent)\n\n            const groupingColumnDef = columnDef as GroupColumnDef<\n              TData,\n              unknown\n            >\n\n            column.columns = groupingColumnDef.columns\n              ? recurseColumns(groupingColumnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumns: memo(\n      () => [table.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    _getAllFlatColumnsById: memo(\n      () => [table.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce((acc, column) => {\n          acc[column.id] = column\n          return acc\n        }, {} as Record<string, Column<TData, unknown>>)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllLeafColumns: memo(\n      () => [table.getAllColumns(), table._getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId]\n\n      if (process.env.NODE_ENV !== 'production' && !column) {\n        console.error(`[Table] Column with id '${columnId}' does not exist.`)\n      }\n\n      return column\n    },\n  }\n\n  Object.assign(table, coreInstance)\n\n  table._features.forEach(feature => {\n    return Object.assign(table, feature.createTable?.(table))\n  })\n\n  return table\n}\n", "import { RowData, Cell, Column, Row, Table } from '../types'\nimport { Getter, memo } from '../utils'\n\nexport interface CellContext<TData extends RowData, TValue> {\n  table: Table<TData>\n  column: Column<TData, TValue>\n  row: Row<TData>\n  cell: Cell<TData, TValue>\n  getValue: Getter<TValue>\n  renderValue: Getter<TValue | null>\n}\n\nexport interface CoreCell<TData extends RowData, TValue> {\n  id: string\n  getValue: CellContext<TData, TValue>['getValue']\n  renderValue: CellContext<TData, TValue>['renderValue']\n  row: Row<TData>\n  column: Column<TData, TValue>\n  getContext: () => CellContext<TData, TValue>\n}\n\nexport function createCell<TData extends RowData, TValue>(\n  table: Table<TData>,\n  row: Row<TData>,\n  column: Column<TData, TValue>,\n  columnId: string\n): Cell<TData, TValue> {\n  const getRenderValue = () =>\n    cell.getValue() ?? table.options.renderFallbackValue\n\n  const cell: CoreCell<TData, TValue> = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: memo(\n      () => [table, column, row, cell],\n      (table, column, row, cell) => ({\n        table,\n        column,\n        row,\n        cell: cell as Cell<TData, TValue>,\n        getValue: cell.getValue,\n        renderValue: cell.renderValue,\n      }),\n      {\n        key: process.env.NODE_ENV === 'development' && 'cell.getContext',\n        debug: () => table.options.debugAll,\n      }\n    ),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(\n      cell,\n      feature.createCell?.(\n        cell as Cell<TData, TValue>,\n        column,\n        row as Row<TData>,\n        table\n      )\n    )\n  }, {})\n\n  return cell as Cell<TData, TValue>\n}\n", "import { RowData, Cell, Row, Table } from '../types'\nimport { flattenBy, memo } from '../utils'\nimport { createCell } from './cell'\n\nexport interface CoreRow<TData extends RowData> {\n  id: string\n  index: number\n  original: TData\n  depth: number\n  parentId?: string\n  _valuesCache: Record<string, unknown>\n  _uniqueValuesCache: Record<string, unknown>\n  getValue: <TValue>(columnId: string) => TValue\n  getUniqueValues: <TValue>(columnId: string) => TValue[]\n  renderValue: <TValue>(columnId: string) => TValue\n  subRows: Row<TData>[]\n  getLeafRows: () => Row<TData>[]\n  originalSubRows?: TData[]\n  getAllCells: () => Cell<TData, unknown>[]\n  _getAllCellsByColumnId: () => Record<string, Cell<TData, unknown>>\n  getParentRow: () => Row<TData> | undefined\n  getParentRows: () => Row<TData>[]\n}\n\nexport const createRow = <TData extends RowData>(\n  table: Table<TData>,\n  id: string,\n  original: TData,\n  rowIndex: number,\n  depth: number,\n  subRows?: Row<TData>[],\n  parentId?: string\n): Row<TData> => {\n  let row: CoreRow<TData> = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    parentId,\n    _valuesCache: {},\n    _uniqueValuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      row._valuesCache[columnId] = column.accessorFn(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._valuesCache[columnId] as any\n    },\n    getUniqueValues: columnId => {\n      if (row._uniqueValuesCache.hasOwnProperty(columnId)) {\n        return row._uniqueValuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      if (!column.columnDef.getUniqueValues) {\n        row._uniqueValuesCache[columnId] = [row.getValue(columnId)]\n        return row._uniqueValuesCache[columnId]\n      }\n\n      row._uniqueValuesCache[columnId] = column.columnDef.getUniqueValues(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._uniqueValuesCache[columnId] as any\n    },\n    renderValue: columnId =>\n      row.getValue(columnId) ?? table.options.renderFallbackValue,\n    subRows: subRows ?? [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getParentRow: () => (row.parentId ? table.getRow(row.parentId) : undefined),\n    getParentRows: () => {\n      let parentRows: Row<TData>[] = []\n      let currentRow = row\n      while (true) {\n        const parentRow = currentRow.getParentRow()\n        if (!parentRow) break\n        parentRows.push(parentRow)\n        currentRow = parentRow\n      }\n      return parentRows.reverse()\n    },\n    getAllCells: memo(\n      () => [table.getAllLeafColumns()],\n      leafColumns => {\n        return leafColumns.map(column => {\n          return createCell(table, row as Row<TData>, column, column.id)\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n\n    _getAllCellsByColumnId: memo(\n      () => [row.getAllCells()],\n      allCells => {\n        return allCells.reduce((acc, cell) => {\n          acc[cell.column.id] = cell\n          return acc\n        }, {} as Record<string, Cell<TData, unknown>>)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n  }\n\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i]\n    Object.assign(row, feature?.createRow?.(row, table))\n  }\n\n  return row as Row<TData>\n}\n", "import {\n  AccessorFn,\n  ColumnDef,\n  DisplayColumnDef,\n  GroupColumnDef,\n  IdentifiedColumnDef,\n  RowData,\n} from './types'\nimport { DeepKeys, DeepValue, RequiredKeys } from './utils'\n\n// type Person = {\n//   firstName: string\n//   lastName: string\n//   age: number\n//   visits: number\n//   status: string\n//   progress: number\n//   createdAt: Date\n//   nested: {\n//     foo: [\n//       {\n//         bar: 'bar'\n//       }\n//     ]\n//     bar: { subBar: boolean }[]\n//     baz: {\n//       foo: 'foo'\n//       bar: {\n//         baz: 'baz'\n//       }\n//     }\n//   }\n// }\n\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\n// const test2: DeepKeys<Person> = 'nested.bar'\n\n// const helper = createColumnHelper<Person>()\n\n// helper.accessor('nested.foo', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.foo.0.bar', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.bar', {\n//   cell: info => info.getValue(),\n// })\n\nexport type ColumnHelper<TData extends RowData> = {\n  accessor: <\n    TAccessor extends AccessorFn<TData> | DeepKeys<TData>,\n    TValue extends TAccessor extends AccessorFn<TData, infer TReturn>\n      ? TReturn\n      : TAccessor extends DeepKeys<TData>\n      ? DeepValue<TData, TAccessor>\n      : never\n  >(\n    accessor: TAccessor,\n    column: TAccessor extends AccessorFn<TData>\n      ? DisplayColumnDef<TData, TValue>\n      : IdentifiedColumnDef<TData, TValue>\n  ) => ColumnDef<TData, TValue>\n  display: (column: DisplayColumnDef<TData>) => ColumnDef<TData, unknown>\n  group: (column: GroupColumnDef<TData>) => ColumnDef<TData, unknown>\n}\n\nexport function createColumnHelper<\n  TData extends RowData\n>(): ColumnHelper<TData> {\n  return {\n    accessor: (accessor, column) => {\n      return typeof accessor === 'function'\n        ? ({\n            ...column,\n            accessorFn: accessor,\n          } as any)\n        : {\n            ...column,\n            accessorKey: accessor,\n          }\n    },\n    display: column => column as ColumnDef<TData, unknown>,\n    group: column => column as ColumnDef<TData, unknown>,\n  }\n}\n", "import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getCoreRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.options.data],\n      (\n        data\n      ): {\n        rows: Row<TData>[]\n        flatRows: Row<TData>[]\n        rowsById: Record<string, Row<TData>>\n      } => {\n        const rowModel: RowModel<TData> = {\n          rows: [],\n          flatRows: [],\n          rowsById: {},\n        }\n\n        const accessRows = (\n          originalRows: TData[],\n          depth = 0,\n          parentRow?: Row<TData>\n        ): Row<TData>[] => {\n          const rows = [] as Row<TData>[]\n\n          for (let i = 0; i < originalRows.length; i++) {\n            // This could be an expensive check at scale, so we should move it somewhere else, but where?\n            // if (!id) {\n            //   if (process.env.NODE_ENV !== 'production') {\n            //     throw new Error(`getRowId expected an ID, but got ${id}`)\n            //   }\n            // }\n\n            // Make the row\n            const row = createRow(\n              table,\n              table._getRowId(originalRows[i]!, i, parentRow),\n              originalRows[i]!,\n              i,\n              depth,\n              undefined,\n              parentRow?.id\n            )\n\n            // Keep track of every row in a flat array\n            rowModel.flatRows.push(row)\n            // Also keep track of every row by its ID\n            rowModel.rowsById[row.id] = row\n            // Push table row into parent\n            rows.push(row)\n\n            // Get the original subrows\n            if (table.options.getSubRows) {\n              row.originalSubRows = table.options.getSubRows(\n                originalRows[i]!,\n                i\n              )\n\n              // Then recursively access them\n              if (row.originalSubRows?.length) {\n                row.subRows = accessRows(row.originalSubRows, depth + 1, row)\n              }\n            }\n          }\n\n          return rows\n        }\n\n        rowModel.rows = accessRows(data)\n\n        return rowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n", "import { createRow } from '../core/row'\nimport { Row, RowModel, Table, RowData } from '../types'\n\nexport function filterRows<TData extends RowData>(\n  rows: Row<TData>[],\n  filterRowImpl: (row: Row<TData>) => any,\n  table: Table<TData>\n) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table)\n  }\n\n  return filterRowModelFromRoot(rows, filterRowImpl, table)\n}\n\nexport function filterRowModelFromLeafs<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => Row<TData>[],\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    const rows: Row<TData>[] = []\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const newRow = createRow(\n        table,\n        row.id,\n        row.original,\n        row.index,\n        row.depth,\n        undefined,\n        row.parentId\n      )\n      newRow.columnFilters = row.columnFilters\n\n      if (row.subRows?.length && depth < maxDepth) {\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n        row = newRow\n\n        if (filterRow(row) && !newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n          continue\n        }\n\n        if (filterRow(row) || newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n          continue\n        }\n      } else {\n        row = newRow\n        if (filterRow(row)) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n        }\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n\nexport function filterRowModelFromRoot<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => any,\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    // Filter from parents downward first\n\n    const rows: Row<TData>[] = []\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const pass = filterRow(row)\n\n      if (pass) {\n        if (row.subRows?.length && depth < maxDepth) {\n          const newRow = createRow(\n            table,\n            row.id,\n            row.original,\n            row.index,\n            row.depth,\n            undefined,\n            row.parentId\n          )\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n          row = newRow\n        }\n\n        rows.push(row)\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n", "import { ResolvedColumnFilter } from '../features/Filters'\nimport { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFilteredRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n      ],\n      (rowModel, columnFilters, globalFilter) => {\n        if (\n          !rowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          for (let i = 0; i < rowModel.flatRows.length; i++) {\n            rowModel.flatRows[i]!.columnFilters = {}\n            rowModel.flatRows[i]!.columnFiltersMeta = {}\n          }\n          return rowModel\n        }\n\n        const resolvedColumnFilters: ResolvedColumnFilter<TData>[] = []\n        const resolvedGlobalFilters: ResolvedColumnFilter<TData>[] = []\n\n        ;(columnFilters ?? []).forEach(d => {\n          const column = table.getColumn(d.id)\n\n          if (!column) {\n            return\n          }\n\n          const filterFn = column.getFilterFn()\n\n          if (!filterFn) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`\n              )\n            }\n            return\n          }\n\n          resolvedColumnFilters.push({\n            id: d.id,\n            filterFn,\n            resolvedValue: filterFn.resolveFilterValue?.(d.value) ?? d.value,\n          })\n        })\n\n        const filterableIds = columnFilters.map(d => d.id)\n\n        const globalFilterFn = table.getGlobalFilterFn()\n\n        const globallyFilterableColumns = table\n          .getAllLeafColumns()\n          .filter(column => column.getCanGlobalFilter())\n\n        if (\n          globalFilter &&\n          globalFilterFn &&\n          globallyFilterableColumns.length\n        ) {\n          filterableIds.push('__global__')\n\n          globallyFilterableColumns.forEach(column => {\n            resolvedGlobalFilters.push({\n              id: column.id,\n              filterFn: globalFilterFn,\n              resolvedValue:\n                globalFilterFn.resolveFilterValue?.(globalFilter) ??\n                globalFilter,\n            })\n          })\n        }\n\n        let currentColumnFilter\n        let currentGlobalFilter\n\n        // Flag the prefiltered row model with each filter state\n        for (let j = 0; j < rowModel.flatRows.length; j++) {\n          const row = rowModel.flatRows[j]!\n\n          row.columnFilters = {}\n\n          if (resolvedColumnFilters.length) {\n            for (let i = 0; i < resolvedColumnFilters.length; i++) {\n              currentColumnFilter = resolvedColumnFilters[i]!\n              const id = currentColumnFilter.id\n\n              // Tag the row with the column filter state\n              row.columnFilters[id] = currentColumnFilter.filterFn(\n                row,\n                id,\n                currentColumnFilter.resolvedValue,\n                filterMeta => {\n                  row.columnFiltersMeta[id] = filterMeta\n                }\n              )\n            }\n          }\n\n          if (resolvedGlobalFilters.length) {\n            for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n              currentGlobalFilter = resolvedGlobalFilters[i]!\n              const id = currentGlobalFilter.id\n              // Tag the row with the first truthy global filter state\n              if (\n                currentGlobalFilter.filterFn(\n                  row,\n                  id,\n                  currentGlobalFilter.resolvedValue,\n                  filterMeta => {\n                    row.columnFiltersMeta[id] = filterMeta\n                  }\n                )\n              ) {\n                row.columnFilters.__global__ = true\n                break\n              }\n            }\n\n            if (row.columnFilters.__global__ !== true) {\n              row.columnFilters.__global__ = false\n            }\n          }\n        }\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        // Filter final rows using all of the active filters\n        return filterRows(rowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n", "import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFacetedRowModel<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => RowModel<TData> {\n  return (table, columnId) =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n        table.getFilteredRowModel(),\n      ],\n      (preRowModel, columnFilters, globalFilter) => {\n        if (\n          !preRowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          return preRowModel\n        }\n\n        const filterableIds = [\n          ...columnFilters.map(d => d.id).filter(d => d !== columnId),\n          globalFilter ? '__global__' : undefined,\n        ].filter(Boolean) as string[]\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        return filterRows(preRowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedRowModel_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n", "import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedUniqueValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => Map<any, number> {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return new Map()\n\n        let facetedUniqueValues = new Map<any, number>()\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (facetedUniqueValues.has(value)) {\n              facetedUniqueValues.set(\n                value,\n                (facetedUniqueValues.get(value) ?? 0) + 1\n              )\n            } else {\n              facetedUniqueValues.set(value, 1)\n            }\n          }\n        }\n\n        return facetedUniqueValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedUniqueValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n", "import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedMinMaxValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => undefined | [number, number] {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return undefined\n\n        const firstValue =\n          facetedRowModel.flatRows[0]?.getUniqueValues(columnId)\n\n        if (typeof firstValue === 'undefined') {\n          return undefined\n        }\n\n        let facetedMinMaxValues: [any, any] = [firstValue, firstValue]\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (value < facetedMinMaxValues[0]) {\n              facetedMinMaxValues[0] = value\n            } else if (value > facetedMinMaxValues[1]) {\n              facetedMinMaxValues[1] = value\n            }\n          }\n        }\n\n        return facetedMinMaxValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedMinMaxValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n", "import { Table, Row, RowModel, RowData } from '../types'\nimport { SortingFn } from '../features/Sorting'\nimport { memo } from '../utils'\n\nexport function getSortedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().sorting, table.getPreSortedRowModel()],\n      (sorting, rowModel) => {\n        if (!rowModel.rows.length || !sorting?.length) {\n          return rowModel\n        }\n\n        const sortingState = table.getState().sorting\n\n        const sortedFlatRows: Row<TData>[] = []\n\n        // Filter out sortings that correspond to non existing columns\n        const availableSorting = sortingState.filter(sort =>\n          table.getColumn(sort.id)?.getCanSort()\n        )\n\n        const columnInfoById: Record<\n          string,\n          {\n            sortUndefined?: false | -1 | 1\n            invertSorting?: boolean\n            sortingFn: SortingFn<TData>\n          }\n        > = {}\n\n        availableSorting.forEach(sortEntry => {\n          const column = table.getColumn(sortEntry.id)\n          if (!column) return\n\n          columnInfoById[sortEntry.id] = {\n            sortUndefined: column.columnDef.sortUndefined,\n            invertSorting: column.columnDef.invertSorting,\n            sortingFn: column.getSortingFn(),\n          }\n        })\n\n        const sortData = (rows: Row<TData>[]) => {\n          // This will also perform a stable sorting using the row index\n          // if needed.\n          const sortedData = [...rows]\n\n          sortedData.sort((rowA, rowB) => {\n            for (let i = 0; i < availableSorting.length; i += 1) {\n              const sortEntry = availableSorting[i]!\n              const columnInfo = columnInfoById[sortEntry.id]!\n              const isDesc = sortEntry?.desc ?? false\n\n              if (columnInfo.sortUndefined) {\n                const aValue = rowA.getValue(sortEntry.id)\n                const bValue = rowB.getValue(sortEntry.id)\n\n                const aUndefined = typeof aValue === 'undefined'\n                const bUndefined = typeof bValue === 'undefined'\n\n                if (aUndefined || bUndefined) {\n                  return aUndefined && bUndefined\n                    ? 0\n                    : aUndefined\n                    ? columnInfo.sortUndefined\n                    : -columnInfo.sortUndefined\n                }\n              }\n\n              // This function should always return in ascending order\n              let sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n\n              if (sortInt !== 0) {\n                if (isDesc) {\n                  sortInt *= -1\n                }\n\n                if (columnInfo.invertSorting) {\n                  sortInt *= -1\n                }\n\n                return sortInt\n              }\n            }\n\n            return rowA.index - rowB.index\n          })\n\n          // If there are sub-rows, sort them\n          sortedData.forEach(row => {\n            sortedFlatRows.push(row)\n            if (row.subRows?.length) {\n              row.subRows = sortData(row.subRows)\n            }\n          })\n\n          return sortedData\n        }\n\n        return {\n          rows: sortData(rowModel.rows),\n          flatRows: sortedFlatRows,\n          rowsById: rowModel.rowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n", "import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { flattenBy, memo } from '../utils'\n\nexport function getGroupedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().grouping, table.getPreGroupedRowModel()],\n      (grouping, rowModel) => {\n        if (!rowModel.rows.length || !grouping.length) {\n          return rowModel\n        }\n\n        // Filter the grouping list down to columns that exist\n        const existingGrouping = grouping.filter(columnId =>\n          table.getColumn(columnId)\n        )\n\n        const groupedFlatRows: Row<TData>[] = []\n        const groupedRowsById: Record<string, Row<TData>> = {}\n        // const onlyGroupedFlatRows: Row[] = [];\n        // const onlyGroupedRowsById: Record<RowId, Row> = {};\n        // const nonGroupedFlatRows: Row[] = [];\n        // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n        // Recursively group the data\n        const groupUpRecursively = (\n          rows: Row<TData>[],\n          depth = 0,\n          parentId?: string\n        ) => {\n          // Grouping depth has been been met\n          // Stop grouping and simply rewrite thd depth and row relationships\n          if (depth >= existingGrouping.length) {\n            return rows.map(row => {\n              row.depth = depth\n\n              groupedFlatRows.push(row)\n              groupedRowsById[row.id] = row\n\n              if (row.subRows) {\n                row.subRows = groupUpRecursively(row.subRows, depth + 1, row.id)\n              }\n\n              return row\n            })\n          }\n\n          const columnId: string = existingGrouping[depth]!\n\n          // Group the rows together for this level\n          const rowGroupsMap = groupBy(rows, columnId)\n\n          // Peform aggregations for each group\n          const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map(\n            ([groupingValue, groupedRows], index) => {\n              let id = `${columnId}:${groupingValue}`\n              id = parentId ? `${parentId}>${id}` : id\n\n              // First, Recurse to group sub rows before aggregation\n              const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n              // Flatten the leaf rows of the rows in this group\n              const leafRows = depth\n                ? flattenBy(groupedRows, row => row.subRows)\n                : groupedRows\n\n              const row = createRow(\n                table,\n                id,\n                leafRows[0]!.original,\n                index,\n                depth,\n                undefined,\n                parentId\n              )\n\n              Object.assign(row, {\n                groupingColumnId: columnId,\n                groupingValue,\n                subRows,\n                leafRows,\n                getValue: (columnId: string) => {\n                  // Don't aggregate columns that are in the grouping\n                  if (existingGrouping.includes(columnId)) {\n                    if (row._valuesCache.hasOwnProperty(columnId)) {\n                      return row._valuesCache[columnId]\n                    }\n\n                    if (groupedRows[0]) {\n                      row._valuesCache[columnId] =\n                        groupedRows[0].getValue(columnId) ?? undefined\n                    }\n\n                    return row._valuesCache[columnId]\n                  }\n\n                  if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n                    return row._groupingValuesCache[columnId]\n                  }\n\n                  // Aggregate the values\n                  const column = table.getColumn(columnId)\n                  const aggregateFn = column?.getAggregationFn()\n\n                  if (aggregateFn) {\n                    row._groupingValuesCache[columnId] = aggregateFn(\n                      columnId,\n                      leafRows,\n                      groupedRows\n                    )\n\n                    return row._groupingValuesCache[columnId]\n                  }\n                },\n              })\n\n              subRows.forEach(subRow => {\n                groupedFlatRows.push(subRow)\n                groupedRowsById[subRow.id] = subRow\n                // if (subRow.getIsGrouped?.()) {\n                //   onlyGroupedFlatRows.push(subRow);\n                //   onlyGroupedRowsById[subRow.id] = subRow;\n                // } else {\n                //   nonGroupedFlatRows.push(subRow);\n                //   nonGroupedRowsById[subRow.id] = subRow;\n                // }\n              })\n\n              return row\n            }\n          )\n\n          return aggregatedGroupedRows\n        }\n\n        const groupedRows = groupUpRecursively(rowModel.rows, 0)\n\n        groupedRows.forEach(subRow => {\n          groupedFlatRows.push(subRow)\n          groupedRowsById[subRow.id] = subRow\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        })\n\n        return {\n          rows: groupedRows,\n          flatRows: groupedFlatRows,\n          rowsById: groupedRowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getGroupedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._queue(() => {\n            table._autoResetExpanded()\n            table._autoResetPageIndex()\n          })\n        },\n      }\n    )\n}\n\nfunction groupBy<TData extends RowData>(rows: Row<TData>[], columnId: string) {\n  const groupMap = new Map<any, Row<TData>[]>()\n\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getGroupingValue(columnId)}`\n    const previous = map.get(resKey)\n    if (!previous) {\n      map.set(resKey, [row])\n    } else {\n      previous.push(row)\n    }\n    return map\n  }, groupMap)\n}\n", "import { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getExpandedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().expanded,\n        table.getPreExpandedRowModel(),\n        table.options.paginateExpandedRows,\n      ],\n      (expanded, rowModel, paginateExpandedRows) => {\n        if (\n          !rowModel.rows.length ||\n          (expanded !== true && !Object.keys(expanded ?? {}).length)\n        ) {\n          return rowModel\n        }\n\n        if (!paginateExpandedRows) {\n          // Only expand rows at this point if they are being paginated\n          return rowModel\n        }\n\n        return expandRows(rowModel)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n\nexport function expandRows<TData extends RowData>(rowModel: RowModel<TData>) {\n  const expandedRows: Row<TData>[] = []\n\n  const handleRow = (row: Row<TData>) => {\n    expandedRows.push(row)\n\n    if (row.subRows?.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n", "import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { expandRows } from './getExpandedRowModel'\n\nexport function getPaginationRowModel<TData extends RowData>(opts?: {\n  initialSync: boolean\n}): (table: Table<TData>) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().pagination,\n        table.getPrePaginationRowModel(),\n        table.options.paginateExpandedRows\n          ? undefined\n          : table.getState().expanded,\n      ],\n      (pagination, rowModel) => {\n        if (!rowModel.rows.length) {\n          return rowModel\n        }\n\n        const { pageSize, pageIndex } = pagination\n        let { rows, flatRows, rowsById } = rowModel\n        const pageStart = pageSize * pageIndex\n        const pageEnd = pageStart + pageSize\n\n        rows = rows.slice(pageStart, pageEnd)\n\n        let paginatedRowModel: RowModel<TData>\n\n        if (!table.options.paginateExpandedRows) {\n          paginatedRowModel = expandRows({\n            rows,\n            flatRows,\n            rowsById,\n          })\n        } else {\n          paginatedRowModel = {\n            rows,\n            flatRows,\n            rowsById,\n          }\n        }\n\n        paginatedRowModel.flatRows = []\n\n        const handleRow = (row: Row<TData>) => {\n          paginatedRowModel.flatRows.push(row)\n          if (row.subRows.length) {\n            row.subRows.forEach(handleRow)\n          }\n        }\n\n        paginatedRowModel.rows.forEach(handleRow)\n\n        return paginatedRowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n", "import * as React from 'react'\nexport * from '@tanstack/table-core'\n\nimport {\n  TableOptions,\n  TableOptionsResolved,\n  RowData,\n  createTable,\n} from '@tanstack/table-core'\n\nexport type Renderable<TProps> = React.ReactNode | React.ComponentType<TProps>\n\n//\n\nexport function flexRender<TProps extends object>(\n  Comp: Renderable<TProps>,\n  props: TProps\n): React.ReactNode | JSX.Element {\n  return !Comp ? null : isReactComponent<TProps>(Comp) ? (\n    <Comp {...props} />\n  ) : (\n    Comp\n  )\n}\n\nfunction isReactComponent<TProps>(\n  component: unknown\n): component is React.ComponentType<TProps> {\n  return (\n    isClassComponent(component) ||\n    typeof component === 'function' ||\n    isExoticComponent(component)\n  )\n}\n\nfunction isClassComponent(component: any) {\n  return (\n    typeof component === 'function' &&\n    (() => {\n      const proto = Object.getPrototypeOf(component)\n      return proto.prototype && proto.prototype.isReactComponent\n    })()\n  )\n}\n\nfunction isExoticComponent(component: any) {\n  return (\n    typeof component === 'object' &&\n    typeof component.$$typeof === 'symbol' &&\n    ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description)\n  )\n}\n\nexport function useReactTable<TData extends RowData>(\n  options: TableOptions<TData>\n) {\n  // Compose in the generic options to the user options\n  const resolvedOptions: TableOptionsResolved<TData> = {\n    state: {}, // Dummy state\n    onStateChange: () => {}, // noop\n    renderFallbackValue: null,\n    ...options,\n  }\n\n  // Create a new table and store it in state\n  const [tableRef] = React.useState(() => ({\n    current: createTable<TData>(resolvedOptions),\n  }))\n\n  // By default, manage table state here using the table's initial state\n  const [state, setState] = React.useState(() => tableRef.current.initialState)\n\n  // Compose the default state above with any user state. This will allow the user\n  // to only control a subset of the state if desired.\n  tableRef.current.setOptions(prev => ({\n    ...prev,\n    ...options,\n    state: {\n      ...state,\n      ...options.state,\n    },\n    // Similarly, we'll maintain both our internal state and any user-provided\n    // state.\n    onStateChange: updater => {\n      setState(updater)\n      options.onStateChange?.(updater)\n    },\n  }))\n\n  return tableRef.current\n}\n", "/**\n * react-virtual\n *\n * Copyright (c) TanStack\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nexport { _extends as extends };\n//# sourceMappingURL=_rollupPluginBabelHelpers.mjs.map\n", "/**\n * virtual-core\n *\n * Copyright (c) TanStack\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nexport { _extends as extends };\n//# sourceMappingURL=_rollupPluginBabelHelpers.mjs.map\n", "export type NoInfer<A extends any> = [A][A extends any ? 0 : never]\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: false | string\n    debug?: () => any\n    onChange?: (result: TResult) => void\n    initialDeps?: TDeps\n  },\n) {\n  let deps = opts.initialDeps ?? []\n  let result: TResult | undefined\n\n  return (): TResult => {\n    let depTime: number\n    if (opts.key && opts.debug?.()) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug?.()) resultTime = Date.now()\n\n    result = fn(...newDeps)\n\n    if (opts.key && opts.debug?.()) {\n      const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n      const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n      const resultFpsPercentage = resultEndTime / 16\n\n      const pad = (str: number | string, num: number) => {\n        str = String(str)\n        while (str.length < num) {\n          str = ' ' + str\n        }\n        return str\n      }\n\n      console.info(\n        `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n        `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120),\n            )}deg 100% 31%);`,\n        opts?.key,\n      )\n    }\n\n    opts?.onChange?.(result)\n\n    return result!\n  }\n}\n\nexport function notUndefined<T>(value: T | undefined, msg?: string): T {\n  if (value === undefined) {\n    throw new Error(`Unexpected undefined${msg ? `: ${msg}` : ''}`)\n  } else {\n    return value\n  }\n}\n\nexport const approxEqual = (a: number, b: number) => Math.abs(a - b) < 1\n", "import { approxEqual, memo, notUndefined } from './utils'\n\nexport * from './utils'\n\n//\n\ntype ScrollDirection = 'forward' | 'backward'\n\ntype ScrollAlignment = 'start' | 'center' | 'end' | 'auto'\n\ntype ScrollBehavior = 'auto' | 'smooth'\n\nexport interface ScrollToOptions {\n  align?: ScrollAlignment\n  behavior?: ScrollBehavior\n}\n\ntype ScrollToOffsetOptions = ScrollToOptions\n\ntype ScrollToIndexOptions = ScrollToOptions\n\nexport interface Range {\n  startIndex: number\n  endIndex: number\n  overscan: number\n  count: number\n}\n\ntype Key = number | string\n\nexport interface VirtualItem {\n  key: Key\n  index: number\n  start: number\n  end: number\n  size: number\n  lane: number\n}\n\ninterface Rect {\n  width: number\n  height: number\n}\n\n//\n\nexport const defaultKeyExtractor = (index: number) => index\n\nexport const defaultRangeExtractor = (range: Range) => {\n  const start = Math.max(range.startIndex - range.overscan, 0)\n  const end = Math.min(range.endIndex + range.overscan, range.count - 1)\n\n  const arr = []\n\n  for (let i = start; i <= end; i++) {\n    arr.push(i)\n  }\n\n  return arr\n}\n\nexport const observeElementRect = <T extends Element>(\n  instance: Virtualizer<T, any>,\n  cb: (rect: Rect) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n\n  const handler = (rect: Rect) => {\n    const { width, height } = rect\n    cb({ width: Math.round(width), height: Math.round(height) })\n  }\n\n  handler(element.getBoundingClientRect())\n\n  const observer = new ResizeObserver((entries) => {\n    const entry = entries[0]\n    if (entry?.borderBoxSize) {\n      const box = entry.borderBoxSize[0]\n      if (box) {\n        handler({ width: box.inlineSize, height: box.blockSize })\n        return\n      }\n    }\n    handler(element.getBoundingClientRect())\n  })\n\n  observer.observe(element, { box: 'border-box' })\n\n  return () => {\n    observer.unobserve(element)\n  }\n}\n\nexport const observeWindowRect = (\n  instance: Virtualizer<Window, any>,\n  cb: (rect: Rect) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n\n  const handler = () => {\n    cb({ width: element.innerWidth, height: element.innerHeight })\n  }\n  handler()\n\n  element.addEventListener('resize', handler, {\n    passive: true,\n  })\n\n  return () => {\n    element.removeEventListener('resize', handler)\n  }\n}\n\nexport const observeElementOffset = <T extends Element>(\n  instance: Virtualizer<T, any>,\n  cb: (offset: number) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n\n  const handler = () => {\n    cb(element[instance.options.horizontal ? 'scrollLeft' : 'scrollTop'])\n  }\n  handler()\n\n  element.addEventListener('scroll', handler, {\n    passive: true,\n  })\n\n  return () => {\n    element.removeEventListener('scroll', handler)\n  }\n}\n\nexport const observeWindowOffset = (\n  instance: Virtualizer<Window, any>,\n  cb: (offset: number) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n\n  const handler = () => {\n    cb(element[instance.options.horizontal ? 'scrollX' : 'scrollY'])\n  }\n  handler()\n\n  element.addEventListener('scroll', handler, {\n    passive: true,\n  })\n\n  return () => {\n    element.removeEventListener('scroll', handler)\n  }\n}\n\nexport const measureElement = <TItemElement extends Element>(\n  element: TItemElement,\n  entry: ResizeObserverEntry | undefined,\n  instance: Virtualizer<any, TItemElement>,\n) => {\n  if (entry?.borderBoxSize) {\n    const box = entry.borderBoxSize[0]\n    if (box) {\n      const size = Math.round(\n        box[instance.options.horizontal ? 'inlineSize' : 'blockSize'],\n      )\n      return size\n    }\n  }\n  return Math.round(\n    element.getBoundingClientRect()[\n      instance.options.horizontal ? 'width' : 'height'\n    ],\n  )\n}\n\nexport const windowScroll = <T extends Window>(\n  offset: number,\n  {\n    adjustments = 0,\n    behavior,\n  }: { adjustments?: number; behavior?: ScrollBehavior },\n  instance: Virtualizer<T, any>,\n) => {\n  const toOffset = offset + adjustments\n\n  instance.scrollElement?.scrollTo?.({\n    [instance.options.horizontal ? 'left' : 'top']: toOffset,\n    behavior,\n  })\n}\n\nexport const elementScroll = <T extends Element>(\n  offset: number,\n  {\n    adjustments = 0,\n    behavior,\n  }: { adjustments?: number; behavior?: ScrollBehavior },\n  instance: Virtualizer<T, any>,\n) => {\n  const toOffset = offset + adjustments\n\n  instance.scrollElement?.scrollTo?.({\n    [instance.options.horizontal ? 'left' : 'top']: toOffset,\n    behavior,\n  })\n}\n\nexport interface VirtualizerOptions<\n  TScrollElement extends Element | Window,\n  TItemElement extends Element,\n> {\n  // Required from the user\n  count: number\n  getScrollElement: () => TScrollElement | null\n  estimateSize: (index: number) => number\n\n  // Required from the framework adapter (but can be overridden)\n  scrollToFn: (\n    offset: number,\n    options: { adjustments?: number; behavior?: ScrollBehavior },\n    instance: Virtualizer<TScrollElement, TItemElement>,\n  ) => void\n  observeElementRect: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    cb: (rect: Rect) => void,\n  ) => void | (() => void)\n  observeElementOffset: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    cb: (offset: number) => void,\n  ) => void | (() => void)\n\n  // Optional\n  debug?: any\n  initialRect?: Rect\n  onChange?: (instance: Virtualizer<TScrollElement, TItemElement>) => void\n  measureElement?: (\n    element: TItemElement,\n    entry: ResizeObserverEntry | undefined,\n    instance: Virtualizer<TScrollElement, TItemElement>,\n  ) => number\n  overscan?: number\n  horizontal?: boolean\n  paddingStart?: number\n  paddingEnd?: number\n  scrollPaddingStart?: number\n  scrollPaddingEnd?: number\n  initialOffset?: number\n  getItemKey?: (index: number) => Key\n  rangeExtractor?: (range: Range) => number[]\n  scrollMargin?: number\n  scrollingDelay?: number\n  indexAttribute?: string\n  initialMeasurementsCache?: VirtualItem[]\n  lanes?: number\n}\n\nexport class Virtualizer<\n  TScrollElement extends Element | Window,\n  TItemElement extends Element,\n> {\n  private unsubs: (void | (() => void))[] = []\n  options!: Required<VirtualizerOptions<TScrollElement, TItemElement>>\n  scrollElement: TScrollElement | null = null\n  isScrolling: boolean = false\n  private isScrollingTimeoutId: ReturnType<typeof setTimeout> | null = null\n  private scrollToIndexTimeoutId: ReturnType<typeof setTimeout> | null = null\n  measurementsCache: VirtualItem[] = []\n  private itemSizeCache = new Map<Key, number>()\n  private pendingMeasuredCacheIndexes: number[] = []\n  private scrollRect: Rect\n  scrollOffset: number\n  scrollDirection: ScrollDirection | null = null\n  private scrollAdjustments: number = 0\n  measureElementCache = new Map<Key, TItemElement>()\n  private observer = (() => {\n    let _ro: ResizeObserver | null = null\n\n    const get = () => {\n      if (_ro) {\n        return _ro\n      } else if (typeof ResizeObserver !== 'undefined') {\n        return (_ro = new ResizeObserver((entries) => {\n          entries.forEach((entry) => {\n            this._measureElement(entry.target as TItemElement, entry)\n          })\n        }))\n      } else {\n        return null\n      }\n    }\n\n    return {\n      disconnect: () => get()?.disconnect(),\n      observe: (target: Element) =>\n        get()?.observe(target, { box: 'border-box' }),\n      unobserve: (target: Element) => get()?.unobserve(target),\n    }\n  })()\n  range: { startIndex: number; endIndex: number } = {\n    startIndex: 0,\n    endIndex: 0,\n  }\n\n  constructor(opts: VirtualizerOptions<TScrollElement, TItemElement>) {\n    this.setOptions(opts)\n    this.scrollRect = this.options.initialRect\n    this.scrollOffset = this.options.initialOffset\n    this.measurementsCache = this.options.initialMeasurementsCache\n    this.measurementsCache.forEach((item) => {\n      this.itemSizeCache.set(item.key, item.size)\n    })\n\n    this.maybeNotify()\n  }\n\n  setOptions = (opts: VirtualizerOptions<TScrollElement, TItemElement>) => {\n    Object.entries(opts).forEach(([key, value]) => {\n      if (typeof value === 'undefined') delete (opts as any)[key]\n    })\n\n    this.options = {\n      debug: false,\n      initialOffset: 0,\n      overscan: 1,\n      paddingStart: 0,\n      paddingEnd: 0,\n      scrollPaddingStart: 0,\n      scrollPaddingEnd: 0,\n      horizontal: false,\n      getItemKey: defaultKeyExtractor,\n      rangeExtractor: defaultRangeExtractor,\n      onChange: () => {},\n      measureElement,\n      initialRect: { width: 0, height: 0 },\n      scrollMargin: 0,\n      scrollingDelay: 150,\n      indexAttribute: 'data-index',\n      initialMeasurementsCache: [],\n      lanes: 1,\n      ...opts,\n    }\n  }\n\n  private notify = () => {\n    this.options.onChange?.(this)\n  }\n\n  private cleanup = () => {\n    this.unsubs.filter(Boolean).forEach((d) => d!())\n    this.unsubs = []\n    this.scrollElement = null\n  }\n\n  _didMount = () => {\n    this.measureElementCache.forEach(this.observer.observe)\n    return () => {\n      this.observer.disconnect()\n      this.cleanup()\n    }\n  }\n\n  _willUpdate = () => {\n    const scrollElement = this.options.getScrollElement()\n\n    if (this.scrollElement !== scrollElement) {\n      this.cleanup()\n\n      this.scrollElement = scrollElement\n\n      this._scrollToOffset(this.scrollOffset, {\n        adjustments: undefined,\n        behavior: undefined,\n      })\n\n      this.unsubs.push(\n        this.options.observeElementRect(this, (rect) => {\n          const prev = this.scrollRect\n          this.scrollRect = rect\n          if (\n            this.options.horizontal\n              ? rect.width !== prev.width\n              : rect.height !== prev.height\n          ) {\n            this.maybeNotify()\n          }\n        }),\n      )\n\n      this.unsubs.push(\n        this.options.observeElementOffset(this, (offset) => {\n          this.scrollAdjustments = 0\n\n          if (this.scrollOffset === offset) {\n            return\n          }\n\n          if (this.isScrollingTimeoutId !== null) {\n            clearTimeout(this.isScrollingTimeoutId)\n            this.isScrollingTimeoutId = null\n          }\n\n          this.isScrolling = true\n          this.scrollDirection =\n            this.scrollOffset < offset ? 'forward' : 'backward'\n          this.scrollOffset = offset\n\n          this.maybeNotify()\n\n          this.isScrollingTimeoutId = setTimeout(() => {\n            this.isScrollingTimeoutId = null\n            this.isScrolling = false\n            this.scrollDirection = null\n\n            this.maybeNotify()\n          }, this.options.scrollingDelay)\n        }),\n      )\n    }\n  }\n\n  private getSize = () => {\n    return this.scrollRect[this.options.horizontal ? 'width' : 'height']\n  }\n\n  private memoOptions = memo(\n    () => [\n      this.options.count,\n      this.options.paddingStart,\n      this.options.scrollMargin,\n      this.options.getItemKey,\n    ],\n    (count, paddingStart, scrollMargin, getItemKey) => {\n      this.pendingMeasuredCacheIndexes = []\n      return {\n        count,\n        paddingStart,\n        scrollMargin,\n        getItemKey,\n      }\n    },\n    {\n      key: false,\n    },\n  )\n\n  private getFurthestMeasurement = (\n    measurements: VirtualItem[],\n    index: number,\n  ) => {\n    const furthestMeasurementsFound = new Map<number, true>()\n    const furthestMeasurements = new Map<number, VirtualItem>()\n    for (let m = index - 1; m >= 0; m--) {\n      const measurement = measurements[m]!\n\n      if (furthestMeasurementsFound.has(measurement.lane)) {\n        continue\n      }\n\n      const previousFurthestMeasurement = furthestMeasurements.get(\n        measurement.lane,\n      )\n      if (\n        previousFurthestMeasurement == null ||\n        measurement.end > previousFurthestMeasurement.end\n      ) {\n        furthestMeasurements.set(measurement.lane, measurement)\n      } else if (measurement.end < previousFurthestMeasurement.end) {\n        furthestMeasurementsFound.set(measurement.lane, true)\n      }\n\n      if (furthestMeasurementsFound.size === this.options.lanes) {\n        break\n      }\n    }\n\n    return furthestMeasurements.size === this.options.lanes\n      ? Array.from(furthestMeasurements.values()).sort(\n          (a, b) => a.end - b.end,\n        )[0]\n      : undefined\n  }\n\n  private getMeasurements = memo(\n    () => [this.memoOptions(), this.itemSizeCache],\n    ({ count, paddingStart, scrollMargin, getItemKey }, itemSizeCache) => {\n      const min =\n        this.pendingMeasuredCacheIndexes.length > 0\n          ? Math.min(...this.pendingMeasuredCacheIndexes)\n          : 0\n      this.pendingMeasuredCacheIndexes = []\n\n      const measurements = this.measurementsCache.slice(0, min)\n\n      for (let i = min; i < count; i++) {\n        const key = getItemKey(i)\n\n        const furthestMeasurement =\n          this.options.lanes === 1\n            ? measurements[i - 1]\n            : this.getFurthestMeasurement(measurements, i)\n\n        const start = furthestMeasurement\n          ? furthestMeasurement.end\n          : paddingStart + scrollMargin\n\n        const measuredSize = itemSizeCache.get(key)\n        const size =\n          typeof measuredSize === 'number'\n            ? measuredSize\n            : this.options.estimateSize(i)\n\n        const end = start + size\n\n        const lane = furthestMeasurement\n          ? furthestMeasurement.lane\n          : i % this.options.lanes\n\n        measurements[i] = {\n          index: i,\n          start,\n          size,\n          end,\n          key,\n          lane,\n        }\n      }\n\n      this.measurementsCache = measurements\n\n      return measurements\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getMeasurements',\n      debug: () => this.options.debug,\n    },\n  )\n\n  calculateRange = memo(\n    () => [this.getMeasurements(), this.getSize(), this.scrollOffset],\n    (measurements, outerSize, scrollOffset) => {\n      return (this.range = calculateRange({\n        measurements,\n        outerSize,\n        scrollOffset,\n      }))\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'calculateRange',\n      debug: () => this.options.debug,\n    },\n  )\n\n  private maybeNotify = memo(\n    () => {\n      const range = this.calculateRange()\n\n      return [range.startIndex, range.endIndex, this.isScrolling]\n    },\n    () => {\n      this.notify()\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'maybeNotify',\n      debug: () => this.options.debug,\n      initialDeps: [\n        this.range.startIndex,\n        this.range.endIndex,\n        this.isScrolling,\n      ],\n    },\n  )\n\n  private getIndexes = memo(\n    () => [\n      this.options.rangeExtractor,\n      this.calculateRange(),\n      this.options.overscan,\n      this.options.count,\n    ],\n    (rangeExtractor, range, overscan, count) => {\n      return rangeExtractor({\n        ...range,\n        overscan,\n        count,\n      })\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getIndexes',\n      debug: () => this.options.debug,\n    },\n  )\n\n  indexFromElement = (node: TItemElement) => {\n    const attributeName = this.options.indexAttribute\n    const indexStr = node.getAttribute(attributeName)\n\n    if (!indexStr) {\n      console.warn(\n        `Missing attribute name '${attributeName}={index}' on measured element.`,\n      )\n      return -1\n    }\n\n    return parseInt(indexStr, 10)\n  }\n\n  private _measureElement = (\n    node: TItemElement,\n    entry: ResizeObserverEntry | undefined,\n  ) => {\n    const index = this.indexFromElement(node)\n\n    const item = this.measurementsCache[index]\n    if (!item) {\n      return\n    }\n\n    const prevNode = this.measureElementCache.get(item.key)\n\n    if (!node.isConnected) {\n      this.observer.unobserve(node)\n      if (node === prevNode) {\n        this.measureElementCache.delete(item.key)\n      }\n      return\n    }\n\n    if (prevNode !== node) {\n      if (prevNode) {\n        this.observer.unobserve(prevNode)\n      }\n      this.observer.observe(node)\n      this.measureElementCache.set(item.key, node)\n    }\n\n    const measuredItemSize = this.options.measureElement(node, entry, this)\n\n    const itemSize = this.itemSizeCache.get(item.key) ?? item.size\n\n    const delta = measuredItemSize - itemSize\n\n    if (delta !== 0) {\n      if (item.start < this.scrollOffset) {\n        if (process.env.NODE_ENV !== 'production' && this.options.debug) {\n          console.info('correction', delta)\n        }\n\n        this._scrollToOffset(this.scrollOffset, {\n          adjustments: (this.scrollAdjustments += delta),\n          behavior: undefined,\n        })\n      }\n\n      this.pendingMeasuredCacheIndexes.push(index)\n\n      this.itemSizeCache = new Map(\n        this.itemSizeCache.set(item.key, measuredItemSize),\n      )\n\n      this.notify()\n    }\n  }\n\n  measureElement = (node: TItemElement | null) => {\n    if (!node) {\n      return\n    }\n\n    this._measureElement(node, undefined)\n  }\n\n  getVirtualItems = memo(\n    () => [this.getIndexes(), this.getMeasurements()],\n    (indexes, measurements) => {\n      const virtualItems: VirtualItem[] = []\n\n      for (let k = 0, len = indexes.length; k < len; k++) {\n        const i = indexes[k]!\n        const measurement = measurements[i]!\n\n        virtualItems.push(measurement)\n      }\n\n      return virtualItems\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getIndexes',\n      debug: () => this.options.debug,\n    },\n  )\n\n  getVirtualItemForOffset = (offset: number) => {\n    const measurements = this.getMeasurements()\n\n    return notUndefined(\n      measurements[\n        findNearestBinarySearch(\n          0,\n          measurements.length - 1,\n          (index: number) => notUndefined(measurements[index]).start,\n          offset,\n        )\n      ],\n    )\n  }\n\n  getOffsetForAlignment = (toOffset: number, align: ScrollAlignment) => {\n    const size = this.getSize()\n\n    if (align === 'auto') {\n      if (toOffset <= this.scrollOffset) {\n        align = 'start'\n      } else if (toOffset >= this.scrollOffset + size) {\n        align = 'end'\n      } else {\n        align = 'start'\n      }\n    }\n\n    if (align === 'start') {\n      toOffset = toOffset\n    } else if (align === 'end') {\n      toOffset = toOffset - size\n    } else if (align === 'center') {\n      toOffset = toOffset - size / 2\n    }\n\n    const scrollSizeProp = this.options.horizontal\n      ? 'scrollWidth'\n      : 'scrollHeight'\n    const scrollSize = this.scrollElement\n      ? 'document' in this.scrollElement\n        ? this.scrollElement.document.documentElement[scrollSizeProp]\n        : this.scrollElement[scrollSizeProp]\n      : 0\n\n    const maxOffset = scrollSize - this.getSize()\n\n    return Math.max(Math.min(maxOffset, toOffset), 0)\n  }\n\n  getOffsetForIndex = (index: number, align: ScrollAlignment = 'auto') => {\n    index = Math.max(0, Math.min(index, this.options.count - 1))\n\n    const measurement = notUndefined(this.getMeasurements()[index])\n\n    if (align === 'auto') {\n      if (\n        measurement.end >=\n        this.scrollOffset + this.getSize() - this.options.scrollPaddingEnd\n      ) {\n        align = 'end'\n      } else if (\n        measurement.start <=\n        this.scrollOffset + this.options.scrollPaddingStart\n      ) {\n        align = 'start'\n      } else {\n        return [this.scrollOffset, align] as const\n      }\n    }\n\n    const toOffset =\n      align === 'end'\n        ? measurement.end + this.options.scrollPaddingEnd\n        : measurement.start - this.options.scrollPaddingStart\n\n    return [this.getOffsetForAlignment(toOffset, align), align] as const\n  }\n\n  private isDynamicMode = () => this.measureElementCache.size > 0\n\n  private cancelScrollToIndex = () => {\n    if (this.scrollToIndexTimeoutId !== null) {\n      clearTimeout(this.scrollToIndexTimeoutId)\n      this.scrollToIndexTimeoutId = null\n    }\n  }\n\n  scrollToOffset = (\n    toOffset: number,\n    { align = 'start', behavior }: ScrollToOffsetOptions = {},\n  ) => {\n    this.cancelScrollToIndex()\n\n    if (behavior === 'smooth' && this.isDynamicMode()) {\n      console.warn(\n        'The `smooth` scroll behavior is not fully supported with dynamic size.',\n      )\n    }\n\n    this._scrollToOffset(this.getOffsetForAlignment(toOffset, align), {\n      adjustments: undefined,\n      behavior,\n    })\n  }\n\n  scrollToIndex = (\n    index: number,\n    { align: initialAlign = 'auto', behavior }: ScrollToIndexOptions = {},\n  ) => {\n    index = Math.max(0, Math.min(index, this.options.count - 1))\n\n    this.cancelScrollToIndex()\n\n    if (behavior === 'smooth' && this.isDynamicMode()) {\n      console.warn(\n        'The `smooth` scroll behavior is not fully supported with dynamic size.',\n      )\n    }\n\n    const [toOffset, align] = this.getOffsetForIndex(index, initialAlign)\n\n    this._scrollToOffset(toOffset, { adjustments: undefined, behavior })\n\n    if (behavior !== 'smooth' && this.isDynamicMode()) {\n      this.scrollToIndexTimeoutId = setTimeout(() => {\n        this.scrollToIndexTimeoutId = null\n\n        const elementInDOM = this.measureElementCache.has(\n          this.options.getItemKey(index),\n        )\n\n        if (elementInDOM) {\n          const [toOffset] = this.getOffsetForIndex(index, align)\n\n          if (!approxEqual(toOffset, this.scrollOffset)) {\n            this.scrollToIndex(index, { align, behavior })\n          }\n        } else {\n          this.scrollToIndex(index, { align, behavior })\n        }\n      })\n    }\n  }\n\n  scrollBy = (delta: number, { behavior }: ScrollToOffsetOptions = {}) => {\n    this.cancelScrollToIndex()\n\n    if (behavior === 'smooth' && this.isDynamicMode()) {\n      console.warn(\n        'The `smooth` scroll behavior is not fully supported with dynamic size.',\n      )\n    }\n\n    this._scrollToOffset(this.scrollOffset + delta, {\n      adjustments: undefined,\n      behavior,\n    })\n  }\n\n  getTotalSize = () =>\n    (this.getMeasurements()[this.options.count - 1]?.end ||\n      this.options.paddingStart) -\n    this.options.scrollMargin +\n    this.options.paddingEnd\n\n  private _scrollToOffset = (\n    offset: number,\n    {\n      adjustments,\n      behavior,\n    }: {\n      adjustments: number | undefined\n      behavior: ScrollBehavior | undefined\n    },\n  ) => {\n    this.options.scrollToFn(offset, { behavior, adjustments }, this)\n  }\n\n  measure = () => {\n    this.itemSizeCache = new Map()\n    this.notify()\n  }\n}\n\nconst findNearestBinarySearch = (\n  low: number,\n  high: number,\n  getCurrentValue: (i: number) => number,\n  value: number,\n) => {\n  while (low <= high) {\n    const middle = ((low + high) / 2) | 0\n    const currentValue = getCurrentValue(middle)\n\n    if (currentValue < value) {\n      low = middle + 1\n    } else if (currentValue > value) {\n      high = middle - 1\n    } else {\n      return middle\n    }\n  }\n\n  if (low > 0) {\n    return low - 1\n  } else {\n    return 0\n  }\n}\n\nfunction calculateRange({\n  measurements,\n  outerSize,\n  scrollOffset,\n}: {\n  measurements: VirtualItem[]\n  outerSize: number\n  scrollOffset: number\n}) {\n  const count = measurements.length - 1\n  const getOffset = (index: number) => measurements[index]!.start\n\n  const startIndex = findNearestBinarySearch(0, count, getOffset, scrollOffset)\n  let endIndex = startIndex\n\n  while (\n    endIndex < count &&\n    measurements[endIndex]!.end < scrollOffset + outerSize\n  ) {\n    endIndex++\n  }\n\n  return { startIndex, endIndex }\n}\n", "import * as React from 'react'\nimport {\n  elementScroll,\n  observeElementOffset,\n  observeElementRect,\n  observeWindowOffset,\n  observeWindowRect,\n  PartialKeys,\n  Virtualizer,\n  VirtualizerOptions,\n  windowScroll,\n} from '@tanstack/virtual-core'\nexport * from '@tanstack/virtual-core'\n\n//\n\nconst useIsomorphicLayoutEffect =\n  typeof document !== 'undefined' ? React.useLayoutEffect : React.useEffect\n\nfunction useVirtualizerBase<\n  TScrollElement extends Element | Window,\n  TItemElement extends Element,\n>(\n  options: VirtualizerOptions<TScrollElement, TItemElement>,\n): Virtualizer<TScrollElement, TItemElement> {\n  const rerender = React.useReducer(() => ({}), {})[1]\n\n  const resolvedOptions: VirtualizerOptions<TScrollElement, TItemElement> = {\n    ...options,\n    onChange: (instance) => {\n      rerender()\n      options.onChange?.(instance)\n    },\n  }\n\n  const [instance] = React.useState(\n    () => new Virtualizer<TScrollElement, TItemElement>(resolvedOptions),\n  )\n\n  instance.setOptions(resolvedOptions)\n\n  React.useEffect(() => {\n    return instance._didMount()\n  }, [])\n\n  useIsomorphicLayoutEffect(() => {\n    return instance._willUpdate()\n  })\n\n  return instance\n}\n\nexport function useVirtualizer<\n  TScrollElement extends Element,\n  TItemElement extends Element,\n>(\n  options: PartialKeys<\n    VirtualizerOptions<TScrollElement, TItemElement>,\n    'observeElementRect' | 'observeElementOffset' | 'scrollToFn'\n  >,\n): Virtualizer<TScrollElement, TItemElement> {\n  return useVirtualizerBase<TScrollElement, TItemElement>({\n    observeElementRect: observeElementRect,\n    observeElementOffset: observeElementOffset,\n    scrollToFn: elementScroll,\n    ...options,\n  })\n}\n\nexport function useWindowVirtualizer<TItemElement extends Element>(\n  options: PartialKeys<\n    VirtualizerOptions<Window, TItemElement>,\n    | 'getScrollElement'\n    | 'observeElementRect'\n    | 'observeElementOffset'\n    | 'scrollToFn'\n  >,\n): Virtualizer<Window, TItemElement> {\n  return useVirtualizerBase<Window, TItemElement>({\n    getScrollElement: () => (typeof document !== 'undefined' ? window : null),\n    observeElementRect: observeWindowRect,\n    observeElementOffset: observeWindowOffset,\n    scrollToFn: windowScroll,\n    ...options,\n  })\n}\n", "import { render, hydrate, unmountComponentAtNode } from 'preact/compat';\n\nexport function createRoot(container) {\n\treturn {\n\t\trender(children) {\n\t\t\trender(children, container);\n\t\t},\n\t\tunmount() {\n\t\t\tunmountComponentAtNode(container);\n\t\t}\n\t};\n}\n\nexport function hydrateRoot(container, children) {\n\thydrate(children, container);\n\treturn createRoot(container);\n}\n\nexport default {\n\tcreateRoot,\n\thydrateRoot\n};\n", "import * as React from \"react\";\nimport { useMemo, useState } from \"react\";\n\nexport interface SelectionSet<TKey, TElement extends HTMLElement> {\n  has(key: TKey): boolean;\n  set(key: TKey, selected: boolean): void;\n  clear(): void;\n  handlers(): {\n    onMouseDown: (event: React.MouseEvent<TElement, MouseEvent>) => void;\n  };\n}\n\nexport enum SelectionMode {\n  None = 0,\n  Single,\n  Multi,\n  MultiSet,\n}\n\nexport function useSelection<TKey, TElement extends HTMLElement>(\n  mode: SelectionMode,\n  keyAccessor: (el: TElement) => TKey,\n  between?: (from: TKey, to: TKey) => ReadonlyArray<TKey>,\n  selectionClassName = \"selected\"\n): SelectionSet<TKey, TElement> {\n  const [selectedKeys, setSelectedKeys] = useState<ImmutableSet<TKey>>(\n    ImmutableSet.empty()\n  );\n  const [anchor, setAnchor] = useState<TKey | null>(null);\n\n  const onMouseDown = (event: React.MouseEvent<TElement, MouseEvent>): void => {\n    if (mode === SelectionMode.None) {\n      return;\n    }\n\n    const el = event.currentTarget as TElement;\n    const key = keyAccessor(el);\n\n    const result = performMouseDownAction<TKey, TElement>(\n      mode,\n      between,\n      selectedKeys,\n      event,\n      key,\n      anchor\n    );\n    if (result) {\n      setSelectedKeys(result.selection);\n      if (typeof result.anchor !== \"undefined\") {\n        setAnchor(result.anchor);\n      }\n      event.preventDefault();\n    }\n  };\n\n  return {\n    has(key: TKey): boolean {\n      return selectedKeys.has(key);\n    },\n\n    set(key: TKey, selected: boolean) {\n      if (selected) {\n        setSelectedKeys(selectedKeys.add(key));\n      } else {\n        setSelectedKeys(selectedKeys.delete(key));\n      }\n    },\n\n    clear() {\n      setSelectedKeys(selectedKeys.clear());\n    },\n\n    handlers() {\n      return { onMouseDown };\n    },\n  };\n}\n\nclass ImmutableSet<T> {\n  private _set: Set<T>;\n\n  private constructor(set: Set<T>) {\n    this._set = set;\n  }\n\n  static empty<T>(): ImmutableSet<T> {\n    return new ImmutableSet(new Set());\n  }\n\n  has(value: T): boolean {\n    return this._set.has(value);\n  }\n\n  add(...values: T[]): ImmutableSet<T> {\n    const newSet = new Set(this._set.keys());\n    for (const value of values) {\n      newSet.add(value);\n    }\n    return new ImmutableSet(newSet);\n  }\n\n  toggle(value: T): ImmutableSet<T> {\n    if (this.has(value)) {\n      return this.delete(value);\n    } else {\n      return this.add(value);\n    }\n  }\n\n  delete(value: T): ImmutableSet<T> {\n    const newSet = new Set(this._set.keys());\n    newSet.delete(value);\n    return new ImmutableSet(newSet);\n  }\n\n  clear(): ImmutableSet<T> {\n    return ImmutableSet.empty();\n  }\n}\nfunction performMouseDownAction<TKey, TElement>(\n  mode: SelectionMode,\n  between: (from: TKey, to: TKey) => readonly TKey[],\n  selectedKeys: ImmutableSet<TKey>,\n  event: React.MouseEvent<TElement, MouseEvent>,\n  key: TKey,\n  anchor: TKey | null\n): { selection: ImmutableSet<TKey>; anchor?: TKey | null } {\n  let { shiftKey, ctrlKey, altKey, metaKey } = event;\n  if (window.navigator.platform.match(/^Mac/)) {\n    [ctrlKey, metaKey] = [metaKey, ctrlKey];\n  }\n\n  if (mode === SelectionMode.MultiSet) {\n    return { selection: selectedKeys.toggle(key) };\n  } else if (mode === SelectionMode.Single) {\n    return { selection: ImmutableSet.empty<TKey>().add(key) };\n  } else if (mode === SelectionMode.Multi) {\n    if (ctrlKey && !shiftKey) {\n      // Ctrl-click: toggle the current row and make it anchor\n      return { selection: selectedKeys.toggle(key), anchor: key };\n    } else if (shiftKey && !ctrlKey) {\n      // Shift-click: replace selection with anchor row through current row\n      if (anchor !== null && between) {\n        const toSelect = between(anchor, key);\n        return { selection: ImmutableSet.empty<TKey>().add(...toSelect) };\n      }\n    } else if (shiftKey && ctrlKey) {\n      // Ctrl-Shift-click: Add anchor row through current row to selection\n      const toSelect = between(anchor, key);\n      return { selection: selectedKeys.add(...toSelect) };\n    } else if (!shiftKey && !ctrlKey) {\n      // Regular click: Select the current row and make it anchor\n      return { selection: ImmutableSet.empty<TKey>().add(key), anchor: key };\n    } else {\n      return;\n    }\n    event.preventDefault();\n  }\n}\n", "import React from \"react\";\n\nconst sortCommonProps = {\n  className: \"sort-arrow\",\n  viewBox: [-1, -1, 2, 2].map((x) => x * 1.4).join(\" \"),\n  width: \"100%\",\n  height: \"100%\",\n  style: { paddingLeft: \"3px\" },\n};\n\nconst sortPathCommonProps = {\n  stroke: \"#333333\",\n  strokeWidth: \"0.6\",\n  fill: \"transparent\",\n};\n\nexport const sortArrowUp = (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" {...sortCommonProps}>\n    <path\n      d=\"M -1 0.5 L 0 -0.5 L 1 0.5\"\n      {...sortPathCommonProps}\n      strokeLinecap=\"round\"\n    />\n  </svg>\n);\n\nexport const sortArrowDown = (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" {...sortCommonProps}>\n    <path\n      d=\"M -1 -0.5 L 0 0.5 L 1 -0.5\"\n      {...sortPathCommonProps}\n      strokeLinecap=\"round\"\n    />\n  </svg>\n);\n\n//const sortArrowUp = <span className=\"sort-arrow sort-arrow-up\"> \u25B2</span>;\n//const sortArrowDown = <span className=\"sort-arrow sort-arrow-down\"> \u25BC</span>;\n", "import { VirtualItem } from \"@tanstack/react-virtual\";\nimport React, { useMemo } from \"react\";\n\n/**\n * Create a summary\n *\n * @param summaryTemplate A string with \"{start}\", \"{end}\", and \"{total}\"\n * @param scrollContainer Scrolling container of the table/grid\n * @param virtualRows VirtualItem objects that might currently be visible\n * @param thead The thead tag of the table\n * @param nrows Number of total rows of data that exist\n */\nexport function useSummary(\n  summaryTemplate: string | boolean | null,\n  scrollContainer: HTMLElement | null,\n  virtualRows: VirtualItem[],\n  thead: HTMLTableSectionElement,\n  nrows: number\n): JSX.Element | null {\n  return useMemo(() => {\n    const summaryOption = summaryTemplate ?? true;\n    if (!summaryOption) {\n      return null;\n    }\n\n    const template =\n      typeof summaryOption === \"string\"\n        ? summaryOption\n        : \"Viewing rows {start} through {end} of {total}\";\n\n    if (!scrollContainer) {\n      return null;\n    }\n    if (virtualRows.length === 0) {\n      return null;\n    }\n\n    const top = scrollContainer.scrollTop;\n    const bot = top + scrollContainer.clientHeight - thead.clientHeight;\n\n    const [firstIndex, lastIndex] = findRangeIndex(\n      top,\n      bot,\n      virtualRows,\n      (vrow, start) => vrow.start + vrow.size / 2\n    );\n\n    if (firstIndex === null || lastIndex === null) {\n      // Something must've gone wrong if there are rows but none of them are within the\n      // visible scroll area... shrug\n      return null;\n    }\n\n    const firstRow = virtualRows[firstIndex];\n    const lastRow = virtualRows[lastIndex];\n\n    if (firstRow.index === 0 && lastRow.index === nrows - 1) {\n      // Viewing all rows; no need for a summary\n      return null;\n    }\n\n    const summaryMessage = formatSummary(\n      template,\n      firstRow.index + 1,\n      lastRow.index + 1,\n      nrows\n    );\n\n    return <div className=\"shiny-data-grid-summary\">{summaryMessage}</div>;\n  }, [summaryTemplate, scrollContainer, virtualRows, thead, nrows]);\n}\n\n/**\n * Find the subset of (sorted) items that are between start and end (inclusive), where\n * each item's value to compare is calculated by a mapping function. The mapping\n * function may behave differently when comparing to start vs. end.\n *\n * @param start The smallest value to include.\n * @param end The largest value to include.\n * @param items A set of items to be evaluated, in sorted order.\n * @param map A function for converting from an item to a comparison value; for example,\n *   if 'start' and 'end' are vertical pixel coordinates, then the function might\n *   return the item's vertical top (for start) or bottom (for end) coordinate.\n * @returns The start and end indexes into the 'items' array indicating the first and\n *   last item that is included.\n */\nfunction findRangeIndex<TItem>(\n  start: number,\n  end: number,\n  items: TItem[],\n  map: (x: TItem, start: boolean) => number\n): [first: number | null, last: number | null] {\n  let first: number | null = null;\n  let last: number | null = null;\n\n  for (let i = 0; i < items.length; i++) {\n    const item = items[i];\n    if (first === null) {\n      if (map(item, true) >= start) {\n        first = i;\n        last = i;\n      }\n    } else {\n      if (map(item, false) <= end) {\n        last = i;\n      } else {\n        break;\n      }\n    }\n  }\n\n  return [first, last];\n}\n\nfunction formatSummary(\n  template: string,\n  start: number,\n  end: number,\n  total: number\n) {\n  return template.replace(/\\{(start|end|total)\\}/g, (substr, token) => {\n    if (token === \"start\") {\n      return start + \"\";\n    } else if (token === \"end\") {\n      return end + \"\";\n    } else if (token === \"total\") {\n      return total + \"\";\n    } else {\n      return substr;\n    }\n  });\n}\n", "import css from \"./styles.scss\";\n\nimport {\n  ColumnDef,\n  Row,\n  RowModel,\n  Table,\n  TableOptions,\n  flexRender,\n  getCoreRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\";\nimport { VirtualItem, useVirtualizer } from \"@tanstack/react-virtual\";\nimport React, {\n  FC,\n  StrictMode,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from \"react\";\nimport { Root, createRoot } from \"react-dom/client\";\nimport { SelectionMode, useSelection } from \"./selection\";\nimport { sortArrowDown, sortArrowUp } from \"./sort-arrows\";\nimport { useSummary } from \"./table-summary\";\nimport { CellData } from \"./types\";\n\n// TODO: Right-align numeric columns, maybe change font\n// TODO: Row selection\n// TODO: Explicit column widths\n// TODO: Filtering\n// TODO: Editing\n// TODO: Pagination\n// TODO: Range selection + copying\n// TODO: Find\n// TODO: Server-side mode (don't pull all data to client at once)\n// TODO: Localization of summary\n// TODO: Accessibility review\n// TODO: Drag to resize columns\n// TODO: Drag to resize table/grid\n// TODO: Row numbers\n\ninterface DataGridOptions {\n  style?: \"table\" | \"grid\";\n  summary?: boolean | string;\n}\n\ninterface PandasData {\n  columns: ReadonlyArray<string>;\n  index: ReadonlyArray<string>;\n  data: CellData;\n  options: DataGridOptions;\n  width?: string;\n  height?: string;\n}\n\ninterface ShinyDataGridProps {\n  data: PandasData;\n  bgcolor?: string;\n  width?: string;\n  height?: string;\n}\n\nconst ShinyDataGrid: FC<ShinyDataGridProps> = (props) => {\n  const { data, bgcolor, width, height } = props;\n  const { columns, data: rowData } = data;\n\n  const containerRef = useRef<HTMLDivElement>(null);\n  const theadRef = useRef<HTMLTableSectionElement>(null);\n  const tbodyRef = useRef<HTMLTableSectionElement>(null);\n\n  const rowVirtualizer = useVirtualizer({\n    count: rowData.length,\n    getScrollElement: () => containerRef.current,\n    estimateSize: () => 50,\n  });\n\n  // Reset scroll when dataset changes\n  useLayoutEffect(() => {\n    rowVirtualizer.scrollToOffset(0);\n  }, [data]);\n\n  const totalSize = rowVirtualizer.getTotalSize();\n  const virtualRows = rowVirtualizer.getVirtualItems();\n\n  const coldefs = useMemo<ColumnDef<unknown[], unknown>[]>(\n    () =>\n      columns.map((colname, i) => {\n        return {\n          accessorFn: (row, index) => {\n            return row[i];\n          },\n          header: colname,\n        };\n      }),\n    [columns]\n  );\n\n  // Not sure if it's even necessary to clone\n  const dataClone = useMemo(() => [...rowData], [rowData]);\n\n  const options: TableOptions<unknown[]> = {\n    data: dataClone,\n    columns: coldefs,\n    getCoreRowModel: getCoreRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    //debugAll: true,\n  };\n  const table = useReactTable(options);\n\n  // paddingTop and paddingBottom are to force the <tbody> to add up to the correct\n  // virtual height\n  const paddingTop = virtualRows.length > 0 ? virtualRows?.[0]?.start || 0 : 0;\n  const paddingBottom =\n    virtualRows.length > 0\n      ? totalSize - (virtualRows?.[virtualRows.length - 1]?.end || 0)\n      : 0;\n\n  const summary = useSummary(\n    data.options.summary,\n    containerRef?.current,\n    virtualRows,\n    theadRef.current,\n    rowData.length\n  );\n\n  const tableStyle = data.options.style ?? \"grid\";\n  const containerClass =\n    tableStyle === \"grid\" ? \"shiny-data-grid-grid\" : \"shiny-data-grid-table\";\n  const tableClass = tableStyle === \"table\" ? \"table table-sm\" : null;\n\n  const rowSelection = useSelection<string, HTMLTableRowElement>(\n    SelectionMode.Multi,\n    (el) => el.dataset.key,\n    (fromKey, toKey) => {\n      // TODO: Refactor into separate/pure function\n      const rowModel = table.getSortedRowModel();\n      let fromIdx = rowModel.rows.findIndex((row) => row.id === fromKey);\n      let toIdx = rowModel.rows.findIndex((row) => row.id === toKey);\n      if (fromIdx < 0 || toIdx < 0) {\n        return [];\n      }\n      if (fromIdx > toIdx) {\n        // Swap order to simplify things\n        [fromIdx, toIdx] = [toIdx, fromIdx];\n      }\n      const keys = [];\n      for (let i = fromIdx; i <= toIdx; i++) {\n        keys.push(rowModel.rows[i].id);\n      }\n      return keys;\n    },\n    \"selected\"\n  );\n\n  // Reset sorting whenever dataset changes\n  useEffect(() => {\n    return () => {\n      table.resetSorting();\n      rowSelection.clear();\n    };\n  }, [data]);\n\n  const headerRowCount = table.getHeaderGroups().length;\n\n  const scrollingClass =\n    containerRef.current?.scrollHeight > containerRef.current?.clientHeight\n      ? \"scrolling\"\n      : \"\";\n  return (\n    <>\n      <div\n        className={`shiny-data-grid ${containerClass} ${scrollingClass}`}\n        ref={containerRef}\n        style={{ width, maxHeight: height, overflow: \"auto\" }}\n      >\n        <table\n          className={tableClass}\n          aria-rowcount={rowData.length}\n          style={{ width: width === null || width === \"auto\" ? null : \"100%\" }}\n        >\n          <thead ref={theadRef} style={{ backgroundColor: bgcolor }}>\n            {table.getHeaderGroups().map((headerGroup, i) => (\n              <tr key={headerGroup.id} aria-rowindex={i + 1}>\n                {headerGroup.headers.map((header) => {\n                  return (\n                    <th\n                      key={header.id}\n                      colSpan={header.colSpan}\n                      style={{ width: header.getSize() }}\n                      scope=\"col\"\n                    >\n                      {header.isPlaceholder ? null : (\n                        <div\n                          style={{\n                            cursor: header.column.getCanSort()\n                              ? \"pointer\"\n                              : null,\n                            userSelect: header.column.getCanSort()\n                              ? \"none\"\n                              : null,\n                          }}\n                          onClick={header.column.getToggleSortingHandler()}\n                        >\n                          {flexRender(\n                            header.column.columnDef.header,\n                            header.getContext()\n                          )}\n                          {{\n                            asc: sortArrowUp,\n                            desc: sortArrowDown,\n                          }[header.column.getIsSorted() as string] ?? null}\n                        </div>\n                      )}\n                    </th>\n                  );\n                })}\n              </tr>\n            ))}\n          </thead>\n          <tbody ref={tbodyRef}>\n            {paddingTop > 0 && <tr style={{ height: `${paddingTop}px` }}></tr>}\n            {virtualRows.map((virtualRow) => {\n              const row = table.getRowModel().rows[virtualRow.index];\n              return (\n                <tr\n                  key={virtualRow.key}\n                  data-index={virtualRow.index}\n                  aria-rowindex={virtualRow.index + headerRowCount}\n                  data-key={row.id}\n                  ref={rowVirtualizer.measureElement}\n                  className={rowSelection.has(row.id) ? \"selected\" : undefined}\n                  {...rowSelection.handlers()}\n                >\n                  {row.getVisibleCells().map((cell) => {\n                    return (\n                      <td key={cell.id}>\n                        {flexRender(\n                          cell.column.columnDef.cell,\n                          cell.getContext()\n                        )}\n                      </td>\n                    );\n                  })}\n                </tr>\n              );\n            })}\n            {paddingBottom > 0 && (\n              <tr style={{ height: `${paddingBottom}px` }}></tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n      {summary}\n    </>\n  );\n};\n\nclass ShinyDataGridBinding extends Shiny.OutputBinding {\n  find(scope: HTMLElement | JQuery<HTMLElement>): JQuery<HTMLElement> {\n    return $(scope).find(\"shiny-data-grid-output\");\n  }\n\n  renderValue(el: ShinyDataGridOutput, data: unknown): void {\n    el.renderValue(data);\n  }\n}\nShiny.outputBindings.register(new ShinyDataGridBinding(), \"shinyDataGrid\");\n\nfunction getComputedBgColor(el: HTMLElement | null): string | null | undefined {\n  if (!el) {\n    // Top of document, can't recurse further\n    return null;\n  }\n\n  const bgColor = getStyle(el, \"background-color\");\n\n  if (!bgColor) return bgColor;\n  const m = bgColor.match(\n    /^rgba\\(\\s*([\\d.]+)\\s*,\\s*([\\d.]+)\\s*,\\s*([\\d.]+)\\s*,\\s*([\\d.]+)\\s*\\)$/\n  );\n\n  if (bgColor === \"transparent\" || (m && parseFloat(m[4]) === 0)) {\n    // No background color on this element. See if it has a background image.\n    const bgImage = getStyle(el, \"background-image\");\n\n    if (bgImage && bgImage !== \"none\") {\n      // Failed to detect background color, since it has a background image\n      return null;\n    } else {\n      // Recurse\n      return getComputedBgColor(el.parentElement);\n    }\n  }\n  return bgColor;\n}\n\nfunction getStyle(el: Element, styleProp: string): string | undefined {\n  // getComputedStyle can return null when we're inside a hidden iframe on\n  // Firefox; don't attempt to retrieve style props in this case.\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n  return document?.defaultView\n    ?.getComputedStyle(el, null)\n    ?.getPropertyValue(styleProp);\n}\n\n// class MyReactShinyBinding extends Shiny.ReactOutputBinding {\n//   createComponent(): ReactElement {\n//     function(props) {\n//       const data = useShinyValue();\n//     }\n//   }\n// }\n\n// function MyReactDataGrid(props) {\n//   const { data, error } = useShinyValue<PandasData>();\n//   if (error) {\n//     return <div>Bad</div>\n//   }\n//   // ...\n// }\n// Shiny.outputBindings.registerReact(MyReactDataGrid, \".shiny-data-grid-output\");\n\nconst cssTemplate = document.createElement(\"template\");\ncssTemplate.innerHTML = `<style>${css}</style>`;\n\nexport class ShinyDataGridOutput extends HTMLElement {\n  reactRoot?: Root;\n\n  connectedCallback() {\n    this.attachShadow({ mode: \"open\" });\n\n    this.shadowRoot!.appendChild(cssTemplate.content.cloneNode(true));\n\n    const myDiv = document.createElement(\"div\");\n    this.shadowRoot!.appendChild(myDiv);\n\n    this.reactRoot = createRoot(myDiv);\n\n    // If there is a <script class=\"data\"> element it contains static data.\n    // Render it now.\n    const dataEl = this.querySelector(\n      \"script.data\"\n    ) as HTMLScriptElement | null;\n    if (dataEl) {\n      const data = JSON.parse(dataEl.innerText);\n      this.renderValue(data);\n    }\n  }\n\n  renderValue(data: unknown) {\n    const {\n      columns,\n      index,\n      data: rows,\n      options,\n      width,\n      height,\n    } = data as PandasData;\n\n    if (!data) {\n      return;\n    }\n\n    this.reactRoot!.render(\n      <StrictMode>\n        <ShinyDataGrid\n          data={data as PandasData}\n          bgcolor={getComputedBgColor(this)}\n          width={width ?? \"100%\"}\n          height={height ?? \"500px\"}\n        ></ShinyDataGrid>\n      </StrictMode>\n    );\n  }\n}\n\ncustomElements.define(\"shiny-data-grid-output\", ShinyDataGridOutput);\n"],
  "mappings": "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",
  "names": ["slice", "options", "vnodeId", "isValidElement", "rerenderQueue", "prevDebounce", "defer", "depthSort", "i", "EMPTY_OBJ", "EMPTY_ARR", "IS_NON_DIMENSIONAL", "isArray", "Array", "assign", "obj", "props", "removeNode", "node", "parentNode", "removeChild", "createElement", "type", "children", "key", "ref", "normalizedProps", "arguments", "length", "call", "defaultProps", "createVNode", "original", "vnode", "__k", "__", "__b", "__e", "__d", "__c", "__h", "constructor", "__v", "createRef", "current", "Fragment", "Component", "context", "this", "getDomSibling", "childIndex", "indexOf", "sibling", "updateParentDomPointers", "child", "base", "enqueueRender", "c", "push", "process", "__r", "debounceRendering", "renderQueueLength", "component", "commitQueue", "oldVNode", "oldDom", "parentDom", "sort", "shift", "__P", "diff", "__n", "ownerSVGElement", "commitRoot", "diffChildren", "renderResult", "newParentVNode", "oldParentVNode", "globalContext", "isSvg", "excessDomChildren", "isHydrating", "j", "childVNode", "newDom", "firstChildDom", "refs", "oldChildren", "oldChildrenLength", "reorderChildren", "placeChild", "getLastDom", "nextSibling", "unmount", "applyRef", "tmp", "toChildArray", "out", "some", "nextDom", "sibDom", "outer", "appendChild", "insertBefore", "lastDom", "diffProps", "dom", "newProps", "oldProps", "hydrate", "setProperty", "setStyle", "style", "value", "test", "name", "oldValue", "useCapture", "o", "cssText", "replace", "toLowerCase", "l", "addEventListener", "eventProxyCapture", "eventProxy", "removeEventListener", "e", "removeAttribute", "setAttribute", "event", "newVNode", "isNew", "oldState", "snapshot", "clearProcessingException", "provider", "componentContext", "renderHook", "count", "newType", "contextType", "__E", "prototype", "render", "doRender", "sub", "state", "_sb", "__s", "getDerivedStateFromProps", "componentWillMount", "componentDidMount", "componentWillReceiveProps", "shouldComponentUpdate", "forEach", "componentWillUpdate", "componentDidUpdate", "getChildContext", "getSnapshotBeforeUpdate", "diffElementNodes", "diffed", "root", "cb", "oldHtml", "newHtml", "nodeType", "localName", "document", "createTextNode", "createElementNS", "is", "data", "childNodes", "dangerouslySetInnerHTML", "attributes", "__html", "innerHTML", "checked", "parentVNode", "skipRemove", "r", "componentWillUnmount", "replaceNode", "firstChild", "cloneElement", "createContext", "defaultValue", "contextId", "Consumer", "contextValue", "Provider", "subs", "ctx", "_props", "old", "splice", "error", "errorInfo", "ctor", "handled", "getDerivedStateFromError", "setState", "componentDidCatch", "update", "callback", "s", "forceUpdate", "Promise", "then", "bind", "resolve", "setTimeout", "a", "b", "currentIndex", "currentComponent", "previousComponent", "prevRaf", "currentHook", "afterPaintEffects", "EMPTY", "oldBeforeDiff", "options", "__b", "oldBeforeRender", "__r", "oldAfterDiff", "diffed", "oldCommit", "__c", "oldBeforeUnmount", "unmount", "getHookState", "index", "type", "__h", "hooks", "__H", "__", "length", "push", "__V", "useState", "initialState", "useReducer", "invokeOrReturn", "reducer", "init", "hookState", "_reducer", "action", "currentValue", "__N", "nextValue", "setState", "_hasScuFromHooks", "updateHookState", "p", "s", "c", "stateHooks", "filter", "x", "every", "prevScu", "call", "this", "shouldUpdate", "forEach", "hookItem", "props", "shouldComponentUpdate", "prevCWU", "componentWillUpdate", "__e", "tmp", "useEffect", "callback", "args", "state", "__s", "argsChanged", "_pendingArgs", "useLayoutEffect", "useRef", "initialValue", "useMemo", "current", "useImperativeHandle", "ref", "createHandle", "concat", "factory", "useCallback", "useContext", "context", "provider", "sub", "value", "useDebugValue", "formatter", "useId", "state", "getHookState", "currentIndex", "__", "root", "currentComponent", "__v", "__m", "mask", "flushAfterPaintEffects", "component", "afterPaintEffects", "shift", "__P", "__H", "__h", "forEach", "invokeCleanup", "invokeEffect", "e", "options", "__e", "__b", "vnode", "oldBeforeDiff", "__r", "oldBeforeRender", "hooks", "__c", "previousComponent", "hookItem", "__N", "EMPTY", "_pendingArgs", "diffed", "oldAfterDiff", "c", "length", "push", "prevRaf", "requestAnimationFrame", "afterNextFrame", "__V", "commitQueue", "some", "filter", "cb", "oldCommit", "unmount", "oldBeforeUnmount", "hasErrored", "s", "HAS_RAF", "callback", "raf", "done", "clearTimeout", "timeout", "cancelAnimationFrame", "setTimeout", "hook", "comp", "cleanup", "argsChanged", "oldArgs", "newArgs", "arg", "index", "invokeOrReturn", "f", "assign", "obj", "props", "i", "shallowDiffers", "a", "b", "is", "x", "y", "PureComponent", "p", "this", "memo", "c", "comparer", "shouldUpdate", "nextProps", "ref", "updateRef", "call", "current", "Memoed", "shouldComponentUpdate", "createElement", "displayName", "name", "prototype", "isReactComponent", "Component", "isPureReactComponent", "state", "oldDiffHook", "options", "__b", "vnode", "type", "__f", "REACT_FORWARD_SYMBOL", "Symbol", "for", "forwardRef", "fn", "Forwarded", "clone", "$$typeof", "render", "mapFn", "children", "toChildArray", "map", "Children", "forEach", "count", "length", "only", "normalized", "toArray", "oldCatchError", "__e", "error", "newVNode", "oldVNode", "errorInfo", "then", "component", "__c", "__k", "oldUnmount", "unmount", "detachedClone", "detachedParent", "parentDom", "effect", "__H", "__P", "child", "removeOriginal", "originalParent", "__v", "insertBefore", "__d", "Suspense", "__u", "_suspenders", "suspended", "__", "__a", "lazy", "loader", "prom", "Lazy", "exports", "default", "e", "SuspenseList", "_next", "_map", "__R", "__h", "promise", "suspendingVNode", "suspendingComponent", "push", "resolve", "resolved", "onResolved", "onSuspensionComplete", "suspendedVNode", "setState", "pop", "forceUpdate", "wasHydrating", "componentWillUnmount", "document", "detachedComponent", "__O", "fallback", "Fragment", "list", "node", "delete", "revealOrder", "size", "ContextProvider", "getChildContext", "context", "Portal", "_this", "container", "_container", "_temp", "nodeType", "parentNode", "childNodes", "appendChild", "before", "removeChild", "splice", "indexOf", "createPortal", "el", "containerInfo", "delegated", "get", "unsuspend", "wrappedUnsuspend", "Map", "reverse", "set", "componentDidUpdate", "componentDidMount", "REACT_ELEMENT_TYPE", "CAMEL_PROPS", "ON_ANI", "CAMEL_REPLACE", "IS_DOM", "onChangeInputType", "test", "parent", "callback", "textContent", "preactRender", "hydrate", "preactHydrate", "key", "Object", "defineProperty", "configurable", "v", "writable", "value", "oldEventHook", "event", "empty", "isPropagationStopped", "cancelBubble", "isDefaultPrevented", "defaultPrevented", "persist", "nativeEvent", "currentComponent", "classNameDescriptorNonEnumberable", "enumerable", "class", "oldVNodeHook", "normalizedProps", "lowerCased", "toLowerCase", "replace", "multiple", "Array", "isArray", "selected", "defaultValue", "className", "oldBeforeRender", "__r", "oldDiffed", "diffed", "dom", "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED", "ReactCurrentDispatcher", "readContext", "__n", "createFactory", "type", "createElement", "bind", "isValidElement", "element", "$$typeof", "REACT_ELEMENT_TYPE", "cloneElement", "preactCloneElement", "apply", "arguments", "unmountComponentAtNode", "container", "__k", "preactRender", "findDOMNode", "component", "base", "nodeType", "unstable_batchedUpdates", "callback", "arg", "flushSync", "StrictMode", "Fragment", "startTransition", "cb", "useDeferredValue", "val", "useTransition", "useInsertionEffect", "useLayoutEffect", "useSyncExternalStore", "subscribe", "getSnapshot", "value", "_useState", "useState", "_instance", "__", "_getSnapshot", "forceUpdate", "is", "useEffect", "index", "useId", "useReducer", "useRef", "useImperativeHandle", "useMemo", "useCallback", "useContext", "useDebugValue", "version", "Children", "render", "hydrate", "createPortal", "createContext", "createRef", "Component", "PureComponent", "memo", "forwardRef", "Suspense", "SuspenseList", "lazy", "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED", "functionalUpdate", "updater", "input", "makeStateUpdater", "key", "instance", "updater", "setState", "old", "functionalUpdate", "isFunction", "d", "Function", "isNumberArray", "Array", "isArray", "every", "val", "flattenBy", "arr", "getChildren", "flat", "recurse", "subArr", "forEach", "item", "push", "children", "length", "memo", "getDeps", "fn", "opts", "deps", "result", "depTime", "debug", "Date", "now", "newDeps", "depsChanged", "some", "dep", "index", "resultTime", "onChange", "depEndTime", "Math", "round", "resultEndTime", "resultFpsPercentage", "pad", "str", "num", "String", "console", "info", "max", "min", "createColumn", "table", "columnDef", "depth", "parent", "_ref", "_resolvedColumnDef$id", "defaultColumn", "_getDefaultColumnDef", "resolvedColumnDef", "accessorKey", "id", "replace", "undefined", "header", "accessorFn", "includes", "originalRow", "split", "_result", "warn", "process", "Error", "column", "columns", "getFlatColumns", "_column$columns", "flatMap", "_table$options$debugA", "options", "debugAll", "debugColumns", "getLeafColumns", "_getOrderColumnsFn", "orderColumns", "_column$columns2", "leafColumns", "_table$options$debugA2", "_features", "reduce", "obj", "feature", "Object", "assign", "createHeader", "_options$id", "isPlaceholder", "placeholderId", "subHeaders", "colSpan", "rowSpan", "headerGroup", "getLeafHeaders", "leafHeaders", "recurseHeader", "h", "map", "getContext", "Headers", "createTable", "getHeaderGroups", "getAllColumns", "getVisibleLeafColumns", "getState", "columnPinning", "left", "right", "allColumns", "_left$map$filter", "_right$map$filter", "leftColumns", "columnId", "find", "filter", "Boolean", "rightColumns", "centerColumns", "headerGroups", "buildHeaderGroups", "debugHeaders", "getCenterHeaderGroups", "getLeftHeaderGroups", "_left$map$filter2", "orderedLeafColumns", "_table$options$debugA3", "getRightHeaderGroups", "_right$map$filter2", "_table$options$debugA4", "getFooterGroups", "reverse", "_table$options$debugA5", "getLeftFooterGroups", "_table$options$debugA6", "getCenterFooterGroups", "_table$options$debugA7", "getRightFooterGroups", "_table$options$debugA8", "getFlatHeaders", "headers", "_table$options$debugA9", "getLeftFlatHeaders", "_table$options$debugA10", "getCenterFlatHeaders", "_table$options$debugA11", "getRightFlatHeaders", "_table$options$debugA12", "getCenterLeafHeaders", "flatHeaders", "_header$subHeaders", "_table$options$debugA13", "getLeftLeafHeaders", "_header$subHeaders2", "_table$options$debugA14", "getRightLeafHeaders", "_header$subHeaders3", "_table$options$debugA15", "center", "_left$0$headers", "_left$", "_center$0$headers", "_center$", "_right$0$headers", "_right$", "_table$options$debugA16", "columnsToGroup", "headerFamily", "_headerGroups$0$heade", "_headerGroups$", "maxDepth", "findMaxDepth", "getIsVisible", "createHeaderGroup", "headersToGroup", "join", "pendingParentHeaders", "headerToGroup", "latestPendingParentHeader", "isLeafHeader", "bottomHeaders", "recurseHeadersForSpans", "filteredHeaders", "childRowSpans", "childColSpan", "childRowSpan", "minChildRowSpan", "defaultColumnSizing", "size", "minSize", "maxSize", "Number", "MAX_SAFE_INTEGER", "getDefaultColumnSizingInfoState", "startOffset", "startSize", "deltaOffset", "deltaPercentage", "isResizingColumn", "columnSizingStart", "ColumnSizing", "getDefaultColumnDef", "getInitialState", "state", "columnSizing", "columnSizingInfo", "getDefaultOptions", "columnResizeMode", "onColumnSizingChange", "onColumnSizingInfoChange", "getSize", "_column$columnDef$min", "_column$columnDef$max", "columnSize", "getStart", "position", "getLeftVisibleLeafColumns", "getRightVisibleLeafColumns", "findIndex", "prevSiblingColumn", "resetSize", "setColumnSizing", "_ref2", "_", "rest", "getCanResize", "_column$columnDef$ena", "_table$options$enable", "enableResizing", "enableColumnResizing", "getIsResizing", "sum", "_header$column$getSiz", "prevSiblingHeader", "getResizeHandler", "getColumn", "canResize", "e", "persist", "isTouchStartEvent", "touches", "clientX", "newColumnSizing", "updateOffset", "eventType", "clientXPos", "setColumnSizingInfo", "_old$startOffset", "_old$startSize", "_ref3", "headerSize", "onMove", "onEnd", "mouseEvents", "moveHandler", "upHandler", "document", "removeEventListener", "touchEvents", "cancelable", "preventDefault", "stopPropagation", "_e$touches$", "passiveIfSupported", "passiveEventSupported", "passive", "addEventListener", "resetColumnSizing", "defaultState", "_table$initialState$c", "initialState", "resetHeaderSizeInfo", "_table$initialState$c2", "getTotalSize", "_table$getHeaderGroup", "_table$getHeaderGroup2", "getLeftTotalSize", "_table$getLeftHeaderG", "_table$getLeftHeaderG2", "getCenterTotalSize", "_table$getCenterHeade", "_table$getCenterHeade2", "getRightTotalSize", "_table$getRightHeader", "_table$getRightHeader2", "passiveSupported", "supported", "noop", "window", "err", "type", "Expanding", "expanded", "onExpandedChange", "paginateExpandedRows", "registered", "queued", "_autoResetExpanded", "_table$options$autoRe", "_queue", "autoResetAll", "autoResetExpanded", "manualExpanding", "resetExpanded", "setExpanded", "toggleAllRowsExpanded", "getIsAllRowsExpanded", "_table$initialState$e", "_table$initialState", "getCanSomeRowsExpand", "getPrePaginationRowModel", "flatRows", "row", "getCanExpand", "getToggleAllRowsExpandedHandler", "getIsSomeRowsExpanded", "values", "keys", "getRowModel", "getIsExpanded", "getExpandedDepth", "rowIds", "rowsById", "splitId", "getPreExpandedRowModel", "getSortedRowModel", "getExpandedRowModel", "_getExpandedRowModel", "createRow", "toggleExpanded", "_expanded", "exists", "oldExpanded", "rowId", "_table$options$getIsR", "getIsRowExpanded", "_table$options$getRow", "_row$subRows", "getRowCanExpand", "enableExpanding", "subRows", "getToggleExpandedHandler", "canExpand", "includesString", "filterValue", "_row$getValue", "_row$getValue$toStrin", "_row$getValue$toStrin2", "search", "toLowerCase", "getValue", "toString", "autoRemove", "testFalsey", "includesStringSensitive", "_row$getValue2", "_row$getValue2$toStri", "equalsString", "_row$getValue3", "_row$getValue3$toStri", "arrIncludes", "_row$getValue4", "arrIncludesAll", "_row$getValue5", "arrIncludesSome", "_row$getValue6", "equals", "weakEquals", "inNumberRange", "rowValue", "resolveFilterValue", "unsafeMin", "unsafeMax", "parsedMin", "parseFloat", "parsedMax", "isNaN", "Infinity", "temp", "filterFns", "Filters", "filterFn", "columnFilters", "globalFilter", "onColumnFiltersChange", "onGlobalFilterChange", "filterFromLeafRows", "maxLeafRowFilterDepth", "globalFilterFn", "getColumnCanGlobalFilter", "_table$getCoreRowMode", "_table$getCoreRowMode2", "value", "getCoreRowModel", "_getAllCellsByColumnId", "getAutoFilterFn", "firstRow", "getFilterFn", "_table$options$filter", "_table$options$filter2", "getCanFilter", "_table$options$enable2", "enableColumnFilter", "enableColumnFilters", "enableFilters", "getCanGlobalFilter", "_column$columnDef$ena2", "_table$options$enable3", "_table$options$enable4", "_table$options$getCol", "enableGlobalFilter", "getIsFiltered", "getFilterIndex", "getFilterValue", "_table$getState$colum", "_table$getState$colum2", "_table$getState$colum3", "_table$getState$colum4", "setFilterValue", "setColumnFilters", "previousfilter", "newFilter", "shouldAutoRemoveFilter", "_old$filter", "newFilterObj", "_old$map", "_getFacetedRowModel", "getFacetedRowModel", "getPreFilteredRowModel", "_getFacetedUniqueValues", "getFacetedUniqueValues", "Map", "_getFacetedMinMaxValues", "getFacetedMinMaxValues", "columnFiltersMeta", "getGlobalAutoFilterFn", "getGlobalFilterFn", "_table$options$filter3", "_table$options$filter4", "getAllLeafColumns", "updateFn", "_functionalUpdate", "setGlobalFilter", "resetGlobalFilter", "resetColumnFilters", "getFilteredRowModel", "_getFilteredRowModel", "manualFiltering", "_getGlobalFacetedRowModel", "getGlobalFacetedRowModel", "_getGlobalFacetedUniqueValues", "getGlobalFacetedUniqueValues", "_getGlobalFacetedMinMaxValues", "getGlobalFacetedMinMaxValues", "_leafRows", "childRows", "next", "nextValue", "extent", "mean", "leafRows", "count", "median", "mid", "floor", "nums", "sort", "a", "b", "unique", "from", "Set", "uniqueCount", "_columnId", "aggregationFns", "Grouping", "aggregatedCell", "props", "_toString", "_props$getValue", "aggregationFn", "grouping", "onGroupingChange", "groupedColumnMode", "toggleGrouping", "setGrouping", "getCanGroup", "enableGrouping", "getIsGrouped", "_table$getState$group", "getGroupedIndex", "_table$getState$group2", "indexOf", "getToggleGroupingHandler", "canGroup", "getAutoAggregationFn", "prototype", "call", "getAggregationFn", "_table$options$aggreg", "_table$options$aggreg2", "resetGrouping", "_table$initialState$g", "getPreGroupedRowModel", "getGroupedRowModel", "_getGroupedRowModel", "manualGrouping", "groupingColumnId", "getGroupingValue", "_groupingValuesCache", "hasOwnProperty", "original", "createCell", "cell", "getIsPlaceholder", "getIsAggregated", "nonGroupingColumns", "col", "groupingColumns", "g", "Ordering", "columnOrder", "onColumnOrderChange", "setColumnOrder", "resetColumnOrder", "orderedColumns", "columnOrderCopy", "columnsCopy", "targetColumnId", "shift", "foundIndex", "splice", "defaultPageIndex", "defaultPageSize", "getDefaultPaginationState", "pageIndex", "pageSize", "Pagination", "pagination", "onPaginationChange", "_autoResetPageIndex", "autoResetPageIndex", "manualPagination", "resetPageIndex", "setPagination", "safeUpdater", "newState", "resetPagination", "_table$initialState$p", "setPageIndex", "maxPageIndex", "pageCount", "_table$initialState$p2", "_table$initialState$p3", "resetPageSize", "_table$initialState$p4", "_table$initialState2", "_table$initialState2$", "setPageSize", "topRowIndex", "setPageCount", "_table$options$pageCo", "newPageCount", "getPageOptions", "getPageCount", "pageOptions", "fill", "i", "debugTable", "getCanPreviousPage", "getCanNextPage", "previousPage", "nextPage", "getPaginationRowModel", "_getPaginationRowModel", "_table$options$pageCo2", "ceil", "rows", "getDefaultPinningState", "Pinning", "onColumnPinningChange", "pin", "columnIds", "setColumnPinning", "_old$left3", "_old$right3", "_old$left", "_old$right", "_old$left2", "_old$right2", "getCanPin", "_d$columnDef$enablePi", "enablePinning", "getIsPinned", "leafColumnIds", "isLeft", "isRight", "getPinnedIndex", "getCenterVisibleCells", "_getAllVisibleCells", "allCells", "leftAndRight", "debugRows", "getLeftVisibleCells", "cells", "getRightVisibleCells", "resetColumnPinning", "getIsSomeColumnsPinned", "_pinningState$positio", "pinningState", "_pinningState$left", "_pinningState$right", "getLeftLeafColumns", "getRightLeafColumns", "getCenterLeafColumns", "RowSelection", "rowSelection", "onRowSelectionChange", "enableRowSelection", "enableMultiRowSelection", "enableSubRowSelection", "setRowSelection", "resetRowSelection", "_table$initialState$r", "toggleAllRowsSelected", "getIsAllRowsSelected", "preGroupedFlatRows", "getCanSelect", "toggleAllPageRowsSelected", "resolvedValue", "getIsAllPageRowsSelected", "mutateRowIsSelected", "getPreSelectedRowModel", "getSelectedRowModel", "rowModel", "selectRowsFn", "getFilteredSelectedRowModel", "getGroupedSelectedRowModel", "isAllRowsSelected", "paginationFlatRows", "isAllPageRowsSelected", "getIsSomeRowsSelected", "_table$getState$rowSe", "totalSelected", "getIsSomePageRowsSelected", "getIsSelected", "getIsSomeSelected", "getToggleAllRowsSelectedHandler", "target", "checked", "getToggleAllPageRowsSelectedHandler", "toggleSelected", "isSelected", "selectedRowIds", "isRowSelected", "isSubRowSelected", "getIsAllSubRowsSelected", "getCanSelectSubRows", "getCanMultiSelect", "getToggleSelectedHandler", "canSelect", "_target", "getRow", "newSelectedFlatRows", "newSelectedRowsById", "recurseRows", "_row$subRows2", "selection", "_selection$row$id", "allChildrenSelected", "someSelected", "subRow", "reSplitAlphaNumeric", "alphanumeric", "rowA", "rowB", "compareAlphanumeric", "alphanumericCaseSensitive", "text", "compareBasic", "textCaseSensitive", "datetime", "basic", "aStr", "bStr", "aa", "bb", "an", "parseInt", "bn", "combo", "sortingFns", "Sorting", "sorting", "sortingFn", "onSortingChange", "isMultiSortEvent", "shiftKey", "getAutoSortingFn", "firstRows", "slice", "isString", "getAutoSortDir", "getSortingFn", "_table$options$sortin", "_table$options$sortin2", "toggleSorting", "desc", "multi", "nextSortingOrder", "getNextSortingOrder", "hasManualValue", "setSorting", "existingSorting", "existingIndex", "newSorting", "sortAction", "nextDesc", "getCanMultiSort", "_table$options$maxMul", "maxMultiSortColCount", "getFirstSortDir", "_column$columnDef$sor", "sortDescFirst", "firstSortDirection", "isSorted", "getIsSorted", "enableSortingRemoval", "enableMultiRemove", "getCanSort", "enableSorting", "enableMultiSort", "_table$getState$sorti", "columnSort", "getSortIndex", "_table$getState$sorti2", "_table$getState$sorti3", "clearSorting", "getToggleSortingHandler", "canSort", "resetSorting", "_table$initialState$s", "getPreSortedRowModel", "_getSortedRowModel", "manualSorting", "Visibility", "columnVisibility", "onColumnVisibilityChange", "toggleVisibility", "getCanHide", "setColumnVisibility", "enableHiding", "getToggleVisibilityHandler", "getAllCells", "getVisibleCells", "makeVisibleColumnsMethod", "getColumns", "getVisibleFlatColumns", "getAllFlatColumns", "getCenterVisibleLeafColumns", "resetColumnVisibility", "toggleAllColumnsVisible", "_value", "getIsAllColumnsVisible", "getIsSomeColumnsVisible", "getToggleAllColumnsVisibilityHandler", "features", "_options$initialState", "defaultOptions", "mergeOptions", "coreInitialState", "_feature$getInitialSt", "queuedTimeout", "coreInstance", "cb", "Promise", "resolve", "then", "catch", "error", "setTimeout", "reset", "setOptions", "newOptions", "onStateChange", "_getRowId", "getRowId", "_getCoreRowModel", "_defaultColumn", "_props$renderValue$to", "_props$renderValue", "renderValue", "_getColumnDefs", "columnDefs", "recurseColumns", "groupingColumnDef", "_getAllFlatColumnsById", "flatColumns", "acc", "getRenderValue", "_cell$getValue", "renderFallbackValue", "rowIndex", "parentId", "_valuesCache", "_uniqueValuesCache", "getUniqueValues", "getLeafRows", "getParentRow", "getParentRows", "parentRows", "currentRow", "parentRow", "getCoreRowModel", "table", "memo", "options", "data", "rowModel", "rows", "flatRows", "rowsById", "accessRows", "originalRows", "depth", "parentRow", "i", "length", "row", "createRow", "_getRowId", "undefined", "id", "push", "getSubRows", "_row$originalSubRows", "originalSubRows", "subRows", "key", "debug", "_table$options$debugA", "debugAll", "debugTable", "onChange", "_autoResetPageIndex", "getSortedRowModel", "table", "memo", "getState", "sorting", "getPreSortedRowModel", "rowModel", "rows", "length", "sortingState", "sortedFlatRows", "availableSorting", "filter", "sort", "_table$getColumn", "getColumn", "id", "getCanSort", "columnInfoById", "forEach", "sortEntry", "column", "sortUndefined", "columnDef", "invertSorting", "sortingFn", "getSortingFn", "sortData", "sortedData", "rowA", "rowB", "i", "_sortEntry$desc", "columnInfo", "isDesc", "desc", "aValue", "getValue", "bValue", "aUndefined", "bUndefined", "sortInt", "index", "row", "_row$subRows", "push", "subRows", "flatRows", "rowsById", "key", "debug", "_table$options$debugA", "options", "debugAll", "debugTable", "onChange", "_autoResetPageIndex", "flexRender", "Comp", "props", "isReactComponent", "React", "createElement", "component", "isClassComponent", "isExoticComponent", "proto", "Object", "getPrototypeOf", "prototype", "$$typeof", "includes", "description", "useReactTable", "options", "resolvedOptions", "state", "onStateChange", "renderFallbackValue", "tableRef", "useState", "current", "createTable", "setState", "initialState", "setOptions", "prev", "updater", "i", "_extends", "i", "memo", "getDeps", "fn", "opts", "deps", "initialDeps", "result", "depTime", "key", "debug", "Date", "now", "newDeps", "depsChanged", "length", "some", "dep", "index", "resultTime", "depEndTime", "Math", "round", "resultEndTime", "resultFpsPercentage", "pad", "str", "num", "String", "console", "info", "max", "min", "onChange", "notUndefined", "value", "msg", "undefined", "Error", "approxEqual", "a", "b", "abs", "defaultKeyExtractor", "index", "defaultRangeExtractor", "range", "start", "Math", "max", "startIndex", "overscan", "end", "min", "endIndex", "count", "arr", "i", "push", "observeElementRect", "instance", "cb", "element", "scrollElement", "handler", "rect", "width", "height", "round", "getBoundingClientRect", "observer", "ResizeObserver", "entries", "entry", "borderBoxSize", "box", "inlineSize", "blockSize", "observe", "unobserve", "observeElementOffset", "instance", "cb", "element", "scrollElement", "handler", "options", "horizontal", "addEventListener", "passive", "removeEventListener", "measureElement", "element", "entry", "instance", "borderBoxSize", "box", "size", "Math", "round", "options", "horizontal", "getBoundingClientRect", "elementScroll", "offset", "instance", "adjustments", "behavior", "toOffset", "scrollElement", "scrollTo", "options", "horizontal", "Virtualizer", "opts", "unsubs", "isScrolling", "isScrollingTimeoutId", "scrollToIndexTimeoutId", "measurementsCache", "itemSizeCache", "Map", "pendingMeasuredCacheIndexes", "scrollDirection", "scrollAdjustments", "measureElementCache", "observer", "_ro", "get", "ResizeObserver", "entries", "forEach", "entry", "_measureElement", "target", "disconnect", "observe", "box", "unobserve", "range", "startIndex", "endIndex", "setOptions", "Object", "key", "value", "_extends", "debug", "initialOffset", "overscan", "paddingStart", "paddingEnd", "scrollPaddingStart", "scrollPaddingEnd", "getItemKey", "defaultKeyExtractor", "rangeExtractor", "defaultRangeExtractor", "onChange", "measureElement", "initialRect", "width", "height", "scrollMargin", "scrollingDelay", "indexAttribute", "initialMeasurementsCache", "lanes", "notify", "cleanup", "filter", "Boolean", "d", "_didMount", "_willUpdate", "getScrollElement", "_scrollToOffset", "scrollOffset", "undefined", "push", "observeElementRect", "rect", "prev", "scrollRect", "maybeNotify", "observeElementOffset", "clearTimeout", "setTimeout", "getSize", "memoOptions", "memo", "count", "getFurthestMeasurement", "measurements", "index", "furthestMeasurementsFound", "furthestMeasurements", "m", "measurement", "has", "lane", "previousFurthestMeasurement", "end", "set", "size", "Array", "from", "values", "sort", "a", "b", "getMeasurements", "min", "length", "Math", "slice", "i", "furthestMeasurement", "start", "measuredSize", "estimateSize", "calculateRange", "outerSize", "initialDeps", "getIndexes", "indexFromElement", "node", "attributeName", "indexStr", "getAttribute", "console", "warn", "parseInt", "item", "prevNode", "isConnected", "measuredItemSize", "itemSize", "delta", "info", "getVirtualItems", "indexes", "virtualItems", "k", "len", "getVirtualItemForOffset", "notUndefined", "findNearestBinarySearch", "getOffsetForAlignment", "align", "scrollSizeProp", "scrollSize", "document", "documentElement", "maxOffset", "max", "getOffsetForIndex", "isDynamicMode", "cancelScrollToIndex", "scrollToOffset", "scrollToIndex", "initialAlign", "elementInDOM", "approxEqual", "scrollBy", "getTotalSize", "scrollToFn", "measure", "low", "high", "getCurrentValue", "middle", "currentValue", "getOffset", "useIsomorphicLayoutEffect", "document", "useLayoutEffect", "useEffect", "useVirtualizerBase", "options", "rerender", "useReducer", "resolvedOptions", "onChange", "instance", "React", "useState", "Virtualizer", "setOptions", "_didMount", "_willUpdate", "useVirtualizer", "observeElementRect", "observeElementOffset", "scrollToFn", "elementScroll", "G", "h", "x", "F", "i", "_", "y", "F", "i", "p", "m"]
}
